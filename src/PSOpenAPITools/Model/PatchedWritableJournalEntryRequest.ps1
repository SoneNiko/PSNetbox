#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER AssignedObjectType
No description available.
.PARAMETER AssignedObjectId
No description available.
.PARAMETER CreatedBy
No description available.
.PARAMETER Kind
* `info` - Info * `success` - Success * `warning` - Warning * `danger` - Danger
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

PatchedWritableJournalEntryRequest<PSCustomObject>
#>

function Initialize-PatchedWritableJournalEntryRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssignedObjectType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AssignedObjectId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CreatedBy},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("info", "success", "warning", "danger")]
        [String]
        ${Kind},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableJournalEntryRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($AssignedObjectId -and $AssignedObjectId -gt 9223372036854775807) {
          throw "invalid value for 'AssignedObjectId', must be smaller than or equal to 9223372036854775807."
        }

        if ($AssignedObjectId -and $AssignedObjectId -lt 0) {
          throw "invalid value for 'AssignedObjectId', must be greater than or equal to 0."
        }

        if (!$Comments -and $Comments.length -lt 1) {
            throw "invalid value for 'Comments', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "assigned_object_type" = ${AssignedObjectType}
            "assigned_object_id" = ${AssignedObjectId}
            "created_by" = ${CreatedBy}
            "kind" = ${Kind}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableJournalEntryRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableJournalEntryRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableJournalEntryRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableJournalEntryRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableJournalEntryRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableJournalEntryRequest
        $AllProperties = ("assigned_object_type", "assigned_object_id", "created_by", "kind", "comments", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assigned_object_type"))) { #optional property not found
            $AssignedObjectType = $null
        } else {
            $AssignedObjectType = $JsonParameters.PSobject.Properties["assigned_object_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assigned_object_id"))) { #optional property not found
            $AssignedObjectId = $null
        } else {
            $AssignedObjectId = $JsonParameters.PSobject.Properties["assigned_object_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_by"))) { #optional property not found
            $CreatedBy = $null
        } else {
            $CreatedBy = $JsonParameters.PSobject.Properties["created_by"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "kind"))) { #optional property not found
            $Kind = $null
        } else {
            $Kind = $JsonParameters.PSobject.Properties["kind"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "assigned_object_type" = ${AssignedObjectType}
            "assigned_object_id" = ${AssignedObjectId}
            "created_by" = ${CreatedBy}
            "kind" = ${Kind}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

