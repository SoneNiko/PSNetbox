#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Name
No description available.
.PARAMETER Slug
No description available.
.PARAMETER ScopeType
No description available.
.PARAMETER ScopeId
No description available.
.PARAMETER MinVid
Lowest permissible ID of a child VLAN
.PARAMETER MaxVid
Highest permissible ID of a child VLAN
.PARAMETER Description
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

VLANGroupRequest<PSCustomObject>
#>

function Initialize-VLANGroupRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[-a-zA-Z0-9_]+$")]
        [String]
        ${Slug},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ScopeType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ScopeId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MinVid},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxVid},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => VLANGroupRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if ($null -eq $Slug) {
            throw "invalid value for 'Slug', 'Slug' cannot be null."
        }

        if ($Slug.length -gt 100) {
            throw "invalid value for 'Slug', the character length must be smaller than or equal to 100."
        }

        if ($Slug.length -lt 1) {
            throw "invalid value for 'Slug', the character length must be great than or equal to 1."
        }

        if ($MinVid -and $MinVid -gt 4094) {
          throw "invalid value for 'MinVid', must be smaller than or equal to 4094."
        }

        if ($MinVid -and $MinVid -lt 1) {
          throw "invalid value for 'MinVid', must be greater than or equal to 1."
        }

        if ($MaxVid -and $MaxVid -gt 4094) {
          throw "invalid value for 'MaxVid', must be smaller than or equal to 4094."
        }

        if ($MaxVid -and $MaxVid -lt 1) {
          throw "invalid value for 'MaxVid', must be greater than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "slug" = ${Slug}
            "scope_type" = ${ScopeType}
            "scope_id" = ${ScopeId}
            "min_vid" = ${MinVid}
            "max_vid" = ${MaxVid}
            "description" = ${Description}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VLANGroupRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to VLANGroupRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VLANGroupRequest<PSCustomObject>
#>
function ConvertFrom-JsonToVLANGroupRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => VLANGroupRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in VLANGroupRequest
        $AllProperties = ("name", "slug", "scope_type", "scope_id", "min_vid", "max_vid", "description", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slug"))) {
            throw "Error! JSON cannot be serialized due to the required property 'slug' missing."
        } else {
            $Slug = $JsonParameters.PSobject.Properties["slug"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope_type"))) { #optional property not found
            $ScopeType = $null
        } else {
            $ScopeType = $JsonParameters.PSobject.Properties["scope_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "scope_id"))) { #optional property not found
            $ScopeId = $null
        } else {
            $ScopeId = $JsonParameters.PSobject.Properties["scope_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "min_vid"))) { #optional property not found
            $MinVid = $null
        } else {
            $MinVid = $JsonParameters.PSobject.Properties["min_vid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "max_vid"))) { #optional property not found
            $MaxVid = $null
        } else {
            $MaxVid = $JsonParameters.PSobject.Properties["max_vid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "slug" = ${Slug}
            "scope_type" = ${ScopeType}
            "scope_id" = ${ScopeId}
            "min_vid" = ${MinVid}
            "max_vid" = ${MaxVid}
            "description" = ${Description}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

