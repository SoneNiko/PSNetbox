#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER StartAddress
No description available.
.PARAMETER EndAddress
No description available.
.PARAMETER Vrf
No description available.
.PARAMETER Tenant
No description available.
.PARAMETER Status
Operational status of this range  * `active` - Active * `reserved` - Reserved * `deprecated` - Deprecated
.PARAMETER Role
The primary function of this range
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER MarkUtilized
Treat as fully utilized
.OUTPUTS

PatchedWritableIPRangeRequest<PSCustomObject>
#>

function Initialize-PatchedWritableIPRangeRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StartAddress},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EndAddress},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vrf},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Tenant},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("active", "reserved", "deprecated")]
        [String]
        ${Status},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Role},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MarkUtilized}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableIPRangeRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$StartAddress -and $StartAddress.length -lt 1) {
            throw "invalid value for 'StartAddress', the character length must be great than or equal to 1."
        }

        if (!$EndAddress -and $EndAddress.length -lt 1) {
            throw "invalid value for 'EndAddress', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "start_address" = ${StartAddress}
            "end_address" = ${EndAddress}
            "vrf" = ${Vrf}
            "tenant" = ${Tenant}
            "status" = ${Status}
            "role" = ${Role}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "mark_utilized" = ${MarkUtilized}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableIPRangeRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableIPRangeRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableIPRangeRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableIPRangeRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableIPRangeRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableIPRangeRequest
        $AllProperties = ("start_address", "end_address", "vrf", "tenant", "status", "role", "description", "comments", "tags", "custom_fields", "mark_utilized")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "start_address"))) { #optional property not found
            $StartAddress = $null
        } else {
            $StartAddress = $JsonParameters.PSobject.Properties["start_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "end_address"))) { #optional property not found
            $EndAddress = $null
        } else {
            $EndAddress = $JsonParameters.PSobject.Properties["end_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vrf"))) { #optional property not found
            $Vrf = $null
        } else {
            $Vrf = $JsonParameters.PSobject.Properties["vrf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mark_utilized"))) { #optional property not found
            $MarkUtilized = $null
        } else {
            $MarkUtilized = $JsonParameters.PSobject.Properties["mark_utilized"].value
        }

        $PSO = [PSCustomObject]@{
            "start_address" = ${StartAddress}
            "end_address" = ${EndAddress}
            "vrf" = ${Vrf}
            "tenant" = ${Tenant}
            "status" = ${Status}
            "role" = ${Role}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "mark_utilized" = ${MarkUtilized}
        }

        return $PSO
    }

}

