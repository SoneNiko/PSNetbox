#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Introduces support for Tag assignment. Adds `tags` serialization, and handles tag assignment on create() and update().

.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER EnvironmentParams
Any <a href=""https://jinja.palletsprojects.com/en/3.1.x/api/#jinja2.Environment"">additional parameters</a> to pass when constructing the Jinja2 environment.
.PARAMETER TemplateCode
Jinja2 template code.
.PARAMETER DataSource
Remote data source
.PARAMETER DataFile
No description available.
.PARAMETER Tags
No description available.
.OUTPUTS

PatchedWritableConfigTemplateRequest<PSCustomObject>
#>

function Initialize-PatchedWritableConfigTemplateRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EnvironmentParams},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemplateCode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DataSource},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DataFile},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableConfigTemplateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if (!$Name -and $Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if (!$TemplateCode -and $TemplateCode.length -lt 1) {
            throw "invalid value for 'TemplateCode', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "environment_params" = ${EnvironmentParams}
            "template_code" = ${TemplateCode}
            "data_source" = ${DataSource}
            "data_file" = ${DataFile}
            "tags" = ${Tags}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableConfigTemplateRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableConfigTemplateRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableConfigTemplateRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableConfigTemplateRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableConfigTemplateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableConfigTemplateRequest
        $AllProperties = ("name", "description", "environment_params", "template_code", "data_source", "data_file", "tags")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "environment_params"))) { #optional property not found
            $EnvironmentParams = $null
        } else {
            $EnvironmentParams = $JsonParameters.PSobject.Properties["environment_params"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "template_code"))) { #optional property not found
            $TemplateCode = $null
        } else {
            $TemplateCode = $JsonParameters.PSobject.Properties["template_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_source"))) { #optional property not found
            $DataSource = $null
        } else {
            $DataSource = $JsonParameters.PSobject.Properties["data_source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_file"))) { #optional property not found
            $DataFile = $null
        } else {
            $DataFile = $JsonParameters.PSobject.Properties["data_file"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "environment_params" = ${EnvironmentParams}
            "template_code" = ${TemplateCode}
            "data_source" = ${DataSource}
            "data_file" = ${DataFile}
            "tags" = ${Tags}
        }

        return $PSO
    }

}

