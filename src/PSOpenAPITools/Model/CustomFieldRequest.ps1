#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER ContentTypes
No description available.
.PARAMETER Type
* `text` - Text * `longtext` - Text (long) * `integer` - Integer * `decimal` - Decimal * `boolean` - Boolean (true/false) * `date` - Date * `datetime` - Date & time * `url` - URL * `json` - JSON * `select` - Selection * `multiselect` - Multiple selection * `object` - Object * `multiobject` - Multiple objects
.PARAMETER ObjectType
No description available.
.PARAMETER Name
Internal field name
.PARAMETER Label
Name of the field as displayed to users (if not provided, 'the field's name will be used)
.PARAMETER GroupName
Custom fields within the same group will be displayed together
.PARAMETER Description
No description available.
.PARAMETER Required
If true, this field is required when creating new objects or editing an existing object.
.PARAMETER SearchWeight
Weighting for search. Lower values are considered more important. Fields with a search weight of zero will be ignored.
.PARAMETER FilterLogic
* `disabled` - Disabled * `loose` - Loose * `exact` - Exact
.PARAMETER UiVisible
* `always` - Always * `if-set` - If set * `hidden` - Hidden
.PARAMETER UiEditable
* `yes` - Yes * `no` - No * `hidden` - Hidden
.PARAMETER IsCloneable
Replicate this value when cloning objects
.PARAMETER Default
Default value for the field (must be a JSON value). Encapsulate strings with double quotes (e.g. ""Foo"").
.PARAMETER Weight
Fields with higher weights appear lower in a form.
.PARAMETER ValidationMinimum
Minimum allowed value (for numeric fields)
.PARAMETER ValidationMaximum
Maximum allowed value (for numeric fields)
.PARAMETER ValidationRegex
Regular expression to enforce on text field values. Use ^ and $ to force matching of entire string. For example, <code>^[A-Z]{3}$</code> will limit values to exactly three uppercase letters.
.PARAMETER ChoiceSet
No description available.
.OUTPUTS

CustomFieldRequest<PSCustomObject>
#>

function Initialize-CustomFieldRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ContentTypes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("text", "longtext", "integer", "decimal", "boolean", "date", "datetime", "url", "json", "select", "multiselect", "object", "multiobject")]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ObjectType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[a-z0-9_]+$")]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Required},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SearchWeight},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("disabled", "loose", "exact")]
        [String]
        ${FilterLogic},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("always", "if-set", "hidden")]
        [String]
        ${UiVisible},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("yes", "no", "hidden")]
        [String]
        ${UiEditable},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsCloneable},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Default},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Weight},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ValidationMinimum},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ValidationMaximum},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ValidationRegex},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ChoiceSet}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CustomFieldRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ContentTypes) {
            throw "invalid value for 'ContentTypes', 'ContentTypes' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 50) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 50."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Label -and $Label.length -gt 50) {
            throw "invalid value for 'Label', the character length must be smaller than or equal to 50."
        }

        if (!$GroupName -and $GroupName.length -gt 50) {
            throw "invalid value for 'GroupName', the character length must be smaller than or equal to 50."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($SearchWeight -and $SearchWeight -gt 32767) {
          throw "invalid value for 'SearchWeight', must be smaller than or equal to 32767."
        }

        if ($SearchWeight -and $SearchWeight -lt 0) {
          throw "invalid value for 'SearchWeight', must be greater than or equal to 0."
        }

        if ($Weight -and $Weight -gt 32767) {
          throw "invalid value for 'Weight', must be smaller than or equal to 32767."
        }

        if ($Weight -and $Weight -lt 0) {
          throw "invalid value for 'Weight', must be greater than or equal to 0."
        }

        if ($ValidationMinimum -and $ValidationMinimum -gt 9223372036854775807) {
          throw "invalid value for 'ValidationMinimum', must be smaller than or equal to 9223372036854775807."
        }

        if ($ValidationMinimum -and $ValidationMinimum -lt -9223372036854775808) {
          throw "invalid value for 'ValidationMinimum', must be greater than or equal to -9223372036854775808."
        }

        if ($ValidationMaximum -and $ValidationMaximum -gt 9223372036854775807) {
          throw "invalid value for 'ValidationMaximum', must be smaller than or equal to 9223372036854775807."
        }

        if ($ValidationMaximum -and $ValidationMaximum -lt -9223372036854775808) {
          throw "invalid value for 'ValidationMaximum', must be greater than or equal to -9223372036854775808."
        }

        if (!$ValidationRegex -and $ValidationRegex.length -gt 500) {
            throw "invalid value for 'ValidationRegex', the character length must be smaller than or equal to 500."
        }


        $PSO = [PSCustomObject]@{
            "content_types" = ${ContentTypes}
            "type" = ${Type}
            "object_type" = ${ObjectType}
            "name" = ${Name}
            "label" = ${Label}
            "group_name" = ${GroupName}
            "description" = ${Description}
            "required" = ${Required}
            "search_weight" = ${SearchWeight}
            "filter_logic" = ${FilterLogic}
            "ui_visible" = ${UiVisible}
            "ui_editable" = ${UiEditable}
            "is_cloneable" = ${IsCloneable}
            "default" = ${Default}
            "weight" = ${Weight}
            "validation_minimum" = ${ValidationMinimum}
            "validation_maximum" = ${ValidationMaximum}
            "validation_regex" = ${ValidationRegex}
            "choice_set" = ${ChoiceSet}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CustomFieldRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CustomFieldRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CustomFieldRequest<PSCustomObject>
#>
function ConvertFrom-JsonToCustomFieldRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CustomFieldRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CustomFieldRequest
        $AllProperties = ("content_types", "type", "object_type", "name", "label", "group_name", "description", "required", "search_weight", "filter_logic", "ui_visible", "ui_editable", "is_cloneable", "default", "weight", "validation_minimum", "validation_maximum", "validation_regex", "choice_set")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'content_types' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content_types"))) {
            throw "Error! JSON cannot be serialized due to the required property 'content_types' missing."
        } else {
            $ContentTypes = $JsonParameters.PSobject.Properties["content_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object_type"))) { #optional property not found
            $ObjectType = $null
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["object_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group_name"))) { #optional property not found
            $GroupName = $null
        } else {
            $GroupName = $JsonParameters.PSobject.Properties["group_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "required"))) { #optional property not found
            $Required = $null
        } else {
            $Required = $JsonParameters.PSobject.Properties["required"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "search_weight"))) { #optional property not found
            $SearchWeight = $null
        } else {
            $SearchWeight = $JsonParameters.PSobject.Properties["search_weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "filter_logic"))) { #optional property not found
            $FilterLogic = $null
        } else {
            $FilterLogic = $JsonParameters.PSobject.Properties["filter_logic"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ui_visible"))) { #optional property not found
            $UiVisible = $null
        } else {
            $UiVisible = $JsonParameters.PSobject.Properties["ui_visible"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ui_editable"))) { #optional property not found
            $UiEditable = $null
        } else {
            $UiEditable = $JsonParameters.PSobject.Properties["ui_editable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_cloneable"))) { #optional property not found
            $IsCloneable = $null
        } else {
            $IsCloneable = $JsonParameters.PSobject.Properties["is_cloneable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default"))) { #optional property not found
            $Default = $null
        } else {
            $Default = $JsonParameters.PSobject.Properties["default"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validation_minimum"))) { #optional property not found
            $ValidationMinimum = $null
        } else {
            $ValidationMinimum = $JsonParameters.PSobject.Properties["validation_minimum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validation_maximum"))) { #optional property not found
            $ValidationMaximum = $null
        } else {
            $ValidationMaximum = $JsonParameters.PSobject.Properties["validation_maximum"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "validation_regex"))) { #optional property not found
            $ValidationRegex = $null
        } else {
            $ValidationRegex = $JsonParameters.PSobject.Properties["validation_regex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "choice_set"))) { #optional property not found
            $ChoiceSet = $null
        } else {
            $ChoiceSet = $JsonParameters.PSobject.Properties["choice_set"].value
        }

        $PSO = [PSCustomObject]@{
            "content_types" = ${ContentTypes}
            "type" = ${Type}
            "object_type" = ${ObjectType}
            "name" = ${Name}
            "label" = ${Label}
            "group_name" = ${GroupName}
            "description" = ${Description}
            "required" = ${Required}
            "search_weight" = ${SearchWeight}
            "filter_logic" = ${FilterLogic}
            "ui_visible" = ${UiVisible}
            "ui_editable" = ${UiEditable}
            "is_cloneable" = ${IsCloneable}
            "default" = ${Default}
            "weight" = ${Weight}
            "validation_minimum" = ${ValidationMinimum}
            "validation_maximum" = ${ValidationMaximum}
            "validation_regex" = ${ValidationRegex}
            "choice_set" = ${ChoiceSet}
        }

        return $PSO
    }

}

