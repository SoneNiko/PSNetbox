#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Name
No description available.
.PARAMETER FacilityId
No description available.
.PARAMETER Site
No description available.
.PARAMETER Location
No description available.
.PARAMETER Tenant
No description available.
.PARAMETER Status
* `reserved` - Reserved * `available` - Available * `planned` - Planned * `active` - Active * `deprecated` - Deprecated
.PARAMETER Role
Functional role
.PARAMETER Serial
No description available.
.PARAMETER AssetTag
A unique tag used to identify this rack
.PARAMETER Type
* `2-post-frame` - 2-post frame * `4-post-frame` - 4-post frame * `4-post-cabinet` - 4-post cabinet * `wall-frame` - Wall-mounted frame * `wall-frame-vertical` - Wall-mounted frame (vertical) * `wall-cabinet` - Wall-mounted cabinet * `wall-cabinet-vertical` - Wall-mounted cabinet (vertical)
.PARAMETER Width
Rail-to-rail width  * `10` - 10 inches * `19` - 19 inches * `21` - 21 inches * `23` - 23 inches
.PARAMETER UHeight
Height in rack units
.PARAMETER StartingUnit
Starting unit for rack
.PARAMETER Weight
No description available.
.PARAMETER MaxWeight
Maximum load capacity for the rack
.PARAMETER WeightUnit
* `kg` - Kilograms * `g` - Grams * `lb` - Pounds * `oz` - Ounces
.PARAMETER DescUnits
Units are numbered top-to-bottom
.PARAMETER OuterWidth
Outer dimension of rack (width)
.PARAMETER OuterDepth
Outer dimension of rack (depth)
.PARAMETER OuterUnit
* `mm` - Millimeters * `in` - Inches
.PARAMETER MountingDepth
Maximum depth of a mounted device, in millimeters. For four-post racks, this is the distance between the front and rear rails.
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

PatchedWritableRackRequest<PSCustomObject>
#>

function Initialize-PatchedWritableRackRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FacilityId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Site},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Location},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Tenant},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("reserved", "available", "planned", "active", "deprecated")]
        [String]
        ${Status},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Role},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetTag},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("2-post-frame", "4-post-frame", "4-post-cabinet", "wall-frame", "wall-frame-vertical", "wall-cabinet", "wall-cabinet-vertical", "")]
        [String]
        ${Type},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("10", "19", "21", "23")]
        [System.Nullable[Int32]]
        ${Width},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UHeight},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${StartingUnit},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Weight},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxWeight},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("kg", "g", "lb", "oz", "")]
        [String]
        ${WeightUnit},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${DescUnits},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${OuterWidth},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${OuterDepth},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("mm", "in", "")]
        [String]
        ${OuterUnit},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MountingDepth},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableRackRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if (!$Name -and $Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$FacilityId -and $FacilityId.length -gt 50) {
            throw "invalid value for 'FacilityId', the character length must be smaller than or equal to 50."
        }

        if (!$Serial -and $Serial.length -gt 50) {
            throw "invalid value for 'Serial', the character length must be smaller than or equal to 50."
        }

        if (!$AssetTag -and $AssetTag.length -gt 50) {
            throw "invalid value for 'AssetTag', the character length must be smaller than or equal to 50."
        }

        if ($Width -and $Width -gt 32767) {
          throw "invalid value for 'Width', must be smaller than or equal to 32767."
        }

        if ($Width -and $Width -lt 0) {
          throw "invalid value for 'Width', must be greater than or equal to 0."
        }

        if ($UHeight -and $UHeight -gt 100) {
          throw "invalid value for 'UHeight', must be smaller than or equal to 100."
        }

        if ($UHeight -and $UHeight -lt 1) {
          throw "invalid value for 'UHeight', must be greater than or equal to 1."
        }

        if ($StartingUnit -and $StartingUnit -gt 32767) {
          throw "invalid value for 'StartingUnit', must be smaller than or equal to 32767."
        }

        if ($StartingUnit -and $StartingUnit -lt 1) {
          throw "invalid value for 'StartingUnit', must be greater than or equal to 1."
        }

        if ($Weight -and $Weight -ge 1000000) {
          throw "invalid value for 'Weight', must be smaller than 1000000."
        }

        if ($Weight -and $Weight -le -1000000) {
          throw "invalid value for 'Weight', must be greater than -1000000."
        }

        if ($MaxWeight -and $MaxWeight -gt 2147483647) {
          throw "invalid value for 'MaxWeight', must be smaller than or equal to 2147483647."
        }

        if ($MaxWeight -and $MaxWeight -lt 0) {
          throw "invalid value for 'MaxWeight', must be greater than or equal to 0."
        }

        if ($OuterWidth -and $OuterWidth -gt 32767) {
          throw "invalid value for 'OuterWidth', must be smaller than or equal to 32767."
        }

        if ($OuterWidth -and $OuterWidth -lt 0) {
          throw "invalid value for 'OuterWidth', must be greater than or equal to 0."
        }

        if ($OuterDepth -and $OuterDepth -gt 32767) {
          throw "invalid value for 'OuterDepth', must be smaller than or equal to 32767."
        }

        if ($OuterDepth -and $OuterDepth -lt 0) {
          throw "invalid value for 'OuterDepth', must be greater than or equal to 0."
        }

        if ($MountingDepth -and $MountingDepth -gt 32767) {
          throw "invalid value for 'MountingDepth', must be smaller than or equal to 32767."
        }

        if ($MountingDepth -and $MountingDepth -lt 0) {
          throw "invalid value for 'MountingDepth', must be greater than or equal to 0."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "facility_id" = ${FacilityId}
            "site" = ${Site}
            "location" = ${Location}
            "tenant" = ${Tenant}
            "status" = ${Status}
            "role" = ${Role}
            "serial" = ${Serial}
            "asset_tag" = ${AssetTag}
            "type" = ${Type}
            "width" = ${Width}
            "u_height" = ${UHeight}
            "starting_unit" = ${StartingUnit}
            "weight" = ${Weight}
            "max_weight" = ${MaxWeight}
            "weight_unit" = ${WeightUnit}
            "desc_units" = ${DescUnits}
            "outer_width" = ${OuterWidth}
            "outer_depth" = ${OuterDepth}
            "outer_unit" = ${OuterUnit}
            "mounting_depth" = ${MountingDepth}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableRackRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableRackRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableRackRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableRackRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableRackRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableRackRequest
        $AllProperties = ("name", "facility_id", "site", "location", "tenant", "status", "role", "serial", "asset_tag", "type", "width", "u_height", "starting_unit", "weight", "max_weight", "weight_unit", "desc_units", "outer_width", "outer_depth", "outer_unit", "mounting_depth", "description", "comments", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "facility_id"))) { #optional property not found
            $FacilityId = $null
        } else {
            $FacilityId = $JsonParameters.PSobject.Properties["facility_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site"))) { #optional property not found
            $Site = $null
        } else {
            $Site = $JsonParameters.PSobject.Properties["site"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_tag"))) { #optional property not found
            $AssetTag = $null
        } else {
            $AssetTag = $JsonParameters.PSobject.Properties["asset_tag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "width"))) { #optional property not found
            $Width = $null
        } else {
            $Width = $JsonParameters.PSobject.Properties["width"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "u_height"))) { #optional property not found
            $UHeight = $null
        } else {
            $UHeight = $JsonParameters.PSobject.Properties["u_height"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "starting_unit"))) { #optional property not found
            $StartingUnit = $null
        } else {
            $StartingUnit = $JsonParameters.PSobject.Properties["starting_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "max_weight"))) { #optional property not found
            $MaxWeight = $null
        } else {
            $MaxWeight = $JsonParameters.PSobject.Properties["max_weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight_unit"))) { #optional property not found
            $WeightUnit = $null
        } else {
            $WeightUnit = $JsonParameters.PSobject.Properties["weight_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "desc_units"))) { #optional property not found
            $DescUnits = $null
        } else {
            $DescUnits = $JsonParameters.PSobject.Properties["desc_units"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "outer_width"))) { #optional property not found
            $OuterWidth = $null
        } else {
            $OuterWidth = $JsonParameters.PSobject.Properties["outer_width"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "outer_depth"))) { #optional property not found
            $OuterDepth = $null
        } else {
            $OuterDepth = $JsonParameters.PSobject.Properties["outer_depth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "outer_unit"))) { #optional property not found
            $OuterUnit = $null
        } else {
            $OuterUnit = $JsonParameters.PSobject.Properties["outer_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mounting_depth"))) { #optional property not found
            $MountingDepth = $null
        } else {
            $MountingDepth = $JsonParameters.PSobject.Properties["mounting_depth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "facility_id" = ${FacilityId}
            "site" = ${Site}
            "location" = ${Location}
            "tenant" = ${Tenant}
            "status" = ${Status}
            "role" = ${Role}
            "serial" = ${Serial}
            "asset_tag" = ${AssetTag}
            "type" = ${Type}
            "width" = ${Width}
            "u_height" = ${UHeight}
            "starting_unit" = ${StartingUnit}
            "weight" = ${Weight}
            "max_weight" = ${MaxWeight}
            "weight_unit" = ${WeightUnit}
            "desc_units" = ${DescUnits}
            "outer_width" = ${OuterWidth}
            "outer_depth" = ${OuterDepth}
            "outer_unit" = ${OuterUnit}
            "mounting_depth" = ${MountingDepth}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

