#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

A rack unit is an abstraction formed by the set (rack, position, face); it does not exist as a row in the database.

.PARAMETER Id
No description available.
.PARAMETER Name
No description available.
.PARAMETER Face
No description available.
.PARAMETER Device
No description available.
.PARAMETER Occupied
No description available.
.PARAMETER Display
No description available.
.OUTPUTS

RackUnit<PSCustomObject>
#>

function Initialize-RackUnit {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Face},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Device},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Occupied},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RackUnit' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($Id -ge 1000) {
          throw "invalid value for 'Id', must be smaller than 1000."
        }

        if ($Id -le -1000) {
          throw "invalid value for 'Id', must be greater than -1000."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($null -eq $Face) {
            throw "invalid value for 'Face', 'Face' cannot be null."
        }

        if ($null -eq $Device) {
            throw "invalid value for 'Device', 'Device' cannot be null."
        }

        if ($null -eq $Occupied) {
            throw "invalid value for 'Occupied', 'Occupied' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "face" = ${Face}
            "device" = ${Device}
            "occupied" = ${Occupied}
            "display" = ${Display}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RackUnit<PSCustomObject>

.DESCRIPTION

Convert from JSON to RackUnit<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RackUnit<PSCustomObject>
#>
function ConvertFrom-JsonToRackUnit {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RackUnit' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RackUnit
        $AllProperties = ("id", "name", "face", "device", "occupied", "display")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "face"))) {
            throw "Error! JSON cannot be serialized due to the required property 'face' missing."
        } else {
            $Face = $JsonParameters.PSobject.Properties["face"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device' missing."
        } else {
            $Device = $JsonParameters.PSobject.Properties["device"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "occupied"))) {
            throw "Error! JSON cannot be serialized due to the required property 'occupied' missing."
        } else {
            $Occupied = $JsonParameters.PSobject.Properties["occupied"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "name" = ${Name}
            "face" = ${Face}
            "device" = ${Device}
            "occupied" = ${Occupied}
            "display" = ${Display}
        }

        return $PSO
    }

}

