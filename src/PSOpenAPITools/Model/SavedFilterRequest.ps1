#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER ContentTypes
No description available.
.PARAMETER Name
No description available.
.PARAMETER Slug
No description available.
.PARAMETER Description
No description available.
.PARAMETER User
No description available.
.PARAMETER Weight
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Shared
No description available.
.PARAMETER Parameters
No description available.
.OUTPUTS

SavedFilterRequest<PSCustomObject>
#>

function Initialize-SavedFilterRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ContentTypes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[-a-zA-Z0-9_]+$")]
        [String]
        ${Slug},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${User},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Weight},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Shared},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parameters}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => SavedFilterRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ContentTypes) {
            throw "invalid value for 'ContentTypes', 'ContentTypes' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if ($null -eq $Slug) {
            throw "invalid value for 'Slug', 'Slug' cannot be null."
        }

        if ($Slug.length -gt 100) {
            throw "invalid value for 'Slug', the character length must be smaller than or equal to 100."
        }

        if ($Slug.length -lt 1) {
            throw "invalid value for 'Slug', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($Weight -and $Weight -gt 32767) {
          throw "invalid value for 'Weight', must be smaller than or equal to 32767."
        }

        if ($Weight -and $Weight -lt 0) {
          throw "invalid value for 'Weight', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "content_types" = ${ContentTypes}
            "name" = ${Name}
            "slug" = ${Slug}
            "description" = ${Description}
            "user" = ${User}
            "weight" = ${Weight}
            "enabled" = ${Enabled}
            "shared" = ${Shared}
            "parameters" = ${Parameters}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to SavedFilterRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to SavedFilterRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

SavedFilterRequest<PSCustomObject>
#>
function ConvertFrom-JsonToSavedFilterRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => SavedFilterRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in SavedFilterRequest
        $AllProperties = ("content_types", "name", "slug", "description", "user", "weight", "enabled", "shared", "parameters")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'content_types' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content_types"))) {
            throw "Error! JSON cannot be serialized due to the required property 'content_types' missing."
        } else {
            $ContentTypes = $JsonParameters.PSobject.Properties["content_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slug"))) {
            throw "Error! JSON cannot be serialized due to the required property 'slug' missing."
        } else {
            $Slug = $JsonParameters.PSobject.Properties["slug"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parameters"))) {
            throw "Error! JSON cannot be serialized due to the required property 'parameters' missing."
        } else {
            $Parameters = $JsonParameters.PSobject.Properties["parameters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shared"))) { #optional property not found
            $Shared = $null
        } else {
            $Shared = $JsonParameters.PSobject.Properties["shared"].value
        }

        $PSO = [PSCustomObject]@{
            "content_types" = ${ContentTypes}
            "name" = ${Name}
            "slug" = ${Slug}
            "description" = ${Description}
            "user" = ${User}
            "weight" = ${Weight}
            "enabled" = ${Enabled}
            "shared" = ${Shared}
            "parameters" = ${Parameters}
        }

        return $PSO
    }

}

