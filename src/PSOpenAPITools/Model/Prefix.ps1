#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Family
No description available.
.PARAMETER Prefix
No description available.
.PARAMETER Site
No description available.
.PARAMETER Vrf
No description available.
.PARAMETER Tenant
No description available.
.PARAMETER Vlan
No description available.
.PARAMETER Status
No description available.
.PARAMETER Role
No description available.
.PARAMETER IsPool
All IP addresses within this prefix are considered usable
.PARAMETER MarkUtilized
Treat as fully utilized
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER Children
No description available.
.PARAMETER Depth
No description available.
.OUTPUTS

Prefix<PSCustomObject>
#>

function Initialize-Prefix {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Family},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Prefix},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Site},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Vrf},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Tenant},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Vlan},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Role},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsPool},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MarkUtilized},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Children},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Depth}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Prefix' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $Family) {
            throw "invalid value for 'Family', 'Family' cannot be null."
        }

        if ($null -eq $Prefix) {
            throw "invalid value for 'Prefix', 'Prefix' cannot be null."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $Children) {
            throw "invalid value for 'Children', 'Children' cannot be null."
        }

        if ($null -eq $Depth) {
            throw "invalid value for 'Depth', 'Depth' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "family" = ${Family}
            "prefix" = ${Prefix}
            "site" = ${Site}
            "vrf" = ${Vrf}
            "tenant" = ${Tenant}
            "vlan" = ${Vlan}
            "status" = ${Status}
            "role" = ${Role}
            "is_pool" = ${IsPool}
            "mark_utilized" = ${MarkUtilized}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "children" = ${Children}
            "_depth" = ${Depth}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Prefix<PSCustomObject>

.DESCRIPTION

Convert from JSON to Prefix<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Prefix<PSCustomObject>
#>
function ConvertFrom-JsonToPrefix {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Prefix' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Prefix
        $AllProperties = ("id", "url", "display", "family", "prefix", "site", "vrf", "tenant", "vlan", "status", "role", "is_pool", "mark_utilized", "description", "comments", "tags", "custom_fields", "created", "last_updated", "children", "_depth")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "family"))) {
            throw "Error! JSON cannot be serialized due to the required property 'family' missing."
        } else {
            $Family = $JsonParameters.PSobject.Properties["family"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prefix"))) {
            throw "Error! JSON cannot be serialized due to the required property 'prefix' missing."
        } else {
            $Prefix = $JsonParameters.PSobject.Properties["prefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "children"))) {
            throw "Error! JSON cannot be serialized due to the required property 'children' missing."
        } else {
            $Children = $JsonParameters.PSobject.Properties["children"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_depth"))) {
            throw "Error! JSON cannot be serialized due to the required property '_depth' missing."
        } else {
            $Depth = $JsonParameters.PSobject.Properties["_depth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site"))) { #optional property not found
            $Site = $null
        } else {
            $Site = $JsonParameters.PSobject.Properties["site"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vrf"))) { #optional property not found
            $Vrf = $null
        } else {
            $Vrf = $JsonParameters.PSobject.Properties["vrf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vlan"))) { #optional property not found
            $Vlan = $null
        } else {
            $Vlan = $JsonParameters.PSobject.Properties["vlan"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_pool"))) { #optional property not found
            $IsPool = $null
        } else {
            $IsPool = $JsonParameters.PSobject.Properties["is_pool"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mark_utilized"))) { #optional property not found
            $MarkUtilized = $null
        } else {
            $MarkUtilized = $JsonParameters.PSobject.Properties["mark_utilized"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "family" = ${Family}
            "prefix" = ${Prefix}
            "site" = ${Site}
            "vrf" = ${Vrf}
            "tenant" = ${Tenant}
            "vlan" = ${Vlan}
            "status" = ${Status}
            "role" = ${Role}
            "is_pool" = ${IsPool}
            "mark_utilized" = ${MarkUtilized}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "children" = ${Children}
            "_depth" = ${Depth}
        }

        return $PSO
    }

}

