#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Name
No description available.
.PARAMETER Type
No description available.
.PARAMETER SourceUrl
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Parameters
No description available.
.PARAMETER IgnoreRules
Patterns (one per line) matching files to ignore when syncing
.PARAMETER CustomFields
No description available.
.OUTPUTS

PatchedWritableDataSourceRequest<PSCustomObject>
#>

function Initialize-PatchedWritableDataSourceRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SourceUrl},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parameters},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IgnoreRules},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableDataSourceRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if (!$Name -and $Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Type -and $Type.length -gt 50) {
            throw "invalid value for 'Type', the character length must be smaller than or equal to 50."
        }

        if (!$Type -and $Type.length -lt 1) {
            throw "invalid value for 'Type', the character length must be great than or equal to 1."
        }

        if (!$SourceUrl -and $SourceUrl.length -gt 200) {
            throw "invalid value for 'SourceUrl', the character length must be smaller than or equal to 200."
        }

        if (!$SourceUrl -and $SourceUrl.length -lt 1) {
            throw "invalid value for 'SourceUrl', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "type" = ${Type}
            "source_url" = ${SourceUrl}
            "enabled" = ${Enabled}
            "description" = ${Description}
            "comments" = ${Comments}
            "parameters" = ${Parameters}
            "ignore_rules" = ${IgnoreRules}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableDataSourceRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableDataSourceRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableDataSourceRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableDataSourceRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableDataSourceRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableDataSourceRequest
        $AllProperties = ("name", "type", "source_url", "enabled", "description", "comments", "parameters", "ignore_rules", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "source_url"))) { #optional property not found
            $SourceUrl = $null
        } else {
            $SourceUrl = $JsonParameters.PSobject.Properties["source_url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parameters"))) { #optional property not found
            $Parameters = $null
        } else {
            $Parameters = $JsonParameters.PSobject.Properties["parameters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ignore_rules"))) { #optional property not found
            $IgnoreRules = $null
        } else {
            $IgnoreRules = $JsonParameters.PSobject.Properties["ignore_rules"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "type" = ${Type}
            "source_url" = ${SourceUrl}
            "enabled" = ${Enabled}
            "description" = ${Description}
            "comments" = ${Comments}
            "parameters" = ${Parameters}
            "ignore_rules" = ${IgnoreRules}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

