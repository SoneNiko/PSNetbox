#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER PayloadUrl
This URL will be called using the HTTP method defined when the webhook is called. Jinja2 template processing is supported with the same context as the request body.
.PARAMETER HttpMethod
* `GET` - GET * `POST` - POST * `PUT` - PUT * `PATCH` - PATCH * `DELETE` - DELETE
.PARAMETER HttpContentType
The complete list of official content types is available <a href=""https://www.iana.org/assignments/media-types/media-types.xhtml"">here</a>.
.PARAMETER AdditionalHeaders
User-supplied HTTP headers to be sent with the request in addition to the HTTP content type. Headers should be defined in the format <code>Name: Value</code>. Jinja2 template processing is supported with the same context as the request body (below).
.PARAMETER BodyTemplate
Jinja2 template for a custom request body. If blank, a JSON object representing the change will be included. Available context data includes: <code>event</code>, <code>model</code>, <code>timestamp</code>, <code>username</code>, <code>request_id</code>, and <code>data</code>.
.PARAMETER Secret
When provided, the request will include a <code>X-Hook-Signature</code> header containing a HMAC hex digest of the payload body using the secret as the key. The secret is not transmitted in the request.
.PARAMETER SslVerification
Enable SSL certificate verification. Disable with caution!
.PARAMETER CaFilePath
The specific CA certificate file to use for SSL verification. Leave blank to use the system defaults.
.PARAMETER CustomFields
No description available.
.PARAMETER Tags
No description available.
.OUTPUTS

WebhookRequest<PSCustomObject>
#>

function Initialize-WebhookRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PayloadUrl},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("GET", "POST", "PUT", "PATCH", "DELETE")]
        [String]
        ${HttpMethod},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${HttpContentType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AdditionalHeaders},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BodyTemplate},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Secret},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SslVerification},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CaFilePath},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WebhookRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 150) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 150."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $PayloadUrl) {
            throw "invalid value for 'PayloadUrl', 'PayloadUrl' cannot be null."
        }

        if ($PayloadUrl.length -gt 500) {
            throw "invalid value for 'PayloadUrl', the character length must be smaller than or equal to 500."
        }

        if ($PayloadUrl.length -lt 1) {
            throw "invalid value for 'PayloadUrl', the character length must be great than or equal to 1."
        }

        if (!$HttpContentType -and $HttpContentType.length -gt 100) {
            throw "invalid value for 'HttpContentType', the character length must be smaller than or equal to 100."
        }

        if (!$HttpContentType -and $HttpContentType.length -lt 1) {
            throw "invalid value for 'HttpContentType', the character length must be great than or equal to 1."
        }

        if (!$Secret -and $Secret.length -gt 255) {
            throw "invalid value for 'Secret', the character length must be smaller than or equal to 255."
        }

        if (!$CaFilePath -and $CaFilePath.length -gt 4096) {
            throw "invalid value for 'CaFilePath', the character length must be smaller than or equal to 4096."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "payload_url" = ${PayloadUrl}
            "http_method" = ${HttpMethod}
            "http_content_type" = ${HttpContentType}
            "additional_headers" = ${AdditionalHeaders}
            "body_template" = ${BodyTemplate}
            "secret" = ${Secret}
            "ssl_verification" = ${SslVerification}
            "ca_file_path" = ${CaFilePath}
            "custom_fields" = ${CustomFields}
            "tags" = ${Tags}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WebhookRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to WebhookRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WebhookRequest<PSCustomObject>
#>
function ConvertFrom-JsonToWebhookRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WebhookRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WebhookRequest
        $AllProperties = ("name", "description", "payload_url", "http_method", "http_content_type", "additional_headers", "body_template", "secret", "ssl_verification", "ca_file_path", "custom_fields", "tags")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "payload_url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'payload_url' missing."
        } else {
            $PayloadUrl = $JsonParameters.PSobject.Properties["payload_url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "http_method"))) { #optional property not found
            $HttpMethod = $null
        } else {
            $HttpMethod = $JsonParameters.PSobject.Properties["http_method"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "http_content_type"))) { #optional property not found
            $HttpContentType = $null
        } else {
            $HttpContentType = $JsonParameters.PSobject.Properties["http_content_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "additional_headers"))) { #optional property not found
            $AdditionalHeaders = $null
        } else {
            $AdditionalHeaders = $JsonParameters.PSobject.Properties["additional_headers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "body_template"))) { #optional property not found
            $BodyTemplate = $null
        } else {
            $BodyTemplate = $JsonParameters.PSobject.Properties["body_template"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "secret"))) { #optional property not found
            $Secret = $null
        } else {
            $Secret = $JsonParameters.PSobject.Properties["secret"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ssl_verification"))) { #optional property not found
            $SslVerification = $null
        } else {
            $SslVerification = $JsonParameters.PSobject.Properties["ssl_verification"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ca_file_path"))) { #optional property not found
            $CaFilePath = $null
        } else {
            $CaFilePath = $JsonParameters.PSobject.Properties["ca_file_path"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "payload_url" = ${PayloadUrl}
            "http_method" = ${HttpMethod}
            "http_content_type" = ${HttpContentType}
            "additional_headers" = ${AdditionalHeaders}
            "body_template" = ${BodyTemplate}
            "secret" = ${Secret}
            "ssl_verification" = ${SslVerification}
            "ca_file_path" = ${CaFilePath}
            "custom_fields" = ${CustomFields}
            "tags" = ${Tags}
        }

        return $PSO
    }

}

