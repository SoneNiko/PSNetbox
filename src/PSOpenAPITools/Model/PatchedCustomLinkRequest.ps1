#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER ContentTypes
No description available.
.PARAMETER Name
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER LinkText
Jinja2 template code for link text
.PARAMETER LinkUrl
Jinja2 template code for link URL
.PARAMETER Weight
No description available.
.PARAMETER GroupName
Links with the same group will appear as a dropdown menu
.PARAMETER ButtonClass
The class of the first link in a group will be used for the dropdown button  * `outline-dark` - Default * `blue` - Blue * `indigo` - Indigo * `purple` - Purple * `pink` - Pink * `red` - Red * `orange` - Orange * `yellow` - Yellow * `green` - Green * `teal` - Teal * `cyan` - Cyan * `gray` - Gray * `black` - Black * `white` - White * `ghost-dark` - Link
.PARAMETER NewWindow
Force link to open in a new window
.OUTPUTS

PatchedCustomLinkRequest<PSCustomObject>
#>

function Initialize-PatchedCustomLinkRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ContentTypes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkText},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkUrl},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Weight},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${GroupName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("outline-dark", "blue", "indigo", "purple", "pink", "red", "orange", "yellow", "green", "teal", "cyan", "gray", "black", "white", "ghost-dark")]
        [String]
        ${ButtonClass},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${NewWindow}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedCustomLinkRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if (!$Name -and $Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$LinkText -and $LinkText.length -lt 1) {
            throw "invalid value for 'LinkText', the character length must be great than or equal to 1."
        }

        if (!$LinkUrl -and $LinkUrl.length -lt 1) {
            throw "invalid value for 'LinkUrl', the character length must be great than or equal to 1."
        }

        if ($Weight -and $Weight -gt 32767) {
          throw "invalid value for 'Weight', must be smaller than or equal to 32767."
        }

        if ($Weight -and $Weight -lt 0) {
          throw "invalid value for 'Weight', must be greater than or equal to 0."
        }

        if (!$GroupName -and $GroupName.length -gt 50) {
            throw "invalid value for 'GroupName', the character length must be smaller than or equal to 50."
        }


        $PSO = [PSCustomObject]@{
            "content_types" = ${ContentTypes}
            "name" = ${Name}
            "enabled" = ${Enabled}
            "link_text" = ${LinkText}
            "link_url" = ${LinkUrl}
            "weight" = ${Weight}
            "group_name" = ${GroupName}
            "button_class" = ${ButtonClass}
            "new_window" = ${NewWindow}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedCustomLinkRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedCustomLinkRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedCustomLinkRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedCustomLinkRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedCustomLinkRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedCustomLinkRequest
        $AllProperties = ("content_types", "name", "enabled", "link_text", "link_url", "weight", "group_name", "button_class", "new_window")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content_types"))) { #optional property not found
            $ContentTypes = $null
        } else {
            $ContentTypes = $JsonParameters.PSobject.Properties["content_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_text"))) { #optional property not found
            $LinkText = $null
        } else {
            $LinkText = $JsonParameters.PSobject.Properties["link_text"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_url"))) { #optional property not found
            $LinkUrl = $null
        } else {
            $LinkUrl = $JsonParameters.PSobject.Properties["link_url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group_name"))) { #optional property not found
            $GroupName = $null
        } else {
            $GroupName = $JsonParameters.PSobject.Properties["group_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "button_class"))) { #optional property not found
            $ButtonClass = $null
        } else {
            $ButtonClass = $JsonParameters.PSobject.Properties["button_class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "new_window"))) { #optional property not found
            $NewWindow = $null
        } else {
            $NewWindow = $JsonParameters.PSobject.Properties["new_window"].value
        }

        $PSO = [PSCustomObject]@{
            "content_types" = ${ContentTypes}
            "name" = ${Name}
            "enabled" = ${Enabled}
            "link_text" = ${LinkText}
            "link_url" = ${LinkUrl}
            "weight" = ${Weight}
            "group_name" = ${GroupName}
            "button_class" = ${ButtonClass}
            "new_window" = ${NewWindow}
        }

        return $PSO
    }

}

