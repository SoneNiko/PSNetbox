#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Name
No description available.
.PARAMETER Device
No description available.
.PARAMETER Identifier
Numeric identifier unique to the parent device
.PARAMETER Tenant
No description available.
.PARAMETER PrimaryIp
No description available.
.PARAMETER PrimaryIp4
No description available.
.PARAMETER PrimaryIp6
No description available.
.PARAMETER Status
No description available.
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER InterfaceCount
No description available.
.OUTPUTS

VirtualDeviceContext<PSCustomObject>
#>

function Initialize-VirtualDeviceContext {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Device},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Identifier},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Tenant},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PrimaryIp},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PrimaryIp4},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PrimaryIp6},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${InterfaceCount}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => VirtualDeviceContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 64) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 64."
        }

        if ($null -eq $Device) {
            throw "invalid value for 'Device', 'Device' cannot be null."
        }

        if ($Identifier -and $Identifier -gt 32767) {
          throw "invalid value for 'Identifier', must be smaller than or equal to 32767."
        }

        if ($Identifier -and $Identifier -lt 0) {
          throw "invalid value for 'Identifier', must be greater than or equal to 0."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $InterfaceCount) {
            throw "invalid value for 'InterfaceCount', 'InterfaceCount' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "device" = ${Device}
            "identifier" = ${Identifier}
            "tenant" = ${Tenant}
            "primary_ip" = ${PrimaryIp}
            "primary_ip4" = ${PrimaryIp4}
            "primary_ip6" = ${PrimaryIp6}
            "status" = ${Status}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "interface_count" = ${InterfaceCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VirtualDeviceContext<PSCustomObject>

.DESCRIPTION

Convert from JSON to VirtualDeviceContext<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VirtualDeviceContext<PSCustomObject>
#>
function ConvertFrom-JsonToVirtualDeviceContext {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => VirtualDeviceContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in VirtualDeviceContext
        $AllProperties = ("id", "url", "display", "name", "device", "identifier", "tenant", "primary_ip", "primary_ip4", "primary_ip6", "status", "description", "comments", "tags", "custom_fields", "created", "last_updated", "interface_count")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device' missing."
        } else {
            $Device = $JsonParameters.PSobject.Properties["device"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primary_ip"))) {
            throw "Error! JSON cannot be serialized due to the required property 'primary_ip' missing."
        } else {
            $PrimaryIp = $JsonParameters.PSobject.Properties["primary_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "interface_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'interface_count' missing."
        } else {
            $InterfaceCount = $JsonParameters.PSobject.Properties["interface_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "identifier"))) { #optional property not found
            $Identifier = $null
        } else {
            $Identifier = $JsonParameters.PSobject.Properties["identifier"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primary_ip4"))) { #optional property not found
            $PrimaryIp4 = $null
        } else {
            $PrimaryIp4 = $JsonParameters.PSobject.Properties["primary_ip4"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primary_ip6"))) { #optional property not found
            $PrimaryIp6 = $null
        } else {
            $PrimaryIp6 = $JsonParameters.PSobject.Properties["primary_ip6"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "device" = ${Device}
            "identifier" = ${Identifier}
            "tenant" = ${Tenant}
            "primary_ip" = ${PrimaryIp}
            "primary_ip4" = ${PrimaryIp4}
            "primary_ip6" = ${PrimaryIp6}
            "status" = ${Status}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "interface_count" = ${InterfaceCount}
        }

        return $PSO
    }

}

