#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Circuit
No description available.
.PARAMETER TermSide
* `A` - A * `Z` - Z
.PARAMETER Site
No description available.
.PARAMETER ProviderNetwork
No description available.
.PARAMETER PortSpeed
Physical circuit speed
.PARAMETER UpstreamSpeed
Upstream speed, if different from port speed
.PARAMETER XconnectId
ID of the local cross-connect
.PARAMETER PpInfo
Patch panel ID and port number(s)
.PARAMETER Description
No description available.
.PARAMETER MarkConnected
Treat as if a cable is connected
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

PatchedWritableCircuitTerminationRequest<PSCustomObject>
#>

function Initialize-PatchedWritableCircuitTerminationRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Circuit},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("A", "Z")]
        [String]
        ${TermSide},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Site},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProviderNetwork},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PortSpeed},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UpstreamSpeed},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${XconnectId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PpInfo},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MarkConnected},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableCircuitTerminationRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($PortSpeed -and $PortSpeed -gt 2147483647) {
          throw "invalid value for 'PortSpeed', must be smaller than or equal to 2147483647."
        }

        if ($PortSpeed -and $PortSpeed -lt 0) {
          throw "invalid value for 'PortSpeed', must be greater than or equal to 0."
        }

        if ($UpstreamSpeed -and $UpstreamSpeed -gt 2147483647) {
          throw "invalid value for 'UpstreamSpeed', must be smaller than or equal to 2147483647."
        }

        if ($UpstreamSpeed -and $UpstreamSpeed -lt 0) {
          throw "invalid value for 'UpstreamSpeed', must be greater than or equal to 0."
        }

        if (!$XconnectId -and $XconnectId.length -gt 50) {
            throw "invalid value for 'XconnectId', the character length must be smaller than or equal to 50."
        }

        if (!$PpInfo -and $PpInfo.length -gt 100) {
            throw "invalid value for 'PpInfo', the character length must be smaller than or equal to 100."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "circuit" = ${Circuit}
            "term_side" = ${TermSide}
            "site" = ${Site}
            "provider_network" = ${ProviderNetwork}
            "port_speed" = ${PortSpeed}
            "upstream_speed" = ${UpstreamSpeed}
            "xconnect_id" = ${XconnectId}
            "pp_info" = ${PpInfo}
            "description" = ${Description}
            "mark_connected" = ${MarkConnected}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableCircuitTerminationRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableCircuitTerminationRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableCircuitTerminationRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableCircuitTerminationRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableCircuitTerminationRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableCircuitTerminationRequest
        $AllProperties = ("circuit", "term_side", "site", "provider_network", "port_speed", "upstream_speed", "xconnect_id", "pp_info", "description", "mark_connected", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "circuit"))) { #optional property not found
            $Circuit = $null
        } else {
            $Circuit = $JsonParameters.PSobject.Properties["circuit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "term_side"))) { #optional property not found
            $TermSide = $null
        } else {
            $TermSide = $JsonParameters.PSobject.Properties["term_side"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site"))) { #optional property not found
            $Site = $null
        } else {
            $Site = $JsonParameters.PSobject.Properties["site"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provider_network"))) { #optional property not found
            $ProviderNetwork = $null
        } else {
            $ProviderNetwork = $JsonParameters.PSobject.Properties["provider_network"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port_speed"))) { #optional property not found
            $PortSpeed = $null
        } else {
            $PortSpeed = $JsonParameters.PSobject.Properties["port_speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "upstream_speed"))) { #optional property not found
            $UpstreamSpeed = $null
        } else {
            $UpstreamSpeed = $JsonParameters.PSobject.Properties["upstream_speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "xconnect_id"))) { #optional property not found
            $XconnectId = $null
        } else {
            $XconnectId = $JsonParameters.PSobject.Properties["xconnect_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pp_info"))) { #optional property not found
            $PpInfo = $null
        } else {
            $PpInfo = $JsonParameters.PSobject.Properties["pp_info"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mark_connected"))) { #optional property not found
            $MarkConnected = $null
        } else {
            $MarkConnected = $JsonParameters.PSobject.Properties["mark_connected"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "circuit" = ${Circuit}
            "term_side" = ${TermSide}
            "site" = ${Site}
            "provider_network" = ${ProviderNetwork}
            "port_speed" = ${PortSpeed}
            "upstream_speed" = ${UpstreamSpeed}
            "xconnect_id" = ${XconnectId}
            "pp_info" = ${PpInfo}
            "description" = ${Description}
            "mark_connected" = ${MarkConnected}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

