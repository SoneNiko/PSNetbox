#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Device
No description available.
.PARAMETER Vdcs
No description available.
.PARAMETER Module
No description available.
.PARAMETER Name
No description available.
.PARAMETER Label
Physical label
.PARAMETER Type
* `virtual` - Virtual * `bridge` - Bridge * `lag` - Link Aggregation Group (LAG) * `100base-fx` - 100BASE-FX (10/100ME FIBER) * `100base-lfx` - 100BASE-LFX (10/100ME FIBER) * `100base-tx` - 100BASE-TX (10/100ME) * `100base-t1` - 100BASE-T1 (10/100ME Single Pair) * `1000base-t` - 1000BASE-T (1GE) * `2.5gbase-t` - 2.5GBASE-T (2.5GE) * `5gbase-t` - 5GBASE-T (5GE) * `10gbase-t` - 10GBASE-T (10GE) * `10gbase-cx4` - 10GBASE-CX4 (10GE) * `1000base-x-gbic` - GBIC (1GE) * `1000base-x-sfp` - SFP (1GE) * `10gbase-x-sfpp` - SFP+ (10GE) * `10gbase-x-xfp` - XFP (10GE) * `10gbase-x-xenpak` - XENPAK (10GE) * `10gbase-x-x2` - X2 (10GE) * `25gbase-x-sfp28` - SFP28 (25GE) * `50gbase-x-sfp56` - SFP56 (50GE) * `40gbase-x-qsfpp` - QSFP+ (40GE) * `50gbase-x-sfp28` - QSFP28 (50GE) * `100gbase-x-cfp` - CFP (100GE) * `100gbase-x-cfp2` - CFP2 (100GE) * `200gbase-x-cfp2` - CFP2 (200GE) * `400gbase-x-cfp2` - CFP2 (400GE) * `100gbase-x-cfp4` - CFP4 (100GE) * `100gbase-x-cxp` - CXP (100GE) * `100gbase-x-cpak` - Cisco CPAK (100GE) * `100gbase-x-dsfp` - DSFP (100GE) * `100gbase-x-sfpdd` - SFP-DD (100GE) * `100gbase-x-qsfp28` - QSFP28 (100GE) * `100gbase-x-qsfpdd` - QSFP-DD (100GE) * `200gbase-x-qsfp56` - QSFP56 (200GE) * `200gbase-x-qsfpdd` - QSFP-DD (200GE) * `400gbase-x-qsfp112` - QSFP112 (400GE) * `400gbase-x-qsfpdd` - QSFP-DD (400GE) * `400gbase-x-osfp` - OSFP (400GE) * `400gbase-x-osfp-rhs` - OSFP-RHS (400GE) * `400gbase-x-cdfp` - CDFP (400GE) * `400gbase-x-cfp8` - CPF8 (400GE) * `800gbase-x-qsfpdd` - QSFP-DD (800GE) * `800gbase-x-osfp` - OSFP (800GE) * `1000base-kx` - 1000BASE-KX (1GE) * `10gbase-kr` - 10GBASE-KR (10GE) * `10gbase-kx4` - 10GBASE-KX4 (10GE) * `25gbase-kr` - 25GBASE-KR (25GE) * `40gbase-kr4` - 40GBASE-KR4 (40GE) * `50gbase-kr` - 50GBASE-KR (50GE) * `100gbase-kp4` - 100GBASE-KP4 (100GE) * `100gbase-kr2` - 100GBASE-KR2 (100GE) * `100gbase-kr4` - 100GBASE-KR4 (100GE) * `ieee802.11a` - IEEE 802.11a * `ieee802.11g` - IEEE 802.11b/g * `ieee802.11n` - IEEE 802.11n * `ieee802.11ac` - IEEE 802.11ac * `ieee802.11ad` - IEEE 802.11ad * `ieee802.11ax` - IEEE 802.11ax * `ieee802.11ay` - IEEE 802.11ay * `ieee802.15.1` - IEEE 802.15.1 (Bluetooth) * `other-wireless` - Other (Wireless) * `gsm` - GSM * `cdma` - CDMA * `lte` - LTE * `sonet-oc3` - OC-3/STM-1 * `sonet-oc12` - OC-12/STM-4 * `sonet-oc48` - OC-48/STM-16 * `sonet-oc192` - OC-192/STM-64 * `sonet-oc768` - OC-768/STM-256 * `sonet-oc1920` - OC-1920/STM-640 * `sonet-oc3840` - OC-3840/STM-1234 * `1gfc-sfp` - SFP (1GFC) * `2gfc-sfp` - SFP (2GFC) * `4gfc-sfp` - SFP (4GFC) * `8gfc-sfpp` - SFP+ (8GFC) * `16gfc-sfpp` - SFP+ (16GFC) * `32gfc-sfp28` - SFP28 (32GFC) * `32gfc-sfpp` - SFP+ (32GFC) * `64gfc-qsfpp` - QSFP+ (64GFC) * `64gfc-sfpdd` - SFP-DD (64GFC) * `64gfc-sfpp` - SFP+ (64GFC) * `128gfc-qsfp28` - QSFP28 (128GFC) * `infiniband-sdr` - SDR (2 Gbps) * `infiniband-ddr` - DDR (4 Gbps) * `infiniband-qdr` - QDR (8 Gbps) * `infiniband-fdr10` - FDR10 (10 Gbps) * `infiniband-fdr` - FDR (13.5 Gbps) * `infiniband-edr` - EDR (25 Gbps) * `infiniband-hdr` - HDR (50 Gbps) * `infiniband-ndr` - NDR (100 Gbps) * `infiniband-xdr` - XDR (250 Gbps) * `t1` - T1 (1.544 Mbps) * `e1` - E1 (2.048 Mbps) * `t3` - T3 (45 Mbps) * `e3` - E3 (34 Mbps) * `xdsl` - xDSL * `docsis` - DOCSIS * `gpon` - GPON (2.5 Gbps / 1.25 Gps) * `xg-pon` - XG-PON (10 Gbps / 2.5 Gbps) * `xgs-pon` - XGS-PON (10 Gbps) * `ng-pon2` - NG-PON2 (TWDM-PON) (4x10 Gbps) * `epon` - EPON (1 Gbps) * `10g-epon` - 10G-EPON (10 Gbps) * `cisco-stackwise` - Cisco StackWise * `cisco-stackwise-plus` - Cisco StackWise Plus * `cisco-flexstack` - Cisco FlexStack * `cisco-flexstack-plus` - Cisco FlexStack Plus * `cisco-stackwise-80` - Cisco StackWise-80 * `cisco-stackwise-160` - Cisco StackWise-160 * `cisco-stackwise-320` - Cisco StackWise-320 * `cisco-stackwise-480` - Cisco StackWise-480 * `cisco-stackwise-1t` - Cisco StackWise-1T * `juniper-vcp` - Juniper VCP * `extreme-summitstack` - Extreme SummitStack * `extreme-summitstack-128` - Extreme SummitStack-128 * `extreme-summitstack-256` - Extreme SummitStack-256 * `extreme-summitstack-512` - Extreme SummitStack-512 * `other` - Other
.PARAMETER Enabled
No description available.
.PARAMETER Parent
No description available.
.PARAMETER Bridge
No description available.
.PARAMETER Lag
No description available.
.PARAMETER Mtu
No description available.
.PARAMETER MacAddress
No description available.
.PARAMETER Speed
No description available.
.PARAMETER Duplex
* `half` - Half * `full` - Full * `auto` - Auto
.PARAMETER Wwn
No description available.
.PARAMETER MgmtOnly
This interface is used only for out-of-band management
.PARAMETER Description
No description available.
.PARAMETER Mode
IEEE 802.1Q tagging strategy  * `access` - Access * `tagged` - Tagged * `tagged-all` - Tagged (All)
.PARAMETER RfRole
* `ap` - Access point * `station` - Station
.PARAMETER RfChannel
* `2.4g-1-2412-22` - 1 (2412 MHz) * `2.4g-2-2417-22` - 2 (2417 MHz) * `2.4g-3-2422-22` - 3 (2422 MHz) * `2.4g-4-2427-22` - 4 (2427 MHz) * `2.4g-5-2432-22` - 5 (2432 MHz) * `2.4g-6-2437-22` - 6 (2437 MHz) * `2.4g-7-2442-22` - 7 (2442 MHz) * `2.4g-8-2447-22` - 8 (2447 MHz) * `2.4g-9-2452-22` - 9 (2452 MHz) * `2.4g-10-2457-22` - 10 (2457 MHz) * `2.4g-11-2462-22` - 11 (2462 MHz) * `2.4g-12-2467-22` - 12 (2467 MHz) * `2.4g-13-2472-22` - 13 (2472 MHz) * `5g-32-5160-20` - 32 (5160/20 MHz) * `5g-34-5170-40` - 34 (5170/40 MHz) * `5g-36-5180-20` - 36 (5180/20 MHz) * `5g-38-5190-40` - 38 (5190/40 MHz) * `5g-40-5200-20` - 40 (5200/20 MHz) * `5g-42-5210-80` - 42 (5210/80 MHz) * `5g-44-5220-20` - 44 (5220/20 MHz) * `5g-46-5230-40` - 46 (5230/40 MHz) * `5g-48-5240-20` - 48 (5240/20 MHz) * `5g-50-5250-160` - 50 (5250/160 MHz) * `5g-52-5260-20` - 52 (5260/20 MHz) * `5g-54-5270-40` - 54 (5270/40 MHz) * `5g-56-5280-20` - 56 (5280/20 MHz) * `5g-58-5290-80` - 58 (5290/80 MHz) * `5g-60-5300-20` - 60 (5300/20 MHz) * `5g-62-5310-40` - 62 (5310/40 MHz) * `5g-64-5320-20` - 64 (5320/20 MHz) * `5g-100-5500-20` - 100 (5500/20 MHz) * `5g-102-5510-40` - 102 (5510/40 MHz) * `5g-104-5520-20` - 104 (5520/20 MHz) * `5g-106-5530-80` - 106 (5530/80 MHz) * `5g-108-5540-20` - 108 (5540/20 MHz) * `5g-110-5550-40` - 110 (5550/40 MHz) * `5g-112-5560-20` - 112 (5560/20 MHz) * `5g-114-5570-160` - 114 (5570/160 MHz) * `5g-116-5580-20` - 116 (5580/20 MHz) * `5g-118-5590-40` - 118 (5590/40 MHz) * `5g-120-5600-20` - 120 (5600/20 MHz) * `5g-122-5610-80` - 122 (5610/80 MHz) * `5g-124-5620-20` - 124 (5620/20 MHz) * `5g-126-5630-40` - 126 (5630/40 MHz) * `5g-128-5640-20` - 128 (5640/20 MHz) * `5g-132-5660-20` - 132 (5660/20 MHz) * `5g-134-5670-40` - 134 (5670/40 MHz) * `5g-136-5680-20` - 136 (5680/20 MHz) * `5g-138-5690-80` - 138 (5690/80 MHz) * `5g-140-5700-20` - 140 (5700/20 MHz) * `5g-142-5710-40` - 142 (5710/40 MHz) * `5g-144-5720-20` - 144 (5720/20 MHz) * `5g-149-5745-20` - 149 (5745/20 MHz) * `5g-151-5755-40` - 151 (5755/40 MHz) * `5g-153-5765-20` - 153 (5765/20 MHz) * `5g-155-5775-80` - 155 (5775/80 MHz) * `5g-157-5785-20` - 157 (5785/20 MHz) * `5g-159-5795-40` - 159 (5795/40 MHz) * `5g-161-5805-20` - 161 (5805/20 MHz) * `5g-163-5815-160` - 163 (5815/160 MHz) * `5g-165-5825-20` - 165 (5825/20 MHz) * `5g-167-5835-40` - 167 (5835/40 MHz) * `5g-169-5845-20` - 169 (5845/20 MHz) * `5g-171-5855-80` - 171 (5855/80 MHz) * `5g-173-5865-20` - 173 (5865/20 MHz) * `5g-175-5875-40` - 175 (5875/40 MHz) * `5g-177-5885-20` - 177 (5885/20 MHz) * `6g-1-5955-20` - 1 (5955/20 MHz) * `6g-3-5965-40` - 3 (5965/40 MHz) * `6g-5-5975-20` - 5 (5975/20 MHz) * `6g-7-5985-80` - 7 (5985/80 MHz) * `6g-9-5995-20` - 9 (5995/20 MHz) * `6g-11-6005-40` - 11 (6005/40 MHz) * `6g-13-6015-20` - 13 (6015/20 MHz) * `6g-15-6025-160` - 15 (6025/160 MHz) * `6g-17-6035-20` - 17 (6035/20 MHz) * `6g-19-6045-40` - 19 (6045/40 MHz) * `6g-21-6055-20` - 21 (6055/20 MHz) * `6g-23-6065-80` - 23 (6065/80 MHz) * `6g-25-6075-20` - 25 (6075/20 MHz) * `6g-27-6085-40` - 27 (6085/40 MHz) * `6g-29-6095-20` - 29 (6095/20 MHz) * `6g-31-6105-320` - 31 (6105/320 MHz) * `6g-33-6115-20` - 33 (6115/20 MHz) * `6g-35-6125-40` - 35 (6125/40 MHz) * `6g-37-6135-20` - 37 (6135/20 MHz) * `6g-39-6145-80` - 39 (6145/80 MHz) * `6g-41-6155-20` - 41 (6155/20 MHz) * `6g-43-6165-40` - 43 (6165/40 MHz) * `6g-45-6175-20` - 45 (6175/20 MHz) * `6g-47-6185-160` - 47 (6185/160 MHz) * `6g-49-6195-20` - 49 (6195/20 MHz) * `6g-51-6205-40` - 51 (6205/40 MHz) * `6g-53-6215-20` - 53 (6215/20 MHz) * `6g-55-6225-80` - 55 (6225/80 MHz) * `6g-57-6235-20` - 57 (6235/20 MHz) * `6g-59-6245-40` - 59 (6245/40 MHz) * `6g-61-6255-20` - 61 (6255/20 MHz) * `6g-65-6275-20` - 65 (6275/20 MHz) * `6g-67-6285-40` - 67 (6285/40 MHz) * `6g-69-6295-20` - 69 (6295/20 MHz) * `6g-71-6305-80` - 71 (6305/80 MHz) * `6g-73-6315-20` - 73 (6315/20 MHz) * `6g-75-6325-40` - 75 (6325/40 MHz) * `6g-77-6335-20` - 77 (6335/20 MHz) * `6g-79-6345-160` - 79 (6345/160 MHz) * `6g-81-6355-20` - 81 (6355/20 MHz) * `6g-83-6365-40` - 83 (6365/40 MHz) * `6g-85-6375-20` - 85 (6375/20 MHz) * `6g-87-6385-80` - 87 (6385/80 MHz) * `6g-89-6395-20` - 89 (6395/20 MHz) * `6g-91-6405-40` - 91 (6405/40 MHz) * `6g-93-6415-20` - 93 (6415/20 MHz) * `6g-95-6425-320` - 95 (6425/320 MHz) * `6g-97-6435-20` - 97 (6435/20 MHz) * `6g-99-6445-40` - 99 (6445/40 MHz) * `6g-101-6455-20` - 101 (6455/20 MHz) * `6g-103-6465-80` - 103 (6465/80 MHz) * `6g-105-6475-20` - 105 (6475/20 MHz) * `6g-107-6485-40` - 107 (6485/40 MHz) * `6g-109-6495-20` - 109 (6495/20 MHz) * `6g-111-6505-160` - 111 (6505/160 MHz) * `6g-113-6515-20` - 113 (6515/20 MHz) * `6g-115-6525-40` - 115 (6525/40 MHz) * `6g-117-6535-20` - 117 (6535/20 MHz) * `6g-119-6545-80` - 119 (6545/80 MHz) * `6g-121-6555-20` - 121 (6555/20 MHz) * `6g-123-6565-40` - 123 (6565/40 MHz) * `6g-125-6575-20` - 125 (6575/20 MHz) * `6g-129-6595-20` - 129 (6595/20 MHz) * `6g-131-6605-40` - 131 (6605/40 MHz) * `6g-133-6615-20` - 133 (6615/20 MHz) * `6g-135-6625-80` - 135 (6625/80 MHz) * `6g-137-6635-20` - 137 (6635/20 MHz) * `6g-139-6645-40` - 139 (6645/40 MHz) * `6g-141-6655-20` - 141 (6655/20 MHz) * `6g-143-6665-160` - 143 (6665/160 MHz) * `6g-145-6675-20` - 145 (6675/20 MHz) * `6g-147-6685-40` - 147 (6685/40 MHz) * `6g-149-6695-20` - 149 (6695/20 MHz) * `6g-151-6705-80` - 151 (6705/80 MHz) * `6g-153-6715-20` - 153 (6715/20 MHz) * `6g-155-6725-40` - 155 (6725/40 MHz) * `6g-157-6735-20` - 157 (6735/20 MHz) * `6g-159-6745-320` - 159 (6745/320 MHz) * `6g-161-6755-20` - 161 (6755/20 MHz) * `6g-163-6765-40` - 163 (6765/40 MHz) * `6g-165-6775-20` - 165 (6775/20 MHz) * `6g-167-6785-80` - 167 (6785/80 MHz) * `6g-169-6795-20` - 169 (6795/20 MHz) * `6g-171-6805-40` - 171 (6805/40 MHz) * `6g-173-6815-20` - 173 (6815/20 MHz) * `6g-175-6825-160` - 175 (6825/160 MHz) * `6g-177-6835-20` - 177 (6835/20 MHz) * `6g-179-6845-40` - 179 (6845/40 MHz) * `6g-181-6855-20` - 181 (6855/20 MHz) * `6g-183-6865-80` - 183 (6865/80 MHz) * `6g-185-6875-20` - 185 (6875/20 MHz) * `6g-187-6885-40` - 187 (6885/40 MHz) * `6g-189-6895-20` - 189 (6895/20 MHz) * `6g-193-6915-20` - 193 (6915/20 MHz) * `6g-195-6925-40` - 195 (6925/40 MHz) * `6g-197-6935-20` - 197 (6935/20 MHz) * `6g-199-6945-80` - 199 (6945/80 MHz) * `6g-201-6955-20` - 201 (6955/20 MHz) * `6g-203-6965-40` - 203 (6965/40 MHz) * `6g-205-6975-20` - 205 (6975/20 MHz) * `6g-207-6985-160` - 207 (6985/160 MHz) * `6g-209-6995-20` - 209 (6995/20 MHz) * `6g-211-7005-40` - 211 (7005/40 MHz) * `6g-213-7015-20` - 213 (7015/20 MHz) * `6g-215-7025-80` - 215 (7025/80 MHz) * `6g-217-7035-20` - 217 (7035/20 MHz) * `6g-219-7045-40` - 219 (7045/40 MHz) * `6g-221-7055-20` - 221 (7055/20 MHz) * `6g-225-7075-20` - 225 (7075/20 MHz) * `6g-227-7085-40` - 227 (7085/40 MHz) * `6g-229-7095-20` - 229 (7095/20 MHz) * `6g-233-7115-20` - 233 (7115/20 MHz) * `60g-1-58320-2160` - 1 (58.32/2.16 GHz) * `60g-2-60480-2160` - 2 (60.48/2.16 GHz) * `60g-3-62640-2160` - 3 (62.64/2.16 GHz) * `60g-4-64800-2160` - 4 (64.80/2.16 GHz) * `60g-5-66960-2160` - 5 (66.96/2.16 GHz) * `60g-6-69120-2160` - 6 (69.12/2.16 GHz) * `60g-9-59400-4320` - 9 (59.40/4.32 GHz) * `60g-10-61560-4320` - 10 (61.56/4.32 GHz) * `60g-11-63720-4320` - 11 (63.72/4.32 GHz) * `60g-12-65880-4320` - 12 (65.88/4.32 GHz) * `60g-13-68040-4320` - 13 (68.04/4.32 GHz) * `60g-17-60480-6480` - 17 (60.48/6.48 GHz) * `60g-18-62640-6480` - 18 (62.64/6.48 GHz) * `60g-19-64800-6480` - 19 (64.80/6.48 GHz) * `60g-20-66960-6480` - 20 (66.96/6.48 GHz) * `60g-25-61560-6480` - 25 (61.56/8.64 GHz) * `60g-26-63720-6480` - 26 (63.72/8.64 GHz) * `60g-27-65880-6480` - 27 (65.88/8.64 GHz)
.PARAMETER PoeMode
* `pd` - PD * `pse` - PSE
.PARAMETER PoeType
* `type1-ieee802.3af` - 802.3af (Type 1) * `type2-ieee802.3at` - 802.3at (Type 2) * `type3-ieee802.3bt` - 802.3bt (Type 3) * `type4-ieee802.3bt` - 802.3bt (Type 4) * `passive-24v-2pair` - Passive 24V (2-pair) * `passive-24v-4pair` - Passive 24V (4-pair) * `passive-48v-2pair` - Passive 48V (2-pair) * `passive-48v-4pair` - Passive 48V (4-pair)
.PARAMETER RfChannelFrequency
Populated by selected channel (if set)
.PARAMETER RfChannelWidth
Populated by selected channel (if set)
.PARAMETER TxPower
No description available.
.PARAMETER UntaggedVlan
No description available.
.PARAMETER TaggedVlans
No description available.
.PARAMETER MarkConnected
Treat as if a cable is connected
.PARAMETER WirelessLans
No description available.
.PARAMETER Vrf
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

PatchedWritableInterfaceRequest<PSCustomObject>
#>

function Initialize-PatchedWritableInterfaceRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Device},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Vdcs},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Module},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("virtual", "bridge", "lag", "100base-fx", "100base-lfx", "100base-tx", "100base-t1", "1000base-t", "2.5gbase-t", "5gbase-t", "10gbase-t", "10gbase-cx4", "1000base-x-gbic", "1000base-x-sfp", "10gbase-x-sfpp", "10gbase-x-xfp", "10gbase-x-xenpak", "10gbase-x-x2", "25gbase-x-sfp28", "50gbase-x-sfp56", "40gbase-x-qsfpp", "50gbase-x-sfp28", "100gbase-x-cfp", "100gbase-x-cfp2", "200gbase-x-cfp2", "400gbase-x-cfp2", "100gbase-x-cfp4", "100gbase-x-cxp", "100gbase-x-cpak", "100gbase-x-dsfp", "100gbase-x-sfpdd", "100gbase-x-qsfp28", "100gbase-x-qsfpdd", "200gbase-x-qsfp56", "200gbase-x-qsfpdd", "400gbase-x-qsfp112", "400gbase-x-qsfpdd", "400gbase-x-osfp", "400gbase-x-osfp-rhs", "400gbase-x-cdfp", "400gbase-x-cfp8", "800gbase-x-qsfpdd", "800gbase-x-osfp", "1000base-kx", "10gbase-kr", "10gbase-kx4", "25gbase-kr", "40gbase-kr4", "50gbase-kr", "100gbase-kp4", "100gbase-kr2", "100gbase-kr4", "ieee802.11a", "ieee802.11g", "ieee802.11n", "ieee802.11ac", "ieee802.11ad", "ieee802.11ax", "ieee802.11ay", "ieee802.15.1", "other-wireless", "gsm", "cdma", "lte", "sonet-oc3", "sonet-oc12", "sonet-oc48", "sonet-oc192", "sonet-oc768", "sonet-oc1920", "sonet-oc3840", "1gfc-sfp", "2gfc-sfp", "4gfc-sfp", "8gfc-sfpp", "16gfc-sfpp", "32gfc-sfp28", "32gfc-sfpp", "64gfc-qsfpp", "64gfc-sfpdd", "64gfc-sfpp", "128gfc-qsfp28", "infiniband-sdr", "infiniband-ddr", "infiniband-qdr", "infiniband-fdr10", "infiniband-fdr", "infiniband-edr", "infiniband-hdr", "infiniband-ndr", "infiniband-xdr", "t1", "e1", "t3", "e3", "xdsl", "docsis", "gpon", "xg-pon", "xgs-pon", "ng-pon2", "epon", "10g-epon", "cisco-stackwise", "cisco-stackwise-plus", "cisco-flexstack", "cisco-flexstack-plus", "cisco-stackwise-80", "cisco-stackwise-160", "cisco-stackwise-320", "cisco-stackwise-480", "cisco-stackwise-1t", "juniper-vcp", "extreme-summitstack", "extreme-summitstack-128", "extreme-summitstack-256", "extreme-summitstack-512", "other")]
        [String]
        ${Type},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Parent},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Bridge},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Lag},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Mtu},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MacAddress},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Speed},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("half", "full", "auto", "", "")]
        [String]
        ${Duplex},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Wwn},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MgmtOnly},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("access", "tagged", "tagged-all", "")]
        [String]
        ${Mode},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ap", "station", "")]
        [String]
        ${RfRole},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("2.4g-1-2412-22", "2.4g-2-2417-22", "2.4g-3-2422-22", "2.4g-4-2427-22", "2.4g-5-2432-22", "2.4g-6-2437-22", "2.4g-7-2442-22", "2.4g-8-2447-22", "2.4g-9-2452-22", "2.4g-10-2457-22", "2.4g-11-2462-22", "2.4g-12-2467-22", "2.4g-13-2472-22", "5g-32-5160-20", "5g-34-5170-40", "5g-36-5180-20", "5g-38-5190-40", "5g-40-5200-20", "5g-42-5210-80", "5g-44-5220-20", "5g-46-5230-40", "5g-48-5240-20", "5g-50-5250-160", "5g-52-5260-20", "5g-54-5270-40", "5g-56-5280-20", "5g-58-5290-80", "5g-60-5300-20", "5g-62-5310-40", "5g-64-5320-20", "5g-100-5500-20", "5g-102-5510-40", "5g-104-5520-20", "5g-106-5530-80", "5g-108-5540-20", "5g-110-5550-40", "5g-112-5560-20", "5g-114-5570-160", "5g-116-5580-20", "5g-118-5590-40", "5g-120-5600-20", "5g-122-5610-80", "5g-124-5620-20", "5g-126-5630-40", "5g-128-5640-20", "5g-132-5660-20", "5g-134-5670-40", "5g-136-5680-20", "5g-138-5690-80", "5g-140-5700-20", "5g-142-5710-40", "5g-144-5720-20", "5g-149-5745-20", "5g-151-5755-40", "5g-153-5765-20", "5g-155-5775-80", "5g-157-5785-20", "5g-159-5795-40", "5g-161-5805-20", "5g-163-5815-160", "5g-165-5825-20", "5g-167-5835-40", "5g-169-5845-20", "5g-171-5855-80", "5g-173-5865-20", "5g-175-5875-40", "5g-177-5885-20", "6g-1-5955-20", "6g-3-5965-40", "6g-5-5975-20", "6g-7-5985-80", "6g-9-5995-20", "6g-11-6005-40", "6g-13-6015-20", "6g-15-6025-160", "6g-17-6035-20", "6g-19-6045-40", "6g-21-6055-20", "6g-23-6065-80", "6g-25-6075-20", "6g-27-6085-40", "6g-29-6095-20", "6g-31-6105-320", "6g-33-6115-20", "6g-35-6125-40", "6g-37-6135-20", "6g-39-6145-80", "6g-41-6155-20", "6g-43-6165-40", "6g-45-6175-20", "6g-47-6185-160", "6g-49-6195-20", "6g-51-6205-40", "6g-53-6215-20", "6g-55-6225-80", "6g-57-6235-20", "6g-59-6245-40", "6g-61-6255-20", "6g-65-6275-20", "6g-67-6285-40", "6g-69-6295-20", "6g-71-6305-80", "6g-73-6315-20", "6g-75-6325-40", "6g-77-6335-20", "6g-79-6345-160", "6g-81-6355-20", "6g-83-6365-40", "6g-85-6375-20", "6g-87-6385-80", "6g-89-6395-20", "6g-91-6405-40", "6g-93-6415-20", "6g-95-6425-320", "6g-97-6435-20", "6g-99-6445-40", "6g-101-6455-20", "6g-103-6465-80", "6g-105-6475-20", "6g-107-6485-40", "6g-109-6495-20", "6g-111-6505-160", "6g-113-6515-20", "6g-115-6525-40", "6g-117-6535-20", "6g-119-6545-80", "6g-121-6555-20", "6g-123-6565-40", "6g-125-6575-20", "6g-129-6595-20", "6g-131-6605-40", "6g-133-6615-20", "6g-135-6625-80", "6g-137-6635-20", "6g-139-6645-40", "6g-141-6655-20", "6g-143-6665-160", "6g-145-6675-20", "6g-147-6685-40", "6g-149-6695-20", "6g-151-6705-80", "6g-153-6715-20", "6g-155-6725-40", "6g-157-6735-20", "6g-159-6745-320", "6g-161-6755-20", "6g-163-6765-40", "6g-165-6775-20", "6g-167-6785-80", "6g-169-6795-20", "6g-171-6805-40", "6g-173-6815-20", "6g-175-6825-160", "6g-177-6835-20", "6g-179-6845-40", "6g-181-6855-20", "6g-183-6865-80", "6g-185-6875-20", "6g-187-6885-40", "6g-189-6895-20", "6g-193-6915-20", "6g-195-6925-40", "6g-197-6935-20", "6g-199-6945-80", "6g-201-6955-20", "6g-203-6965-40", "6g-205-6975-20", "6g-207-6985-160", "6g-209-6995-20", "6g-211-7005-40", "6g-213-7015-20", "6g-215-7025-80", "6g-217-7035-20", "6g-219-7045-40", "6g-221-7055-20", "6g-225-7075-20", "6g-227-7085-40", "6g-229-7095-20", "6g-233-7115-20", "60g-1-58320-2160", "60g-2-60480-2160", "60g-3-62640-2160", "60g-4-64800-2160", "60g-5-66960-2160", "60g-6-69120-2160", "60g-9-59400-4320", "60g-10-61560-4320", "60g-11-63720-4320", "60g-12-65880-4320", "60g-13-68040-4320", "60g-17-60480-6480", "60g-18-62640-6480", "60g-19-64800-6480", "60g-20-66960-6480", "60g-25-61560-6480", "60g-26-63720-6480", "60g-27-65880-6480", "")]
        [String]
        ${RfChannel},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("pd", "pse", "")]
        [String]
        ${PoeMode},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("type1-ieee802.3af", "type2-ieee802.3at", "type3-ieee802.3bt", "type4-ieee802.3bt", "passive-24v-2pair", "passive-24v-4pair", "passive-48v-2pair", "passive-48v-4pair", "")]
        [String]
        ${PoeType},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${RfChannelFrequency},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${RfChannelWidth},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TxPower},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UntaggedVlan},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${TaggedVlans},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MarkConnected},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${WirelessLans},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vrf},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableInterfaceRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 64) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 64."
        }

        if (!$Name -and $Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Label -and $Label.length -gt 64) {
            throw "invalid value for 'Label', the character length must be smaller than or equal to 64."
        }

        if ($Mtu -and $Mtu -gt 65536) {
          throw "invalid value for 'Mtu', must be smaller than or equal to 65536."
        }

        if ($Mtu -and $Mtu -lt 1) {
          throw "invalid value for 'Mtu', must be greater than or equal to 1."
        }

        if ($Speed -and $Speed -gt 2147483647) {
          throw "invalid value for 'Speed', must be smaller than or equal to 2147483647."
        }

        if ($Speed -and $Speed -lt 0) {
          throw "invalid value for 'Speed', must be greater than or equal to 0."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($RfChannelFrequency -and $RfChannelFrequency -ge 100000) {
          throw "invalid value for 'RfChannelFrequency', must be smaller than 100000."
        }

        if ($RfChannelFrequency -and $RfChannelFrequency -le -100000) {
          throw "invalid value for 'RfChannelFrequency', must be greater than -100000."
        }

        if ($RfChannelWidth -and $RfChannelWidth -ge 10000) {
          throw "invalid value for 'RfChannelWidth', must be smaller than 10000."
        }

        if ($RfChannelWidth -and $RfChannelWidth -le -10000) {
          throw "invalid value for 'RfChannelWidth', must be greater than -10000."
        }

        if ($TxPower -and $TxPower -gt 127) {
          throw "invalid value for 'TxPower', must be smaller than or equal to 127."
        }

        if ($TxPower -and $TxPower -lt 0) {
          throw "invalid value for 'TxPower', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "device" = ${Device}
            "vdcs" = ${Vdcs}
            "module" = ${Module}
            "name" = ${Name}
            "label" = ${Label}
            "type" = ${Type}
            "enabled" = ${Enabled}
            "parent" = ${Parent}
            "bridge" = ${Bridge}
            "lag" = ${Lag}
            "mtu" = ${Mtu}
            "mac_address" = ${MacAddress}
            "speed" = ${Speed}
            "duplex" = ${Duplex}
            "wwn" = ${Wwn}
            "mgmt_only" = ${MgmtOnly}
            "description" = ${Description}
            "mode" = ${Mode}
            "rf_role" = ${RfRole}
            "rf_channel" = ${RfChannel}
            "poe_mode" = ${PoeMode}
            "poe_type" = ${PoeType}
            "rf_channel_frequency" = ${RfChannelFrequency}
            "rf_channel_width" = ${RfChannelWidth}
            "tx_power" = ${TxPower}
            "untagged_vlan" = ${UntaggedVlan}
            "tagged_vlans" = ${TaggedVlans}
            "mark_connected" = ${MarkConnected}
            "wireless_lans" = ${WirelessLans}
            "vrf" = ${Vrf}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableInterfaceRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableInterfaceRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableInterfaceRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableInterfaceRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableInterfaceRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableInterfaceRequest
        $AllProperties = ("device", "vdcs", "module", "name", "label", "type", "enabled", "parent", "bridge", "lag", "mtu", "mac_address", "speed", "duplex", "wwn", "mgmt_only", "description", "mode", "rf_role", "rf_channel", "poe_mode", "poe_type", "rf_channel_frequency", "rf_channel_width", "tx_power", "untagged_vlan", "tagged_vlans", "mark_connected", "wireless_lans", "vrf", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device"))) { #optional property not found
            $Device = $null
        } else {
            $Device = $JsonParameters.PSobject.Properties["device"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vdcs"))) { #optional property not found
            $Vdcs = $null
        } else {
            $Vdcs = $JsonParameters.PSobject.Properties["vdcs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "module"))) { #optional property not found
            $Module = $null
        } else {
            $Module = $JsonParameters.PSobject.Properties["module"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bridge"))) { #optional property not found
            $Bridge = $null
        } else {
            $Bridge = $JsonParameters.PSobject.Properties["bridge"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lag"))) { #optional property not found
            $Lag = $null
        } else {
            $Lag = $JsonParameters.PSobject.Properties["lag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mac_address"))) { #optional property not found
            $MacAddress = $null
        } else {
            $MacAddress = $JsonParameters.PSobject.Properties["mac_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "speed"))) { #optional property not found
            $Speed = $null
        } else {
            $Speed = $JsonParameters.PSobject.Properties["speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "duplex"))) { #optional property not found
            $Duplex = $null
        } else {
            $Duplex = $JsonParameters.PSobject.Properties["duplex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wwn"))) { #optional property not found
            $Wwn = $null
        } else {
            $Wwn = $JsonParameters.PSobject.Properties["wwn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mgmt_only"))) { #optional property not found
            $MgmtOnly = $null
        } else {
            $MgmtOnly = $JsonParameters.PSobject.Properties["mgmt_only"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rf_role"))) { #optional property not found
            $RfRole = $null
        } else {
            $RfRole = $JsonParameters.PSobject.Properties["rf_role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rf_channel"))) { #optional property not found
            $RfChannel = $null
        } else {
            $RfChannel = $JsonParameters.PSobject.Properties["rf_channel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "poe_mode"))) { #optional property not found
            $PoeMode = $null
        } else {
            $PoeMode = $JsonParameters.PSobject.Properties["poe_mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "poe_type"))) { #optional property not found
            $PoeType = $null
        } else {
            $PoeType = $JsonParameters.PSobject.Properties["poe_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rf_channel_frequency"))) { #optional property not found
            $RfChannelFrequency = $null
        } else {
            $RfChannelFrequency = $JsonParameters.PSobject.Properties["rf_channel_frequency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rf_channel_width"))) { #optional property not found
            $RfChannelWidth = $null
        } else {
            $RfChannelWidth = $JsonParameters.PSobject.Properties["rf_channel_width"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tx_power"))) { #optional property not found
            $TxPower = $null
        } else {
            $TxPower = $JsonParameters.PSobject.Properties["tx_power"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "untagged_vlan"))) { #optional property not found
            $UntaggedVlan = $null
        } else {
            $UntaggedVlan = $JsonParameters.PSobject.Properties["untagged_vlan"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tagged_vlans"))) { #optional property not found
            $TaggedVlans = $null
        } else {
            $TaggedVlans = $JsonParameters.PSobject.Properties["tagged_vlans"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mark_connected"))) { #optional property not found
            $MarkConnected = $null
        } else {
            $MarkConnected = $JsonParameters.PSobject.Properties["mark_connected"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wireless_lans"))) { #optional property not found
            $WirelessLans = $null
        } else {
            $WirelessLans = $JsonParameters.PSobject.Properties["wireless_lans"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vrf"))) { #optional property not found
            $Vrf = $null
        } else {
            $Vrf = $JsonParameters.PSobject.Properties["vrf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "device" = ${Device}
            "vdcs" = ${Vdcs}
            "module" = ${Module}
            "name" = ${Name}
            "label" = ${Label}
            "type" = ${Type}
            "enabled" = ${Enabled}
            "parent" = ${Parent}
            "bridge" = ${Bridge}
            "lag" = ${Lag}
            "mtu" = ${Mtu}
            "mac_address" = ${MacAddress}
            "speed" = ${Speed}
            "duplex" = ${Duplex}
            "wwn" = ${Wwn}
            "mgmt_only" = ${MgmtOnly}
            "description" = ${Description}
            "mode" = ${Mode}
            "rf_role" = ${RfRole}
            "rf_channel" = ${RfChannel}
            "poe_mode" = ${PoeMode}
            "poe_type" = ${PoeType}
            "rf_channel_frequency" = ${RfChannelFrequency}
            "rf_channel_width" = ${RfChannelWidth}
            "tx_power" = ${TxPower}
            "untagged_vlan" = ${UntaggedVlan}
            "tagged_vlans" = ${TaggedVlans}
            "mark_connected" = ${MarkConnected}
            "wireless_lans" = ${WirelessLans}
            "vrf" = ${Vrf}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

