#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER DeviceType
No description available.
.PARAMETER Name
{module} is accepted as a substitution for the module bay position when attached to a module type.
.PARAMETER Label
Physical label
.PARAMETER Position
Identifier to reference when renaming installed components
.PARAMETER Description
No description available.
.OUTPUTS

PatchedWritableModuleBayTemplateRequest<PSCustomObject>
#>

function Initialize-PatchedWritableModuleBayTemplateRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DeviceType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Position},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableModuleBayTemplateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 64) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 64."
        }

        if (!$Name -and $Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Label -and $Label.length -gt 64) {
            throw "invalid value for 'Label', the character length must be smaller than or equal to 64."
        }

        if (!$Position -and $Position.length -gt 30) {
            throw "invalid value for 'Position', the character length must be smaller than or equal to 30."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "device_type" = ${DeviceType}
            "name" = ${Name}
            "label" = ${Label}
            "position" = ${Position}
            "description" = ${Description}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableModuleBayTemplateRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableModuleBayTemplateRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableModuleBayTemplateRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableModuleBayTemplateRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableModuleBayTemplateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableModuleBayTemplateRequest
        $AllProperties = ("device_type", "name", "label", "position", "description")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_type"))) { #optional property not found
            $DeviceType = $null
        } else {
            $DeviceType = $JsonParameters.PSobject.Properties["device_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "device_type" = ${DeviceType}
            "name" = ${Name}
            "label" = ${Label}
            "position" = ${Position}
            "description" = ${Description}
        }

        return $PSO
    }

}

