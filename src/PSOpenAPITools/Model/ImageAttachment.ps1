#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER ContentType
No description available.
.PARAMETER ObjectId
No description available.
.PARAMETER Parent
No description available.
.PARAMETER Name
No description available.
.PARAMETER Image
No description available.
.PARAMETER ImageHeight
No description available.
.PARAMETER ImageWidth
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.OUTPUTS

ImageAttachment<PSCustomObject>
#>

function Initialize-ImageAttachment {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContentType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${ObjectId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parent},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Image},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ImageHeight},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ImageWidth},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ImageAttachment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $ContentType) {
            throw "invalid value for 'ContentType', 'ContentType' cannot be null."
        }

        if ($null -eq $ObjectId) {
            throw "invalid value for 'ObjectId', 'ObjectId' cannot be null."
        }

        if ($ObjectId -gt 9223372036854775807) {
          throw "invalid value for 'ObjectId', must be smaller than or equal to 9223372036854775807."
        }

        if ($ObjectId -lt 0) {
          throw "invalid value for 'ObjectId', must be greater than or equal to 0."
        }

        if (!$Name -and $Name.length -gt 50) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 50."
        }

        if ($null -eq $Image) {
            throw "invalid value for 'Image', 'Image' cannot be null."
        }

        if ($null -eq $ImageHeight) {
            throw "invalid value for 'ImageHeight', 'ImageHeight' cannot be null."
        }

        if ($ImageHeight -gt 32767) {
          throw "invalid value for 'ImageHeight', must be smaller than or equal to 32767."
        }

        if ($ImageHeight -lt 0) {
          throw "invalid value for 'ImageHeight', must be greater than or equal to 0."
        }

        if ($null -eq $ImageWidth) {
            throw "invalid value for 'ImageWidth', 'ImageWidth' cannot be null."
        }

        if ($ImageWidth -gt 32767) {
          throw "invalid value for 'ImageWidth', must be smaller than or equal to 32767."
        }

        if ($ImageWidth -lt 0) {
          throw "invalid value for 'ImageWidth', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "content_type" = ${ContentType}
            "object_id" = ${ObjectId}
            "parent" = ${Parent}
            "name" = ${Name}
            "image" = ${Image}
            "image_height" = ${ImageHeight}
            "image_width" = ${ImageWidth}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ImageAttachment<PSCustomObject>

.DESCRIPTION

Convert from JSON to ImageAttachment<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ImageAttachment<PSCustomObject>
#>
function ConvertFrom-JsonToImageAttachment {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ImageAttachment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ImageAttachment
        $AllProperties = ("id", "url", "display", "content_type", "object_id", "parent", "name", "image", "image_height", "image_width", "created", "last_updated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'content_type' missing."
        } else {
            $ContentType = $JsonParameters.PSobject.Properties["content_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object_id' missing."
        } else {
            $ObjectId = $JsonParameters.PSobject.Properties["object_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent"))) {
            throw "Error! JSON cannot be serialized due to the required property 'parent' missing."
        } else {
            $Parent = $JsonParameters.PSobject.Properties["parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "image"))) {
            throw "Error! JSON cannot be serialized due to the required property 'image' missing."
        } else {
            $Image = $JsonParameters.PSobject.Properties["image"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "image_height"))) {
            throw "Error! JSON cannot be serialized due to the required property 'image_height' missing."
        } else {
            $ImageHeight = $JsonParameters.PSobject.Properties["image_height"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "image_width"))) {
            throw "Error! JSON cannot be serialized due to the required property 'image_width' missing."
        } else {
            $ImageWidth = $JsonParameters.PSobject.Properties["image_width"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "content_type" = ${ContentType}
            "object_id" = ${ObjectId}
            "parent" = ${Parent}
            "name" = ${Name}
            "image" = ${Image}
            "image_height" = ${ImageHeight}
            "image_width" = ${ImageWidth}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
        }

        return $PSO
    }

}

