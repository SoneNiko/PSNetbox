#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Manufacturer
No description available.
.PARAMETER Model
No description available.
.PARAMETER PartNumber
Discrete part number (optional)
.PARAMETER Weight
No description available.
.PARAMETER WeightUnit
* `kg` - Kilograms * `g` - Grams * `lb` - Pounds * `oz` - Ounces
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

ModuleTypeRequest<PSCustomObject>
#>

function Initialize-ModuleTypeRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Manufacturer},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartNumber},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Weight},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("kg", "g", "lb", "oz", "", "")]
        [String]
        ${WeightUnit},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ModuleTypeRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Manufacturer) {
            throw "invalid value for 'Manufacturer', 'Manufacturer' cannot be null."
        }

        if ($null -eq $Model) {
            throw "invalid value for 'Model', 'Model' cannot be null."
        }

        if ($Model.length -gt 100) {
            throw "invalid value for 'Model', the character length must be smaller than or equal to 100."
        }

        if ($Model.length -lt 1) {
            throw "invalid value for 'Model', the character length must be great than or equal to 1."
        }

        if (!$PartNumber -and $PartNumber.length -gt 50) {
            throw "invalid value for 'PartNumber', the character length must be smaller than or equal to 50."
        }

        if ($Weight -and $Weight -ge 1000000) {
          throw "invalid value for 'Weight', must be smaller than 1000000."
        }

        if ($Weight -and $Weight -le -1000000) {
          throw "invalid value for 'Weight', must be greater than -1000000."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "manufacturer" = ${Manufacturer}
            "model" = ${Model}
            "part_number" = ${PartNumber}
            "weight" = ${Weight}
            "weight_unit" = ${WeightUnit}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ModuleTypeRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to ModuleTypeRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ModuleTypeRequest<PSCustomObject>
#>
function ConvertFrom-JsonToModuleTypeRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ModuleTypeRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ModuleTypeRequest
        $AllProperties = ("manufacturer", "model", "part_number", "weight", "weight_unit", "description", "comments", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'manufacturer' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manufacturer"))) {
            throw "Error! JSON cannot be serialized due to the required property 'manufacturer' missing."
        } else {
            $Manufacturer = $JsonParameters.PSobject.Properties["manufacturer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'model' missing."
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "part_number"))) { #optional property not found
            $PartNumber = $null
        } else {
            $PartNumber = $JsonParameters.PSobject.Properties["part_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight_unit"))) { #optional property not found
            $WeightUnit = $null
        } else {
            $WeightUnit = $JsonParameters.PSobject.Properties["weight_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "manufacturer" = ${Manufacturer}
            "model" = ${Model}
            "part_number" = ${PartNumber}
            "weight" = ${Weight}
            "weight_unit" = ${WeightUnit}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

