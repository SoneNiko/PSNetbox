#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER PowerPanel
No description available.
.PARAMETER Rack
No description available.
.PARAMETER Name
No description available.
.PARAMETER Status
* `offline` - Offline * `active` - Active * `planned` - Planned * `failed` - Failed
.PARAMETER Type
* `primary` - Primary * `redundant` - Redundant
.PARAMETER Supply
* `ac` - AC * `dc` - DC
.PARAMETER Phase
* `single-phase` - Single phase * `three-phase` - Three-phase
.PARAMETER Voltage
No description available.
.PARAMETER Amperage
No description available.
.PARAMETER MaxUtilization
Maximum permissible draw (percentage)
.PARAMETER MarkConnected
Treat as if a cable is connected
.PARAMETER Description
No description available.
.PARAMETER Tenant
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

WritablePowerFeedRequest<PSCustomObject>
#>

function Initialize-WritablePowerFeedRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PowerPanel},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Rack},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("offline", "active", "planned", "failed")]
        [String]
        ${Status},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("primary", "redundant")]
        [String]
        ${Type},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("ac", "dc")]
        [String]
        ${Supply},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("single-phase", "three-phase")]
        [String]
        ${Phase},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Voltage},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Amperage},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${MaxUtilization},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MarkConnected},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Tenant},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WritablePowerFeedRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $PowerPanel) {
            throw "invalid value for 'PowerPanel', 'PowerPanel' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if ($Voltage -and $Voltage -gt 32767) {
          throw "invalid value for 'Voltage', must be smaller than or equal to 32767."
        }

        if ($Voltage -and $Voltage -lt -32768) {
          throw "invalid value for 'Voltage', must be greater than or equal to -32768."
        }

        if ($Amperage -and $Amperage -gt 32767) {
          throw "invalid value for 'Amperage', must be smaller than or equal to 32767."
        }

        if ($Amperage -and $Amperage -lt 1) {
          throw "invalid value for 'Amperage', must be greater than or equal to 1."
        }

        if ($MaxUtilization -and $MaxUtilization -gt 100) {
          throw "invalid value for 'MaxUtilization', must be smaller than or equal to 100."
        }

        if ($MaxUtilization -and $MaxUtilization -lt 1) {
          throw "invalid value for 'MaxUtilization', must be greater than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "power_panel" = ${PowerPanel}
            "rack" = ${Rack}
            "name" = ${Name}
            "status" = ${Status}
            "type" = ${Type}
            "supply" = ${Supply}
            "phase" = ${Phase}
            "voltage" = ${Voltage}
            "amperage" = ${Amperage}
            "max_utilization" = ${MaxUtilization}
            "mark_connected" = ${MarkConnected}
            "description" = ${Description}
            "tenant" = ${Tenant}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WritablePowerFeedRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to WritablePowerFeedRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WritablePowerFeedRequest<PSCustomObject>
#>
function ConvertFrom-JsonToWritablePowerFeedRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WritablePowerFeedRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WritablePowerFeedRequest
        $AllProperties = ("power_panel", "rack", "name", "status", "type", "supply", "phase", "voltage", "amperage", "max_utilization", "mark_connected", "description", "tenant", "comments", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'power_panel' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "power_panel"))) {
            throw "Error! JSON cannot be serialized due to the required property 'power_panel' missing."
        } else {
            $PowerPanel = $JsonParameters.PSobject.Properties["power_panel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rack"))) { #optional property not found
            $Rack = $null
        } else {
            $Rack = $JsonParameters.PSobject.Properties["rack"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "supply"))) { #optional property not found
            $Supply = $null
        } else {
            $Supply = $JsonParameters.PSobject.Properties["supply"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "phase"))) { #optional property not found
            $Phase = $null
        } else {
            $Phase = $JsonParameters.PSobject.Properties["phase"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "voltage"))) { #optional property not found
            $Voltage = $null
        } else {
            $Voltage = $JsonParameters.PSobject.Properties["voltage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "amperage"))) { #optional property not found
            $Amperage = $null
        } else {
            $Amperage = $JsonParameters.PSobject.Properties["amperage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "max_utilization"))) { #optional property not found
            $MaxUtilization = $null
        } else {
            $MaxUtilization = $JsonParameters.PSobject.Properties["max_utilization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mark_connected"))) { #optional property not found
            $MarkConnected = $null
        } else {
            $MarkConnected = $JsonParameters.PSobject.Properties["mark_connected"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "power_panel" = ${PowerPanel}
            "rack" = ${Rack}
            "name" = ${Name}
            "status" = ${Status}
            "type" = ${Type}
            "supply" = ${Supply}
            "phase" = ${Phase}
            "voltage" = ${Voltage}
            "amperage" = ${Amperage}
            "max_utilization" = ${MaxUtilization}
            "mark_connected" = ${MarkConnected}
            "description" = ${Description}
            "tenant" = ${Tenant}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

