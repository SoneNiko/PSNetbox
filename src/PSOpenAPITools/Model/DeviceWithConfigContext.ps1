#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Name
No description available.
.PARAMETER DeviceType
No description available.
.PARAMETER Role
No description available.
.PARAMETER DeviceRole
Deprecated in v3.6 in favor of `role`.
.PARAMETER Tenant
No description available.
.PARAMETER Platform
No description available.
.PARAMETER Serial
Chassis serial number, assigned by the manufacturer
.PARAMETER AssetTag
A unique tag used to identify this device
.PARAMETER Site
No description available.
.PARAMETER Location
No description available.
.PARAMETER Rack
No description available.
.PARAMETER Position
No description available.
.PARAMETER Face
No description available.
.PARAMETER Latitude
GPS coordinate in decimal format (xx.yyyyyy)
.PARAMETER Longitude
GPS coordinate in decimal format (xx.yyyyyy)
.PARAMETER ParentDevice
No description available.
.PARAMETER Status
No description available.
.PARAMETER Airflow
No description available.
.PARAMETER PrimaryIp
No description available.
.PARAMETER PrimaryIp4
No description available.
.PARAMETER PrimaryIp6
No description available.
.PARAMETER OobIp
No description available.
.PARAMETER Cluster
No description available.
.PARAMETER VirtualChassis
No description available.
.PARAMETER VcPosition
No description available.
.PARAMETER VcPriority
Virtual chassis master election priority
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER ConfigTemplate
No description available.
.PARAMETER ConfigContext
No description available.
.PARAMETER LocalContextData
Local config context data takes precedence over source contexts in the final rendered config context
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER ConsolePortCount
No description available.
.PARAMETER ConsoleServerPortCount
No description available.
.PARAMETER PowerPortCount
No description available.
.PARAMETER PowerOutletCount
No description available.
.PARAMETER InterfaceCount
No description available.
.PARAMETER FrontPortCount
No description available.
.PARAMETER RearPortCount
No description available.
.PARAMETER DeviceBayCount
No description available.
.PARAMETER ModuleBayCount
No description available.
.PARAMETER InventoryItemCount
No description available.
.OUTPUTS

DeviceWithConfigContext<PSCustomObject>
#>

function Initialize-DeviceWithConfigContext {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DeviceType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Role},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DeviceRole},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Tenant},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Platform},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetTag},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Site},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Location},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Rack},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Position},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Face},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Latitude},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Longitude},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ParentDevice},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Status},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Airflow},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PrimaryIp},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PrimaryIp4},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PrimaryIp6},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OobIp},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cluster},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VirtualChassis},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VcPosition},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VcPriority},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ConfigTemplate},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ConfigContext},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LocalContextData},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ConsolePortCount},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ConsoleServerPortCount},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PowerPortCount},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PowerOutletCount},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${InterfaceCount},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${FrontPortCount},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${RearPortCount},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${DeviceBayCount},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ModuleBayCount},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${InventoryItemCount}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DeviceWithConfigContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if (!$Name -and $Name.length -gt 64) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 64."
        }

        if ($null -eq $DeviceType) {
            throw "invalid value for 'DeviceType', 'DeviceType' cannot be null."
        }

        if ($null -eq $Role) {
            throw "invalid value for 'Role', 'Role' cannot be null."
        }

        if ($null -eq $DeviceRole) {
            throw "invalid value for 'DeviceRole', 'DeviceRole' cannot be null."
        }

        if (!$Serial -and $Serial.length -gt 50) {
            throw "invalid value for 'Serial', the character length must be smaller than or equal to 50."
        }

        if (!$AssetTag -and $AssetTag.length -gt 50) {
            throw "invalid value for 'AssetTag', the character length must be smaller than or equal to 50."
        }

        if ($null -eq $Site) {
            throw "invalid value for 'Site', 'Site' cannot be null."
        }

        if ($Position -and $Position -ge 1000) {
          throw "invalid value for 'Position', must be smaller than 1000."
        }

        if ($Position -and $Position -lt 0.5) {
          throw "invalid value for 'Position', must be greater than or equal to 0.5."
        }

        if ($Latitude -and $Latitude -ge 100) {
          throw "invalid value for 'Latitude', must be smaller than 100."
        }

        if ($Latitude -and $Latitude -le -100) {
          throw "invalid value for 'Latitude', must be greater than -100."
        }

        if ($Longitude -and $Longitude -ge 1000) {
          throw "invalid value for 'Longitude', must be smaller than 1000."
        }

        if ($Longitude -and $Longitude -le -1000) {
          throw "invalid value for 'Longitude', must be greater than -1000."
        }

        if ($null -eq $ParentDevice) {
            throw "invalid value for 'ParentDevice', 'ParentDevice' cannot be null."
        }

        if ($VcPosition -and $VcPosition -gt 255) {
          throw "invalid value for 'VcPosition', must be smaller than or equal to 255."
        }

        if ($VcPosition -and $VcPosition -lt 0) {
          throw "invalid value for 'VcPosition', must be greater than or equal to 0."
        }

        if ($VcPriority -and $VcPriority -gt 255) {
          throw "invalid value for 'VcPriority', must be smaller than or equal to 255."
        }

        if ($VcPriority -and $VcPriority -lt 0) {
          throw "invalid value for 'VcPriority', must be greater than or equal to 0."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $ConsolePortCount) {
            throw "invalid value for 'ConsolePortCount', 'ConsolePortCount' cannot be null."
        }

        if ($null -eq $ConsoleServerPortCount) {
            throw "invalid value for 'ConsoleServerPortCount', 'ConsoleServerPortCount' cannot be null."
        }

        if ($null -eq $PowerPortCount) {
            throw "invalid value for 'PowerPortCount', 'PowerPortCount' cannot be null."
        }

        if ($null -eq $PowerOutletCount) {
            throw "invalid value for 'PowerOutletCount', 'PowerOutletCount' cannot be null."
        }

        if ($null -eq $InterfaceCount) {
            throw "invalid value for 'InterfaceCount', 'InterfaceCount' cannot be null."
        }

        if ($null -eq $FrontPortCount) {
            throw "invalid value for 'FrontPortCount', 'FrontPortCount' cannot be null."
        }

        if ($null -eq $RearPortCount) {
            throw "invalid value for 'RearPortCount', 'RearPortCount' cannot be null."
        }

        if ($null -eq $DeviceBayCount) {
            throw "invalid value for 'DeviceBayCount', 'DeviceBayCount' cannot be null."
        }

        if ($null -eq $ModuleBayCount) {
            throw "invalid value for 'ModuleBayCount', 'ModuleBayCount' cannot be null."
        }

        if ($null -eq $InventoryItemCount) {
            throw "invalid value for 'InventoryItemCount', 'InventoryItemCount' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "device_type" = ${DeviceType}
            "role" = ${Role}
            "device_role" = ${DeviceRole}
            "tenant" = ${Tenant}
            "platform" = ${Platform}
            "serial" = ${Serial}
            "asset_tag" = ${AssetTag}
            "site" = ${Site}
            "location" = ${Location}
            "rack" = ${Rack}
            "position" = ${Position}
            "face" = ${Face}
            "latitude" = ${Latitude}
            "longitude" = ${Longitude}
            "parent_device" = ${ParentDevice}
            "status" = ${Status}
            "airflow" = ${Airflow}
            "primary_ip" = ${PrimaryIp}
            "primary_ip4" = ${PrimaryIp4}
            "primary_ip6" = ${PrimaryIp6}
            "oob_ip" = ${OobIp}
            "cluster" = ${Cluster}
            "virtual_chassis" = ${VirtualChassis}
            "vc_position" = ${VcPosition}
            "vc_priority" = ${VcPriority}
            "description" = ${Description}
            "comments" = ${Comments}
            "config_template" = ${ConfigTemplate}
            "config_context" = ${ConfigContext}
            "local_context_data" = ${LocalContextData}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "console_port_count" = ${ConsolePortCount}
            "console_server_port_count" = ${ConsoleServerPortCount}
            "power_port_count" = ${PowerPortCount}
            "power_outlet_count" = ${PowerOutletCount}
            "interface_count" = ${InterfaceCount}
            "front_port_count" = ${FrontPortCount}
            "rear_port_count" = ${RearPortCount}
            "device_bay_count" = ${DeviceBayCount}
            "module_bay_count" = ${ModuleBayCount}
            "inventory_item_count" = ${InventoryItemCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DeviceWithConfigContext<PSCustomObject>

.DESCRIPTION

Convert from JSON to DeviceWithConfigContext<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DeviceWithConfigContext<PSCustomObject>
#>
function ConvertFrom-JsonToDeviceWithConfigContext {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DeviceWithConfigContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DeviceWithConfigContext
        $AllProperties = ("id", "url", "display", "name", "device_type", "role", "device_role", "tenant", "platform", "serial", "asset_tag", "site", "location", "rack", "position", "face", "latitude", "longitude", "parent_device", "status", "airflow", "primary_ip", "primary_ip4", "primary_ip6", "oob_ip", "cluster", "virtual_chassis", "vc_position", "vc_priority", "description", "comments", "config_template", "config_context", "local_context_data", "tags", "custom_fields", "created", "last_updated", "console_port_count", "console_server_port_count", "power_port_count", "power_outlet_count", "interface_count", "front_port_count", "rear_port_count", "device_bay_count", "module_bay_count", "inventory_item_count")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device_type' missing."
        } else {
            $DeviceType = $JsonParameters.PSobject.Properties["device_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) {
            throw "Error! JSON cannot be serialized due to the required property 'role' missing."
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_role"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device_role' missing."
        } else {
            $DeviceRole = $JsonParameters.PSobject.Properties["device_role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site"))) {
            throw "Error! JSON cannot be serialized due to the required property 'site' missing."
        } else {
            $Site = $JsonParameters.PSobject.Properties["site"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent_device"))) {
            throw "Error! JSON cannot be serialized due to the required property 'parent_device' missing."
        } else {
            $ParentDevice = $JsonParameters.PSobject.Properties["parent_device"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primary_ip"))) {
            throw "Error! JSON cannot be serialized due to the required property 'primary_ip' missing."
        } else {
            $PrimaryIp = $JsonParameters.PSobject.Properties["primary_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config_context"))) {
            throw "Error! JSON cannot be serialized due to the required property 'config_context' missing."
        } else {
            $ConfigContext = $JsonParameters.PSobject.Properties["config_context"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "console_port_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'console_port_count' missing."
        } else {
            $ConsolePortCount = $JsonParameters.PSobject.Properties["console_port_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "console_server_port_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'console_server_port_count' missing."
        } else {
            $ConsoleServerPortCount = $JsonParameters.PSobject.Properties["console_server_port_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "power_port_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'power_port_count' missing."
        } else {
            $PowerPortCount = $JsonParameters.PSobject.Properties["power_port_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "power_outlet_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'power_outlet_count' missing."
        } else {
            $PowerOutletCount = $JsonParameters.PSobject.Properties["power_outlet_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "interface_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'interface_count' missing."
        } else {
            $InterfaceCount = $JsonParameters.PSobject.Properties["interface_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "front_port_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'front_port_count' missing."
        } else {
            $FrontPortCount = $JsonParameters.PSobject.Properties["front_port_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rear_port_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'rear_port_count' missing."
        } else {
            $RearPortCount = $JsonParameters.PSobject.Properties["rear_port_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_bay_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device_bay_count' missing."
        } else {
            $DeviceBayCount = $JsonParameters.PSobject.Properties["device_bay_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "module_bay_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'module_bay_count' missing."
        } else {
            $ModuleBayCount = $JsonParameters.PSobject.Properties["module_bay_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inventory_item_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'inventory_item_count' missing."
        } else {
            $InventoryItemCount = $JsonParameters.PSobject.Properties["inventory_item_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "platform"))) { #optional property not found
            $Platform = $null
        } else {
            $Platform = $JsonParameters.PSobject.Properties["platform"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_tag"))) { #optional property not found
            $AssetTag = $null
        } else {
            $AssetTag = $JsonParameters.PSobject.Properties["asset_tag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rack"))) { #optional property not found
            $Rack = $null
        } else {
            $Rack = $JsonParameters.PSobject.Properties["rack"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "face"))) { #optional property not found
            $Face = $null
        } else {
            $Face = $JsonParameters.PSobject.Properties["face"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latitude"))) { #optional property not found
            $Latitude = $null
        } else {
            $Latitude = $JsonParameters.PSobject.Properties["latitude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "longitude"))) { #optional property not found
            $Longitude = $null
        } else {
            $Longitude = $JsonParameters.PSobject.Properties["longitude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "airflow"))) { #optional property not found
            $Airflow = $null
        } else {
            $Airflow = $JsonParameters.PSobject.Properties["airflow"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primary_ip4"))) { #optional property not found
            $PrimaryIp4 = $null
        } else {
            $PrimaryIp4 = $JsonParameters.PSobject.Properties["primary_ip4"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primary_ip6"))) { #optional property not found
            $PrimaryIp6 = $null
        } else {
            $PrimaryIp6 = $JsonParameters.PSobject.Properties["primary_ip6"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "oob_ip"))) { #optional property not found
            $OobIp = $null
        } else {
            $OobIp = $JsonParameters.PSobject.Properties["oob_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cluster"))) { #optional property not found
            $Cluster = $null
        } else {
            $Cluster = $JsonParameters.PSobject.Properties["cluster"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "virtual_chassis"))) { #optional property not found
            $VirtualChassis = $null
        } else {
            $VirtualChassis = $JsonParameters.PSobject.Properties["virtual_chassis"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vc_position"))) { #optional property not found
            $VcPosition = $null
        } else {
            $VcPosition = $JsonParameters.PSobject.Properties["vc_position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vc_priority"))) { #optional property not found
            $VcPriority = $null
        } else {
            $VcPriority = $JsonParameters.PSobject.Properties["vc_priority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config_template"))) { #optional property not found
            $ConfigTemplate = $null
        } else {
            $ConfigTemplate = $JsonParameters.PSobject.Properties["config_template"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "local_context_data"))) { #optional property not found
            $LocalContextData = $null
        } else {
            $LocalContextData = $JsonParameters.PSobject.Properties["local_context_data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "device_type" = ${DeviceType}
            "role" = ${Role}
            "device_role" = ${DeviceRole}
            "tenant" = ${Tenant}
            "platform" = ${Platform}
            "serial" = ${Serial}
            "asset_tag" = ${AssetTag}
            "site" = ${Site}
            "location" = ${Location}
            "rack" = ${Rack}
            "position" = ${Position}
            "face" = ${Face}
            "latitude" = ${Latitude}
            "longitude" = ${Longitude}
            "parent_device" = ${ParentDevice}
            "status" = ${Status}
            "airflow" = ${Airflow}
            "primary_ip" = ${PrimaryIp}
            "primary_ip4" = ${PrimaryIp4}
            "primary_ip6" = ${PrimaryIp6}
            "oob_ip" = ${OobIp}
            "cluster" = ${Cluster}
            "virtual_chassis" = ${VirtualChassis}
            "vc_position" = ${VcPosition}
            "vc_priority" = ${VcPriority}
            "description" = ${Description}
            "comments" = ${Comments}
            "config_template" = ${ConfigTemplate}
            "config_context" = ${ConfigContext}
            "local_context_data" = ${LocalContextData}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "console_port_count" = ${ConsolePortCount}
            "console_server_port_count" = ${ConsoleServerPortCount}
            "power_port_count" = ${PowerPortCount}
            "power_outlet_count" = ${PowerOutletCount}
            "interface_count" = ${InterfaceCount}
            "front_port_count" = ${FrontPortCount}
            "rear_port_count" = ${RearPortCount}
            "device_bay_count" = ${DeviceBayCount}
            "module_bay_count" = ${ModuleBayCount}
            "inventory_item_count" = ${InventoryItemCount}
        }

        return $PSO
    }

}

