#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER VirtualMachine
No description available.
.PARAMETER Name
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Parent
No description available.
.PARAMETER Bridge
No description available.
.PARAMETER Mtu
No description available.
.PARAMETER MacAddress
No description available.
.PARAMETER Description
No description available.
.PARAMETER Mode
No description available.
.PARAMETER UntaggedVlan
No description available.
.PARAMETER TaggedVlans
No description available.
.PARAMETER Vrf
No description available.
.PARAMETER L2vpnTermination
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER CountIpaddresses
No description available.
.PARAMETER CountFhrpGroups
No description available.
.OUTPUTS

VMInterface<PSCustomObject>
#>

function Initialize-VMInterface {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VirtualMachine},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parent},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Bridge},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Mtu},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MacAddress},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Mode},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UntaggedVlan},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${TaggedVlans},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Vrf},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${L2vpnTermination},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CountIpaddresses},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CountFhrpGroups}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => VMInterface' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $VirtualMachine) {
            throw "invalid value for 'VirtualMachine', 'VirtualMachine' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 64) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 64."
        }

        if ($Mtu -and $Mtu -gt 65536) {
          throw "invalid value for 'Mtu', must be smaller than or equal to 65536."
        }

        if ($Mtu -and $Mtu -lt 1) {
          throw "invalid value for 'Mtu', must be greater than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $CountIpaddresses) {
            throw "invalid value for 'CountIpaddresses', 'CountIpaddresses' cannot be null."
        }

        if ($null -eq $CountFhrpGroups) {
            throw "invalid value for 'CountFhrpGroups', 'CountFhrpGroups' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "virtual_machine" = ${VirtualMachine}
            "name" = ${Name}
            "enabled" = ${Enabled}
            "parent" = ${Parent}
            "bridge" = ${Bridge}
            "mtu" = ${Mtu}
            "mac_address" = ${MacAddress}
            "description" = ${Description}
            "mode" = ${Mode}
            "untagged_vlan" = ${UntaggedVlan}
            "tagged_vlans" = ${TaggedVlans}
            "vrf" = ${Vrf}
            "l2vpn_termination" = ${L2vpnTermination}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "count_ipaddresses" = ${CountIpaddresses}
            "count_fhrp_groups" = ${CountFhrpGroups}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VMInterface<PSCustomObject>

.DESCRIPTION

Convert from JSON to VMInterface<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VMInterface<PSCustomObject>
#>
function ConvertFrom-JsonToVMInterface {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => VMInterface' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in VMInterface
        $AllProperties = ("id", "url", "display", "virtual_machine", "name", "enabled", "parent", "bridge", "mtu", "mac_address", "description", "mode", "untagged_vlan", "tagged_vlans", "vrf", "l2vpn_termination", "tags", "custom_fields", "created", "last_updated", "count_ipaddresses", "count_fhrp_groups")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "virtual_machine"))) {
            throw "Error! JSON cannot be serialized due to the required property 'virtual_machine' missing."
        } else {
            $VirtualMachine = $JsonParameters.PSobject.Properties["virtual_machine"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "l2vpn_termination"))) {
            throw "Error! JSON cannot be serialized due to the required property 'l2vpn_termination' missing."
        } else {
            $L2vpnTermination = $JsonParameters.PSobject.Properties["l2vpn_termination"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count_ipaddresses"))) {
            throw "Error! JSON cannot be serialized due to the required property 'count_ipaddresses' missing."
        } else {
            $CountIpaddresses = $JsonParameters.PSobject.Properties["count_ipaddresses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count_fhrp_groups"))) {
            throw "Error! JSON cannot be serialized due to the required property 'count_fhrp_groups' missing."
        } else {
            $CountFhrpGroups = $JsonParameters.PSobject.Properties["count_fhrp_groups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bridge"))) { #optional property not found
            $Bridge = $null
        } else {
            $Bridge = $JsonParameters.PSobject.Properties["bridge"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mac_address"))) { #optional property not found
            $MacAddress = $null
        } else {
            $MacAddress = $JsonParameters.PSobject.Properties["mac_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "untagged_vlan"))) { #optional property not found
            $UntaggedVlan = $null
        } else {
            $UntaggedVlan = $JsonParameters.PSobject.Properties["untagged_vlan"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tagged_vlans"))) { #optional property not found
            $TaggedVlans = $null
        } else {
            $TaggedVlans = $JsonParameters.PSobject.Properties["tagged_vlans"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vrf"))) { #optional property not found
            $Vrf = $null
        } else {
            $Vrf = $JsonParameters.PSobject.Properties["vrf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "virtual_machine" = ${VirtualMachine}
            "name" = ${Name}
            "enabled" = ${Enabled}
            "parent" = ${Parent}
            "bridge" = ${Bridge}
            "mtu" = ${Mtu}
            "mac_address" = ${MacAddress}
            "description" = ${Description}
            "mode" = ${Mode}
            "untagged_vlan" = ${UntaggedVlan}
            "tagged_vlans" = ${TaggedVlans}
            "vrf" = ${Vrf}
            "l2vpn_termination" = ${L2vpnTermination}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "count_ipaddresses" = ${CountIpaddresses}
            "count_fhrp_groups" = ${CountFhrpGroups}
        }

        return $PSO
    }

}

