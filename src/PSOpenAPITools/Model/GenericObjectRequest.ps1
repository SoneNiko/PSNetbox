#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Minimal representation of some generic object identified by ContentType and PK.

.PARAMETER ObjectType
No description available.
.PARAMETER ObjectId
No description available.
.OUTPUTS

GenericObjectRequest<PSCustomObject>
#>

function Initialize-GenericObjectRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ObjectType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ObjectId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GenericObjectRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        if ($null -eq $ObjectId) {
            throw "invalid value for 'ObjectId', 'ObjectId' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "object_type" = ${ObjectType}
            "object_id" = ${ObjectId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GenericObjectRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to GenericObjectRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GenericObjectRequest<PSCustomObject>
#>
function ConvertFrom-JsonToGenericObjectRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GenericObjectRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GenericObjectRequest
        $AllProperties = ("object_type", "object_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'object_type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object_type' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["object_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object_id' missing."
        } else {
            $ObjectId = $JsonParameters.PSobject.Properties["object_id"].value
        }

        $PSO = [PSCustomObject]@{
            "object_type" = ${ObjectType}
            "object_id" = ${ObjectId}
        }

        return $PSO
    }

}

