#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER BaseChoices
Base set of predefined choices (optional)  * `IATA` - IATA (Airport codes) * `ISO_3166` - ISO 3166 (Country codes) * `UN_LOCODE` - UN/LOCODE (Location codes)
.PARAMETER ExtraChoices
No description available.
.PARAMETER OrderAlphabetically
Choices are automatically ordered alphabetically
.OUTPUTS

WritableCustomFieldChoiceSetRequest<PSCustomObject>
#>

function Initialize-WritableCustomFieldChoiceSetRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("IATA", "ISO_3166", "UN_LOCODE", "")]
        [String]
        ${BaseChoices},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[][]]
        ${ExtraChoices},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OrderAlphabetically}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WritableCustomFieldChoiceSetRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $ExtraChoices) {
            throw "invalid value for 'ExtraChoices', 'ExtraChoices' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "base_choices" = ${BaseChoices}
            "extra_choices" = ${ExtraChoices}
            "order_alphabetically" = ${OrderAlphabetically}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WritableCustomFieldChoiceSetRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to WritableCustomFieldChoiceSetRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WritableCustomFieldChoiceSetRequest<PSCustomObject>
#>
function ConvertFrom-JsonToWritableCustomFieldChoiceSetRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WritableCustomFieldChoiceSetRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WritableCustomFieldChoiceSetRequest
        $AllProperties = ("name", "description", "base_choices", "extra_choices", "order_alphabetically")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "extra_choices"))) {
            throw "Error! JSON cannot be serialized due to the required property 'extra_choices' missing."
        } else {
            $ExtraChoices = $JsonParameters.PSobject.Properties["extra_choices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "base_choices"))) { #optional property not found
            $BaseChoices = $null
        } else {
            $BaseChoices = $JsonParameters.PSobject.Properties["base_choices"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "order_alphabetically"))) { #optional property not found
            $OrderAlphabetically = $null
        } else {
            $OrderAlphabetically = $JsonParameters.PSobject.Properties["order_alphabetically"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "base_choices" = ${BaseChoices}
            "extra_choices" = ${ExtraChoices}
            "order_alphabetically" = ${OrderAlphabetically}
        }

        return $PSO
    }

}

