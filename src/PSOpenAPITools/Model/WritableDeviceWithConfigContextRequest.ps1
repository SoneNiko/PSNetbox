#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Name
No description available.
.PARAMETER DeviceType
No description available.
.PARAMETER Role
The function this device serves
.PARAMETER Tenant
No description available.
.PARAMETER Platform
No description available.
.PARAMETER Serial
Chassis serial number, assigned by the manufacturer
.PARAMETER AssetTag
A unique tag used to identify this device
.PARAMETER Site
No description available.
.PARAMETER Location
No description available.
.PARAMETER Rack
No description available.
.PARAMETER Position
No description available.
.PARAMETER Face
* `front` - Front * `rear` - Rear
.PARAMETER Latitude
GPS coordinate in decimal format (xx.yyyyyy)
.PARAMETER Longitude
GPS coordinate in decimal format (xx.yyyyyy)
.PARAMETER Status
* `offline` - Offline * `active` - Active * `planned` - Planned * `staged` - Staged * `failed` - Failed * `inventory` - Inventory * `decommissioning` - Decommissioning
.PARAMETER Airflow
* `front-to-rear` - Front to rear * `rear-to-front` - Rear to front * `left-to-right` - Left to right * `right-to-left` - Right to left * `side-to-rear` - Side to rear * `passive` - Passive * `mixed` - Mixed
.PARAMETER PrimaryIp4
No description available.
.PARAMETER PrimaryIp6
No description available.
.PARAMETER OobIp
No description available.
.PARAMETER Cluster
No description available.
.PARAMETER VirtualChassis
No description available.
.PARAMETER VcPosition
No description available.
.PARAMETER VcPriority
Virtual chassis master election priority
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER ConfigTemplate
No description available.
.PARAMETER LocalContextData
Local config context data takes precedence over source contexts in the final rendered config context
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

WritableDeviceWithConfigContextRequest<PSCustomObject>
#>

function Initialize-WritableDeviceWithConfigContextRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${DeviceType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Role},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Tenant},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Platform},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetTag},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Site},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Location},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Rack},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Position},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("front", "rear", "")]
        [String]
        ${Face},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Latitude},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Longitude},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("offline", "active", "planned", "staged", "failed", "inventory", "decommissioning")]
        [String]
        ${Status},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("front-to-rear", "rear-to-front", "left-to-right", "right-to-left", "side-to-rear", "passive", "mixed", "")]
        [String]
        ${Airflow},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PrimaryIp4},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PrimaryIp6},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${OobIp},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Cluster},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VirtualChassis},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VcPosition},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VcPriority},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ConfigTemplate},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LocalContextData},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WritableDeviceWithConfigContextRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 64) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 64."
        }

        if ($null -eq $DeviceType) {
            throw "invalid value for 'DeviceType', 'DeviceType' cannot be null."
        }

        if ($null -eq $Role) {
            throw "invalid value for 'Role', 'Role' cannot be null."
        }

        if (!$Serial -and $Serial.length -gt 50) {
            throw "invalid value for 'Serial', the character length must be smaller than or equal to 50."
        }

        if (!$AssetTag -and $AssetTag.length -gt 50) {
            throw "invalid value for 'AssetTag', the character length must be smaller than or equal to 50."
        }

        if ($null -eq $Site) {
            throw "invalid value for 'Site', 'Site' cannot be null."
        }

        if ($Position -and $Position -ge 1000) {
          throw "invalid value for 'Position', must be smaller than 1000."
        }

        if ($Position -and $Position -lt 0.5) {
          throw "invalid value for 'Position', must be greater than or equal to 0.5."
        }

        if ($Latitude -and $Latitude -ge 100) {
          throw "invalid value for 'Latitude', must be smaller than 100."
        }

        if ($Latitude -and $Latitude -le -100) {
          throw "invalid value for 'Latitude', must be greater than -100."
        }

        if ($Longitude -and $Longitude -ge 1000) {
          throw "invalid value for 'Longitude', must be smaller than 1000."
        }

        if ($Longitude -and $Longitude -le -1000) {
          throw "invalid value for 'Longitude', must be greater than -1000."
        }

        if ($VcPosition -and $VcPosition -gt 255) {
          throw "invalid value for 'VcPosition', must be smaller than or equal to 255."
        }

        if ($VcPosition -and $VcPosition -lt 0) {
          throw "invalid value for 'VcPosition', must be greater than or equal to 0."
        }

        if ($VcPriority -and $VcPriority -gt 255) {
          throw "invalid value for 'VcPriority', must be smaller than or equal to 255."
        }

        if ($VcPriority -and $VcPriority -lt 0) {
          throw "invalid value for 'VcPriority', must be greater than or equal to 0."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "device_type" = ${DeviceType}
            "role" = ${Role}
            "tenant" = ${Tenant}
            "platform" = ${Platform}
            "serial" = ${Serial}
            "asset_tag" = ${AssetTag}
            "site" = ${Site}
            "location" = ${Location}
            "rack" = ${Rack}
            "position" = ${Position}
            "face" = ${Face}
            "latitude" = ${Latitude}
            "longitude" = ${Longitude}
            "status" = ${Status}
            "airflow" = ${Airflow}
            "primary_ip4" = ${PrimaryIp4}
            "primary_ip6" = ${PrimaryIp6}
            "oob_ip" = ${OobIp}
            "cluster" = ${Cluster}
            "virtual_chassis" = ${VirtualChassis}
            "vc_position" = ${VcPosition}
            "vc_priority" = ${VcPriority}
            "description" = ${Description}
            "comments" = ${Comments}
            "config_template" = ${ConfigTemplate}
            "local_context_data" = ${LocalContextData}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WritableDeviceWithConfigContextRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to WritableDeviceWithConfigContextRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WritableDeviceWithConfigContextRequest<PSCustomObject>
#>
function ConvertFrom-JsonToWritableDeviceWithConfigContextRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WritableDeviceWithConfigContextRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WritableDeviceWithConfigContextRequest
        $AllProperties = ("name", "device_type", "role", "tenant", "platform", "serial", "asset_tag", "site", "location", "rack", "position", "face", "latitude", "longitude", "status", "airflow", "primary_ip4", "primary_ip6", "oob_ip", "cluster", "virtual_chassis", "vc_position", "vc_priority", "description", "comments", "config_template", "local_context_data", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'device_type' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device_type' missing."
        } else {
            $DeviceType = $JsonParameters.PSobject.Properties["device_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) {
            throw "Error! JSON cannot be serialized due to the required property 'role' missing."
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site"))) {
            throw "Error! JSON cannot be serialized due to the required property 'site' missing."
        } else {
            $Site = $JsonParameters.PSobject.Properties["site"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "platform"))) { #optional property not found
            $Platform = $null
        } else {
            $Platform = $JsonParameters.PSobject.Properties["platform"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_tag"))) { #optional property not found
            $AssetTag = $null
        } else {
            $AssetTag = $JsonParameters.PSobject.Properties["asset_tag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "location"))) { #optional property not found
            $Location = $null
        } else {
            $Location = $JsonParameters.PSobject.Properties["location"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rack"))) { #optional property not found
            $Rack = $null
        } else {
            $Rack = $JsonParameters.PSobject.Properties["rack"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "position"))) { #optional property not found
            $Position = $null
        } else {
            $Position = $JsonParameters.PSobject.Properties["position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "face"))) { #optional property not found
            $Face = $null
        } else {
            $Face = $JsonParameters.PSobject.Properties["face"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latitude"))) { #optional property not found
            $Latitude = $null
        } else {
            $Latitude = $JsonParameters.PSobject.Properties["latitude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "longitude"))) { #optional property not found
            $Longitude = $null
        } else {
            $Longitude = $JsonParameters.PSobject.Properties["longitude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "airflow"))) { #optional property not found
            $Airflow = $null
        } else {
            $Airflow = $JsonParameters.PSobject.Properties["airflow"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primary_ip4"))) { #optional property not found
            $PrimaryIp4 = $null
        } else {
            $PrimaryIp4 = $JsonParameters.PSobject.Properties["primary_ip4"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primary_ip6"))) { #optional property not found
            $PrimaryIp6 = $null
        } else {
            $PrimaryIp6 = $JsonParameters.PSobject.Properties["primary_ip6"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "oob_ip"))) { #optional property not found
            $OobIp = $null
        } else {
            $OobIp = $JsonParameters.PSobject.Properties["oob_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cluster"))) { #optional property not found
            $Cluster = $null
        } else {
            $Cluster = $JsonParameters.PSobject.Properties["cluster"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "virtual_chassis"))) { #optional property not found
            $VirtualChassis = $null
        } else {
            $VirtualChassis = $JsonParameters.PSobject.Properties["virtual_chassis"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vc_position"))) { #optional property not found
            $VcPosition = $null
        } else {
            $VcPosition = $JsonParameters.PSobject.Properties["vc_position"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vc_priority"))) { #optional property not found
            $VcPriority = $null
        } else {
            $VcPriority = $JsonParameters.PSobject.Properties["vc_priority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "config_template"))) { #optional property not found
            $ConfigTemplate = $null
        } else {
            $ConfigTemplate = $JsonParameters.PSobject.Properties["config_template"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "local_context_data"))) { #optional property not found
            $LocalContextData = $null
        } else {
            $LocalContextData = $JsonParameters.PSobject.Properties["local_context_data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "device_type" = ${DeviceType}
            "role" = ${Role}
            "tenant" = ${Tenant}
            "platform" = ${Platform}
            "serial" = ${Serial}
            "asset_tag" = ${AssetTag}
            "site" = ${Site}
            "location" = ${Location}
            "rack" = ${Rack}
            "position" = ${Position}
            "face" = ${Face}
            "latitude" = ${Latitude}
            "longitude" = ${Longitude}
            "status" = ${Status}
            "airflow" = ${Airflow}
            "primary_ip4" = ${PrimaryIp4}
            "primary_ip6" = ${PrimaryIp6}
            "oob_ip" = ${OobIp}
            "cluster" = ${Cluster}
            "virtual_chassis" = ${VirtualChassis}
            "vc_position" = ${VcPosition}
            "vc_priority" = ${VcPriority}
            "description" = ${Description}
            "comments" = ${Comments}
            "config_template" = ${ConfigTemplate}
            "local_context_data" = ${LocalContextData}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

