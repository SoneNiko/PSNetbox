#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Address
No description available.
.PARAMETER Vrf
No description available.
.PARAMETER Tenant
No description available.
.PARAMETER Status
The operational status of this IP  * `active` - Active * `reserved` - Reserved * `deprecated` - Deprecated * `dhcp` - DHCP * `slaac` - SLAAC
.PARAMETER Role
The functional role of this IP  * `loopback` - Loopback * `secondary` - Secondary * `anycast` - Anycast * `vip` - VIP * `vrrp` - VRRP * `hsrp` - HSRP * `glbp` - GLBP * `carp` - CARP
.PARAMETER AssignedObjectType
No description available.
.PARAMETER AssignedObjectId
No description available.
.PARAMETER NatInside
The IP for which this address is the ""outside"" IP
.PARAMETER DnsName
Hostname or FQDN (not case-sensitive)
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

PatchedWritableIPAddressRequest<PSCustomObject>
#>

function Initialize-PatchedWritableIPAddressRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Vrf},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Tenant},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("active", "reserved", "deprecated", "dhcp", "slaac")]
        [String]
        ${Status},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("loopback", "secondary", "anycast", "vip", "vrrp", "hsrp", "glbp", "carp", "")]
        [String]
        ${Role},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssignedObjectType},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${AssignedObjectId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NatInside},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^([0-9A-Za-z_-]+|\*)(\.[0-9A-Za-z_-]+)*\.?$")]
        [String]
        ${DnsName},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableIPAddressRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Address -and $Address.length -lt 1) {
            throw "invalid value for 'Address', the character length must be great than or equal to 1."
        }

        if ($AssignedObjectId -and $AssignedObjectId -gt 9223372036854775807) {
          throw "invalid value for 'AssignedObjectId', must be smaller than or equal to 9223372036854775807."
        }

        if ($AssignedObjectId -and $AssignedObjectId -lt 0) {
          throw "invalid value for 'AssignedObjectId', must be greater than or equal to 0."
        }

        if (!$DnsName -and $DnsName.length -gt 255) {
            throw "invalid value for 'DnsName', the character length must be smaller than or equal to 255."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "vrf" = ${Vrf}
            "tenant" = ${Tenant}
            "status" = ${Status}
            "role" = ${Role}
            "assigned_object_type" = ${AssignedObjectType}
            "assigned_object_id" = ${AssignedObjectId}
            "nat_inside" = ${NatInside}
            "dns_name" = ${DnsName}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableIPAddressRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableIPAddressRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableIPAddressRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableIPAddressRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableIPAddressRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableIPAddressRequest
        $AllProperties = ("address", "vrf", "tenant", "status", "role", "assigned_object_type", "assigned_object_id", "nat_inside", "dns_name", "description", "comments", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) { #optional property not found
            $Address = $null
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vrf"))) { #optional property not found
            $Vrf = $null
        } else {
            $Vrf = $JsonParameters.PSobject.Properties["vrf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assigned_object_type"))) { #optional property not found
            $AssignedObjectType = $null
        } else {
            $AssignedObjectType = $JsonParameters.PSobject.Properties["assigned_object_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assigned_object_id"))) { #optional property not found
            $AssignedObjectId = $null
        } else {
            $AssignedObjectId = $JsonParameters.PSobject.Properties["assigned_object_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nat_inside"))) { #optional property not found
            $NatInside = $null
        } else {
            $NatInside = $JsonParameters.PSobject.Properties["nat_inside"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dns_name"))) { #optional property not found
            $DnsName = $null
        } else {
            $DnsName = $JsonParameters.PSobject.Properties["dns_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "address" = ${Address}
            "vrf" = ${Vrf}
            "tenant" = ${Tenant}
            "status" = ${Status}
            "role" = ${Role}
            "assigned_object_type" = ${AssignedObjectType}
            "assigned_object_id" = ${AssignedObjectId}
            "nat_inside" = ${NatInside}
            "dns_name" = ${DnsName}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

