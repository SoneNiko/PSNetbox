#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER ObjectTypes
No description available.
.PARAMETER Groups
No description available.
.PARAMETER Users
No description available.
.PARAMETER Actions
The list of actions granted by this permission
.PARAMETER Constraints
Queryset filter matching the applicable objects of the selected type(s)
.OUTPUTS

ObjectPermission<PSCustomObject>
#>

function Initialize-ObjectPermission {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ObjectTypes},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Groups},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Users},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Actions},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Constraints}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ObjectPermission' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $ObjectTypes) {
            throw "invalid value for 'ObjectTypes', 'ObjectTypes' cannot be null."
        }

        if ($null -eq $Actions) {
            throw "invalid value for 'Actions', 'Actions' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "description" = ${Description}
            "enabled" = ${Enabled}
            "object_types" = ${ObjectTypes}
            "groups" = ${Groups}
            "users" = ${Users}
            "actions" = ${Actions}
            "constraints" = ${Constraints}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ObjectPermission<PSCustomObject>

.DESCRIPTION

Convert from JSON to ObjectPermission<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ObjectPermission<PSCustomObject>
#>
function ConvertFrom-JsonToObjectPermission {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ObjectPermission' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ObjectPermission
        $AllProperties = ("id", "url", "display", "name", "description", "enabled", "object_types", "groups", "users", "actions", "constraints")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object_types"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object_types' missing."
        } else {
            $ObjectTypes = $JsonParameters.PSobject.Properties["object_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actions"))) {
            throw "Error! JSON cannot be serialized due to the required property 'actions' missing."
        } else {
            $Actions = $JsonParameters.PSobject.Properties["actions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groups"))) { #optional property not found
            $Groups = $null
        } else {
            $Groups = $JsonParameters.PSobject.Properties["groups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "users"))) { #optional property not found
            $Users = $null
        } else {
            $Users = $JsonParameters.PSobject.Properties["users"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "constraints"))) { #optional property not found
            $Constraints = $null
        } else {
            $Constraints = $JsonParameters.PSobject.Properties["constraints"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "description" = ${Description}
            "enabled" = ${Enabled}
            "object_types" = ${ObjectTypes}
            "groups" = ${Groups}
            "users" = ${Users}
            "actions" = ${Actions}
            "constraints" = ${Constraints}
        }

        return $PSO
    }

}

