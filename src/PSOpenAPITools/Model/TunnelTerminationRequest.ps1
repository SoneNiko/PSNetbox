#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Tunnel
No description available.
.PARAMETER Role
* `peer` - Peer * `hub` - Hub * `spoke` - Spoke
.PARAMETER TerminationType
No description available.
.PARAMETER TerminationId
No description available.
.PARAMETER OutsideIp
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

TunnelTerminationRequest<PSCustomObject>
#>

function Initialize-TunnelTerminationRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Tunnel},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("peer", "hub", "spoke")]
        [String]
        ${Role},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TerminationType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TerminationId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${OutsideIp},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TunnelTerminationRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Tunnel) {
            throw "invalid value for 'Tunnel', 'Tunnel' cannot be null."
        }

        if ($null -eq $Role) {
            throw "invalid value for 'Role', 'Role' cannot be null."
        }

        if ($null -eq $TerminationType) {
            throw "invalid value for 'TerminationType', 'TerminationType' cannot be null."
        }

        if ($TerminationId -and $TerminationId -gt 9223372036854775807) {
          throw "invalid value for 'TerminationId', must be smaller than or equal to 9223372036854775807."
        }

        if ($TerminationId -and $TerminationId -lt 0) {
          throw "invalid value for 'TerminationId', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "tunnel" = ${Tunnel}
            "role" = ${Role}
            "termination_type" = ${TerminationType}
            "termination_id" = ${TerminationId}
            "outside_ip" = ${OutsideIp}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TunnelTerminationRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to TunnelTerminationRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TunnelTerminationRequest<PSCustomObject>
#>
function ConvertFrom-JsonToTunnelTerminationRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TunnelTerminationRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TunnelTerminationRequest
        $AllProperties = ("tunnel", "role", "termination_type", "termination_id", "outside_ip", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'tunnel' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tunnel"))) {
            throw "Error! JSON cannot be serialized due to the required property 'tunnel' missing."
        } else {
            $Tunnel = $JsonParameters.PSobject.Properties["tunnel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) {
            throw "Error! JSON cannot be serialized due to the required property 'role' missing."
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "termination_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'termination_type' missing."
        } else {
            $TerminationType = $JsonParameters.PSobject.Properties["termination_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "termination_id"))) { #optional property not found
            $TerminationId = $null
        } else {
            $TerminationId = $JsonParameters.PSobject.Properties["termination_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "outside_ip"))) { #optional property not found
            $OutsideIp = $null
        } else {
            $OutsideIp = $JsonParameters.PSobject.Properties["outside_ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "tunnel" = ${Tunnel}
            "role" = ${Role}
            "termination_type" = ${TerminationType}
            "termination_id" = ${TerminationId}
            "outside_ip" = ${OutsideIp}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

