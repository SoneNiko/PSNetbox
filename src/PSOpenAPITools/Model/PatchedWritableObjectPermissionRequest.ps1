#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER ObjectTypes
No description available.
.PARAMETER Groups
No description available.
.PARAMETER Users
No description available.
.PARAMETER Actions
The list of actions granted by this permission
.PARAMETER Constraints
Queryset filter matching the applicable objects of the selected type(s)
.OUTPUTS

PatchedWritableObjectPermissionRequest<PSCustomObject>
#>

function Initialize-PatchedWritableObjectPermissionRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ObjectTypes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Groups},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Users},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Actions},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Constraints}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableObjectPermissionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if (!$Name -and $Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "enabled" = ${Enabled}
            "object_types" = ${ObjectTypes}
            "groups" = ${Groups}
            "users" = ${Users}
            "actions" = ${Actions}
            "constraints" = ${Constraints}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableObjectPermissionRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableObjectPermissionRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableObjectPermissionRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableObjectPermissionRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableObjectPermissionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableObjectPermissionRequest
        $AllProperties = ("name", "description", "enabled", "object_types", "groups", "users", "actions", "constraints")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object_types"))) { #optional property not found
            $ObjectTypes = $null
        } else {
            $ObjectTypes = $JsonParameters.PSobject.Properties["object_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groups"))) { #optional property not found
            $Groups = $null
        } else {
            $Groups = $JsonParameters.PSobject.Properties["groups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "users"))) { #optional property not found
            $Users = $null
        } else {
            $Users = $JsonParameters.PSobject.Properties["users"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actions"))) { #optional property not found
            $Actions = $null
        } else {
            $Actions = $JsonParameters.PSobject.Properties["actions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "constraints"))) { #optional property not found
            $Constraints = $null
        } else {
            $Constraints = $JsonParameters.PSobject.Properties["constraints"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "enabled" = ${Enabled}
            "object_types" = ${ObjectTypes}
            "groups" = ${Groups}
            "users" = ${Users}
            "actions" = ${Actions}
            "constraints" = ${Constraints}
        }

        return $PSO
    }

}

