#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER Username
Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
.PARAMETER Password
No description available.
.PARAMETER FirstName
No description available.
.PARAMETER LastName
No description available.
.PARAMETER Email
No description available.
.PARAMETER IsStaff
Designates whether the user can log into this admin site.
.PARAMETER IsActive
Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
.PARAMETER DateJoined
No description available.
.PARAMETER LastLogin
No description available.
.PARAMETER Groups
The groups this user belongs to. A user will get all permissions granted to each of their groups.
.OUTPUTS

PatchedWritableUserRequest<PSCustomObject>
#>

function Initialize-PatchedWritableUserRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[\w.@+-]+$")]
        [String]
        ${Username},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FirstName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LastName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Email},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsStaff},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsActive},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DateJoined},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastLogin},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Groups}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableUserRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Username -and $Username.length -gt 150) {
            throw "invalid value for 'Username', the character length must be smaller than or equal to 150."
        }

        if (!$Username -and $Username.length -lt 1) {
            throw "invalid value for 'Username', the character length must be great than or equal to 1."
        }

        if (!$Password -and $Password.length -gt 128) {
            throw "invalid value for 'Password', the character length must be smaller than or equal to 128."
        }

        if (!$Password -and $Password.length -lt 1) {
            throw "invalid value for 'Password', the character length must be great than or equal to 1."
        }

        if (!$FirstName -and $FirstName.length -gt 150) {
            throw "invalid value for 'FirstName', the character length must be smaller than or equal to 150."
        }

        if (!$LastName -and $LastName.length -gt 150) {
            throw "invalid value for 'LastName', the character length must be smaller than or equal to 150."
        }

        if (!$Email -and $Email.length -gt 254) {
            throw "invalid value for 'Email', the character length must be smaller than or equal to 254."
        }


        $PSO = [PSCustomObject]@{
            "username" = ${Username}
            "password" = ${Password}
            "first_name" = ${FirstName}
            "last_name" = ${LastName}
            "email" = ${Email}
            "is_staff" = ${IsStaff}
            "is_active" = ${IsActive}
            "date_joined" = ${DateJoined}
            "last_login" = ${LastLogin}
            "groups" = ${Groups}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableUserRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableUserRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableUserRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableUserRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableUserRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableUserRequest
        $AllProperties = ("username", "password", "first_name", "last_name", "email", "is_staff", "is_active", "date_joined", "last_login", "groups")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) { #optional property not found
            $Username = $null
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "first_name"))) { #optional property not found
            $FirstName = $null
        } else {
            $FirstName = $JsonParameters.PSobject.Properties["first_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_name"))) { #optional property not found
            $LastName = $null
        } else {
            $LastName = $JsonParameters.PSobject.Properties["last_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "email"))) { #optional property not found
            $Email = $null
        } else {
            $Email = $JsonParameters.PSobject.Properties["email"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_staff"))) { #optional property not found
            $IsStaff = $null
        } else {
            $IsStaff = $JsonParameters.PSobject.Properties["is_staff"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_active"))) { #optional property not found
            $IsActive = $null
        } else {
            $IsActive = $JsonParameters.PSobject.Properties["is_active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date_joined"))) { #optional property not found
            $DateJoined = $null
        } else {
            $DateJoined = $JsonParameters.PSobject.Properties["date_joined"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_login"))) { #optional property not found
            $LastLogin = $null
        } else {
            $LastLogin = $JsonParameters.PSobject.Properties["last_login"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "groups"))) { #optional property not found
            $Groups = $null
        } else {
            $Groups = $JsonParameters.PSobject.Properties["groups"].value
        }

        $PSO = [PSCustomObject]@{
            "username" = ${Username}
            "password" = ${Password}
            "first_name" = ${FirstName}
            "last_name" = ${LastName}
            "email" = ${Email}
            "is_staff" = ${IsStaff}
            "is_active" = ${IsActive}
            "date_joined" = ${DateJoined}
            "last_login" = ${LastLogin}
            "groups" = ${Groups}
        }

        return $PSO
    }

}

