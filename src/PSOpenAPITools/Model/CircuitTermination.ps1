#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Circuit
No description available.
.PARAMETER TermSide
* `A` - A * `Z` - Z
.PARAMETER Site
No description available.
.PARAMETER ProviderNetwork
No description available.
.PARAMETER PortSpeed
Physical circuit speed
.PARAMETER UpstreamSpeed
Upstream speed, if different from port speed
.PARAMETER XconnectId
ID of the local cross-connect
.PARAMETER PpInfo
Patch panel ID and port number(s)
.PARAMETER Description
No description available.
.PARAMETER MarkConnected
Treat as if a cable is connected
.PARAMETER Cable
No description available.
.PARAMETER CableEnd
No description available.
.PARAMETER LinkPeers
No description available.
.PARAMETER LinkPeersType
Return the type of the peer link terminations, or None.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER Occupied
No description available.
.OUTPUTS

CircuitTermination<PSCustomObject>
#>

function Initialize-CircuitTermination {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Circuit},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("A", "Z")]
        [String]
        ${TermSide},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Site},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProviderNetwork},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PortSpeed},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UpstreamSpeed},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${XconnectId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PpInfo},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MarkConnected},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cable},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CableEnd},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${LinkPeers},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkPeersType},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Occupied}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CircuitTermination' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $Circuit) {
            throw "invalid value for 'Circuit', 'Circuit' cannot be null."
        }

        if ($null -eq $TermSide) {
            throw "invalid value for 'TermSide', 'TermSide' cannot be null."
        }

        if ($PortSpeed -and $PortSpeed -gt 2147483647) {
          throw "invalid value for 'PortSpeed', must be smaller than or equal to 2147483647."
        }

        if ($PortSpeed -and $PortSpeed -lt 0) {
          throw "invalid value for 'PortSpeed', must be greater than or equal to 0."
        }

        if ($UpstreamSpeed -and $UpstreamSpeed -gt 2147483647) {
          throw "invalid value for 'UpstreamSpeed', must be smaller than or equal to 2147483647."
        }

        if ($UpstreamSpeed -and $UpstreamSpeed -lt 0) {
          throw "invalid value for 'UpstreamSpeed', must be greater than or equal to 0."
        }

        if (!$XconnectId -and $XconnectId.length -gt 50) {
            throw "invalid value for 'XconnectId', the character length must be smaller than or equal to 50."
        }

        if (!$PpInfo -and $PpInfo.length -gt 100) {
            throw "invalid value for 'PpInfo', the character length must be smaller than or equal to 100."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $CableEnd) {
            throw "invalid value for 'CableEnd', 'CableEnd' cannot be null."
        }

        if ($null -eq $LinkPeers) {
            throw "invalid value for 'LinkPeers', 'LinkPeers' cannot be null."
        }

        if ($null -eq $LinkPeersType) {
            throw "invalid value for 'LinkPeersType', 'LinkPeersType' cannot be null."
        }

        if ($null -eq $Occupied) {
            throw "invalid value for 'Occupied', 'Occupied' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "circuit" = ${Circuit}
            "term_side" = ${TermSide}
            "site" = ${Site}
            "provider_network" = ${ProviderNetwork}
            "port_speed" = ${PortSpeed}
            "upstream_speed" = ${UpstreamSpeed}
            "xconnect_id" = ${XconnectId}
            "pp_info" = ${PpInfo}
            "description" = ${Description}
            "mark_connected" = ${MarkConnected}
            "cable" = ${Cable}
            "cable_end" = ${CableEnd}
            "link_peers" = ${LinkPeers}
            "link_peers_type" = ${LinkPeersType}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "_occupied" = ${Occupied}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CircuitTermination<PSCustomObject>

.DESCRIPTION

Convert from JSON to CircuitTermination<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CircuitTermination<PSCustomObject>
#>
function ConvertFrom-JsonToCircuitTermination {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CircuitTermination' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CircuitTermination
        $AllProperties = ("id", "url", "display", "circuit", "term_side", "site", "provider_network", "port_speed", "upstream_speed", "xconnect_id", "pp_info", "description", "mark_connected", "cable", "cable_end", "link_peers", "link_peers_type", "tags", "custom_fields", "created", "last_updated", "_occupied")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "circuit"))) {
            throw "Error! JSON cannot be serialized due to the required property 'circuit' missing."
        } else {
            $Circuit = $JsonParameters.PSobject.Properties["circuit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "term_side"))) {
            throw "Error! JSON cannot be serialized due to the required property 'term_side' missing."
        } else {
            $TermSide = $JsonParameters.PSobject.Properties["term_side"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cable"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cable' missing."
        } else {
            $Cable = $JsonParameters.PSobject.Properties["cable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cable_end"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cable_end' missing."
        } else {
            $CableEnd = $JsonParameters.PSobject.Properties["cable_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_peers"))) {
            throw "Error! JSON cannot be serialized due to the required property 'link_peers' missing."
        } else {
            $LinkPeers = $JsonParameters.PSobject.Properties["link_peers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_peers_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'link_peers_type' missing."
        } else {
            $LinkPeersType = $JsonParameters.PSobject.Properties["link_peers_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_occupied"))) {
            throw "Error! JSON cannot be serialized due to the required property '_occupied' missing."
        } else {
            $Occupied = $JsonParameters.PSobject.Properties["_occupied"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site"))) { #optional property not found
            $Site = $null
        } else {
            $Site = $JsonParameters.PSobject.Properties["site"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provider_network"))) { #optional property not found
            $ProviderNetwork = $null
        } else {
            $ProviderNetwork = $JsonParameters.PSobject.Properties["provider_network"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port_speed"))) { #optional property not found
            $PortSpeed = $null
        } else {
            $PortSpeed = $JsonParameters.PSobject.Properties["port_speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "upstream_speed"))) { #optional property not found
            $UpstreamSpeed = $null
        } else {
            $UpstreamSpeed = $JsonParameters.PSobject.Properties["upstream_speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "xconnect_id"))) { #optional property not found
            $XconnectId = $null
        } else {
            $XconnectId = $JsonParameters.PSobject.Properties["xconnect_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "pp_info"))) { #optional property not found
            $PpInfo = $null
        } else {
            $PpInfo = $JsonParameters.PSobject.Properties["pp_info"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mark_connected"))) { #optional property not found
            $MarkConnected = $null
        } else {
            $MarkConnected = $JsonParameters.PSobject.Properties["mark_connected"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "circuit" = ${Circuit}
            "term_side" = ${TermSide}
            "site" = ${Site}
            "provider_network" = ${ProviderNetwork}
            "port_speed" = ${PortSpeed}
            "upstream_speed" = ${UpstreamSpeed}
            "xconnect_id" = ${XconnectId}
            "pp_info" = ${PpInfo}
            "description" = ${Description}
            "mark_connected" = ${MarkConnected}
            "cable" = ${Cable}
            "cable_end" = ${CableEnd}
            "link_peers" = ${LinkPeers}
            "link_peers_type" = ${LinkPeersType}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "_occupied" = ${Occupied}
        }

        return $PSO
    }

}

