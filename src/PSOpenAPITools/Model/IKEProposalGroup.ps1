#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Value
* `1` - Group 1 * `2` - Group 2 * `5` - Group 5 * `14` - Group 14 * `15` - Group 15 * `16` - Group 16 * `17` - Group 17 * `18` - Group 18 * `19` - Group 19 * `20` - Group 20 * `21` - Group 21 * `22` - Group 22 * `23` - Group 23 * `24` - Group 24 * `25` - Group 25 * `26` - Group 26 * `27` - Group 27 * `28` - Group 28 * `29` - Group 29 * `30` - Group 30 * `31` - Group 31 * `32` - Group 32 * `33` - Group 33 * `34` - Group 34
.PARAMETER Label
No description available.
.OUTPUTS

IKEProposalGroup<PSCustomObject>
#>

function Initialize-IKEProposalGroup {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("1", "2", "5", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34")]
        [System.Nullable[Int32]]
        ${Value},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Group 1", "Group 2", "Group 5", "Group 14", "Group 15", "Group 16", "Group 17", "Group 18", "Group 19", "Group 20", "Group 21", "Group 22", "Group 23", "Group 24", "Group 25", "Group 26", "Group 27", "Group 28", "Group 29", "Group 30", "Group 31", "Group 32", "Group 33", "Group 34")]
        [String]
        ${Label}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => IKEProposalGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "label" = ${Label}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to IKEProposalGroup<PSCustomObject>

.DESCRIPTION

Convert from JSON to IKEProposalGroup<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

IKEProposalGroup<PSCustomObject>
#>
function ConvertFrom-JsonToIKEProposalGroup {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => IKEProposalGroup' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in IKEProposalGroup
        $AllProperties = ("value", "label")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "label" = ${Label}
        }

        return $PSO
    }

}

