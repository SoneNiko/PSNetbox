#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Name
No description available.
.PARAMETER Weight
No description available.
.PARAMETER Description
No description available.
.PARAMETER IsActive
No description available.
.PARAMETER Regions
No description available.
.PARAMETER SiteGroups
No description available.
.PARAMETER Sites
No description available.
.PARAMETER Locations
No description available.
.PARAMETER DeviceTypes
No description available.
.PARAMETER Roles
No description available.
.PARAMETER Platforms
No description available.
.PARAMETER ClusterTypes
No description available.
.PARAMETER ClusterGroups
No description available.
.PARAMETER Clusters
No description available.
.PARAMETER TenantGroups
No description available.
.PARAMETER Tenants
No description available.
.PARAMETER Tags
No description available.
.PARAMETER DataSource
No description available.
.PARAMETER DataPath
Path to remote file (relative to data source root)
.PARAMETER DataFile
No description available.
.PARAMETER DataSynced
No description available.
.PARAMETER VarData
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.OUTPUTS

ConfigContext<PSCustomObject>
#>

function Initialize-ConfigContext {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Weight},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsActive},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Regions},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${SiteGroups},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Sites},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Locations},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${DeviceTypes},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Roles},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Platforms},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ClusterTypes},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ClusterGroups},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Clusters},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${TenantGroups},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Tenants},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${Tags},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DataSource},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataPath},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DataFile},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataSynced},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${VarData},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ConfigContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if ($Weight -and $Weight -gt 32767) {
          throw "invalid value for 'Weight', must be smaller than or equal to 32767."
        }

        if ($Weight -and $Weight -lt 0) {
          throw "invalid value for 'Weight', must be greater than or equal to 0."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $DataPath) {
            throw "invalid value for 'DataPath', 'DataPath' cannot be null."
        }

        if ($null -eq $DataFile) {
            throw "invalid value for 'DataFile', 'DataFile' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "weight" = ${Weight}
            "description" = ${Description}
            "is_active" = ${IsActive}
            "regions" = ${Regions}
            "site_groups" = ${SiteGroups}
            "sites" = ${Sites}
            "locations" = ${Locations}
            "device_types" = ${DeviceTypes}
            "roles" = ${Roles}
            "platforms" = ${Platforms}
            "cluster_types" = ${ClusterTypes}
            "cluster_groups" = ${ClusterGroups}
            "clusters" = ${Clusters}
            "tenant_groups" = ${TenantGroups}
            "tenants" = ${Tenants}
            "tags" = ${Tags}
            "data_source" = ${DataSource}
            "data_path" = ${DataPath}
            "data_file" = ${DataFile}
            "data_synced" = ${DataSynced}
            "data" = ${VarData}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConfigContext<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConfigContext<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConfigContext<PSCustomObject>
#>
function ConvertFrom-JsonToConfigContext {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ConfigContext' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ConfigContext
        $AllProperties = ("id", "url", "display", "name", "weight", "description", "is_active", "regions", "site_groups", "sites", "locations", "device_types", "roles", "platforms", "cluster_types", "cluster_groups", "clusters", "tenant_groups", "tenants", "tags", "data_source", "data_path", "data_file", "data_synced", "data", "created", "last_updated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_path"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data_path' missing."
        } else {
            $DataPath = $JsonParameters.PSobject.Properties["data_path"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_file"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data_file' missing."
        } else {
            $DataFile = $JsonParameters.PSobject.Properties["data_file"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_synced"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data_synced' missing."
        } else {
            $DataSynced = $JsonParameters.PSobject.Properties["data_synced"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data' missing."
        } else {
            $VarData = $JsonParameters.PSobject.Properties["data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_active"))) { #optional property not found
            $IsActive = $null
        } else {
            $IsActive = $JsonParameters.PSobject.Properties["is_active"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "regions"))) { #optional property not found
            $Regions = $null
        } else {
            $Regions = $JsonParameters.PSobject.Properties["regions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site_groups"))) { #optional property not found
            $SiteGroups = $null
        } else {
            $SiteGroups = $JsonParameters.PSobject.Properties["site_groups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sites"))) { #optional property not found
            $Sites = $null
        } else {
            $Sites = $JsonParameters.PSobject.Properties["sites"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "locations"))) { #optional property not found
            $Locations = $null
        } else {
            $Locations = $JsonParameters.PSobject.Properties["locations"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_types"))) { #optional property not found
            $DeviceTypes = $null
        } else {
            $DeviceTypes = $JsonParameters.PSobject.Properties["device_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roles"))) { #optional property not found
            $Roles = $null
        } else {
            $Roles = $JsonParameters.PSobject.Properties["roles"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "platforms"))) { #optional property not found
            $Platforms = $null
        } else {
            $Platforms = $JsonParameters.PSobject.Properties["platforms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cluster_types"))) { #optional property not found
            $ClusterTypes = $null
        } else {
            $ClusterTypes = $JsonParameters.PSobject.Properties["cluster_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cluster_groups"))) { #optional property not found
            $ClusterGroups = $null
        } else {
            $ClusterGroups = $JsonParameters.PSobject.Properties["cluster_groups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "clusters"))) { #optional property not found
            $Clusters = $null
        } else {
            $Clusters = $JsonParameters.PSobject.Properties["clusters"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant_groups"))) { #optional property not found
            $TenantGroups = $null
        } else {
            $TenantGroups = $JsonParameters.PSobject.Properties["tenant_groups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenants"))) { #optional property not found
            $Tenants = $null
        } else {
            $Tenants = $JsonParameters.PSobject.Properties["tenants"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_source"))) { #optional property not found
            $DataSource = $null
        } else {
            $DataSource = $JsonParameters.PSobject.Properties["data_source"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "weight" = ${Weight}
            "description" = ${Description}
            "is_active" = ${IsActive}
            "regions" = ${Regions}
            "site_groups" = ${SiteGroups}
            "sites" = ${Sites}
            "locations" = ${Locations}
            "device_types" = ${DeviceTypes}
            "roles" = ${Roles}
            "platforms" = ${Platforms}
            "cluster_types" = ${ClusterTypes}
            "cluster_groups" = ${ClusterGroups}
            "clusters" = ${Clusters}
            "tenant_groups" = ${TenantGroups}
            "tenants" = ${Tenants}
            "tags" = ${Tags}
            "data_source" = ${DataSource}
            "data_path" = ${DataPath}
            "data_file" = ${DataFile}
            "data_synced" = ${DataSynced}
            "data" = ${VarData}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
        }

        return $PSO
    }

}

