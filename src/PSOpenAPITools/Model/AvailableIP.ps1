#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Representation of an IP address which does not exist in the database.

.PARAMETER Family
No description available.
.PARAMETER Address
No description available.
.PARAMETER Vrf
No description available.
.PARAMETER Description
No description available.
.OUTPUTS

AvailableIP<PSCustomObject>
#>

function Initialize-AvailableIP {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Family},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Address},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Vrf},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AvailableIP' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Address) {
            throw "invalid value for 'Address', 'Address' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "family" = ${Family}
            "address" = ${Address}
            "vrf" = ${Vrf}
            "description" = ${Description}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AvailableIP<PSCustomObject>

.DESCRIPTION

Convert from JSON to AvailableIP<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AvailableIP<PSCustomObject>
#>
function ConvertFrom-JsonToAvailableIP {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AvailableIP' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AvailableIP
        $AllProperties = ("family", "address", "vrf", "description")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'family' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "family"))) {
            throw "Error! JSON cannot be serialized due to the required property 'family' missing."
        } else {
            $Family = $JsonParameters.PSobject.Properties["family"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "address"))) {
            throw "Error! JSON cannot be serialized due to the required property 'address' missing."
        } else {
            $Address = $JsonParameters.PSobject.Properties["address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vrf"))) {
            throw "Error! JSON cannot be serialized due to the required property 'vrf' missing."
        } else {
            $Vrf = $JsonParameters.PSobject.Properties["vrf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "family" = ${Family}
            "address" = ${Address}
            "vrf" = ${Vrf}
            "description" = ${Description}
        }

        return $PSO
    }

}

