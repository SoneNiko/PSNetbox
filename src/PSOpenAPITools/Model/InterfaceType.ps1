#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Value
* `virtual` - Virtual * `bridge` - Bridge * `lag` - Link Aggregation Group (LAG) * `100base-fx` - 100BASE-FX (10/100ME FIBER) * `100base-lfx` - 100BASE-LFX (10/100ME FIBER) * `100base-tx` - 100BASE-TX (10/100ME) * `100base-t1` - 100BASE-T1 (10/100ME Single Pair) * `1000base-t` - 1000BASE-T (1GE) * `2.5gbase-t` - 2.5GBASE-T (2.5GE) * `5gbase-t` - 5GBASE-T (5GE) * `10gbase-t` - 10GBASE-T (10GE) * `10gbase-cx4` - 10GBASE-CX4 (10GE) * `1000base-x-gbic` - GBIC (1GE) * `1000base-x-sfp` - SFP (1GE) * `10gbase-x-sfpp` - SFP+ (10GE) * `10gbase-x-xfp` - XFP (10GE) * `10gbase-x-xenpak` - XENPAK (10GE) * `10gbase-x-x2` - X2 (10GE) * `25gbase-x-sfp28` - SFP28 (25GE) * `50gbase-x-sfp56` - SFP56 (50GE) * `40gbase-x-qsfpp` - QSFP+ (40GE) * `50gbase-x-sfp28` - QSFP28 (50GE) * `100gbase-x-cfp` - CFP (100GE) * `100gbase-x-cfp2` - CFP2 (100GE) * `200gbase-x-cfp2` - CFP2 (200GE) * `400gbase-x-cfp2` - CFP2 (400GE) * `100gbase-x-cfp4` - CFP4 (100GE) * `100gbase-x-cxp` - CXP (100GE) * `100gbase-x-cpak` - Cisco CPAK (100GE) * `100gbase-x-dsfp` - DSFP (100GE) * `100gbase-x-sfpdd` - SFP-DD (100GE) * `100gbase-x-qsfp28` - QSFP28 (100GE) * `100gbase-x-qsfpdd` - QSFP-DD (100GE) * `200gbase-x-qsfp56` - QSFP56 (200GE) * `200gbase-x-qsfpdd` - QSFP-DD (200GE) * `400gbase-x-qsfp112` - QSFP112 (400GE) * `400gbase-x-qsfpdd` - QSFP-DD (400GE) * `400gbase-x-osfp` - OSFP (400GE) * `400gbase-x-osfp-rhs` - OSFP-RHS (400GE) * `400gbase-x-cdfp` - CDFP (400GE) * `400gbase-x-cfp8` - CPF8 (400GE) * `800gbase-x-qsfpdd` - QSFP-DD (800GE) * `800gbase-x-osfp` - OSFP (800GE) * `1000base-kx` - 1000BASE-KX (1GE) * `10gbase-kr` - 10GBASE-KR (10GE) * `10gbase-kx4` - 10GBASE-KX4 (10GE) * `25gbase-kr` - 25GBASE-KR (25GE) * `40gbase-kr4` - 40GBASE-KR4 (40GE) * `50gbase-kr` - 50GBASE-KR (50GE) * `100gbase-kp4` - 100GBASE-KP4 (100GE) * `100gbase-kr2` - 100GBASE-KR2 (100GE) * `100gbase-kr4` - 100GBASE-KR4 (100GE) * `ieee802.11a` - IEEE 802.11a * `ieee802.11g` - IEEE 802.11b/g * `ieee802.11n` - IEEE 802.11n * `ieee802.11ac` - IEEE 802.11ac * `ieee802.11ad` - IEEE 802.11ad * `ieee802.11ax` - IEEE 802.11ax * `ieee802.11ay` - IEEE 802.11ay * `ieee802.15.1` - IEEE 802.15.1 (Bluetooth) * `other-wireless` - Other (Wireless) * `gsm` - GSM * `cdma` - CDMA * `lte` - LTE * `sonet-oc3` - OC-3/STM-1 * `sonet-oc12` - OC-12/STM-4 * `sonet-oc48` - OC-48/STM-16 * `sonet-oc192` - OC-192/STM-64 * `sonet-oc768` - OC-768/STM-256 * `sonet-oc1920` - OC-1920/STM-640 * `sonet-oc3840` - OC-3840/STM-1234 * `1gfc-sfp` - SFP (1GFC) * `2gfc-sfp` - SFP (2GFC) * `4gfc-sfp` - SFP (4GFC) * `8gfc-sfpp` - SFP+ (8GFC) * `16gfc-sfpp` - SFP+ (16GFC) * `32gfc-sfp28` - SFP28 (32GFC) * `32gfc-sfpp` - SFP+ (32GFC) * `64gfc-qsfpp` - QSFP+ (64GFC) * `64gfc-sfpdd` - SFP-DD (64GFC) * `64gfc-sfpp` - SFP+ (64GFC) * `128gfc-qsfp28` - QSFP28 (128GFC) * `infiniband-sdr` - SDR (2 Gbps) * `infiniband-ddr` - DDR (4 Gbps) * `infiniband-qdr` - QDR (8 Gbps) * `infiniband-fdr10` - FDR10 (10 Gbps) * `infiniband-fdr` - FDR (13.5 Gbps) * `infiniband-edr` - EDR (25 Gbps) * `infiniband-hdr` - HDR (50 Gbps) * `infiniband-ndr` - NDR (100 Gbps) * `infiniband-xdr` - XDR (250 Gbps) * `t1` - T1 (1.544 Mbps) * `e1` - E1 (2.048 Mbps) * `t3` - T3 (45 Mbps) * `e3` - E3 (34 Mbps) * `xdsl` - xDSL * `docsis` - DOCSIS * `gpon` - GPON (2.5 Gbps / 1.25 Gps) * `xg-pon` - XG-PON (10 Gbps / 2.5 Gbps) * `xgs-pon` - XGS-PON (10 Gbps) * `ng-pon2` - NG-PON2 (TWDM-PON) (4x10 Gbps) * `epon` - EPON (1 Gbps) * `10g-epon` - 10G-EPON (10 Gbps) * `cisco-stackwise` - Cisco StackWise * `cisco-stackwise-plus` - Cisco StackWise Plus * `cisco-flexstack` - Cisco FlexStack * `cisco-flexstack-plus` - Cisco FlexStack Plus * `cisco-stackwise-80` - Cisco StackWise-80 * `cisco-stackwise-160` - Cisco StackWise-160 * `cisco-stackwise-320` - Cisco StackWise-320 * `cisco-stackwise-480` - Cisco StackWise-480 * `cisco-stackwise-1t` - Cisco StackWise-1T * `juniper-vcp` - Juniper VCP * `extreme-summitstack` - Extreme SummitStack * `extreme-summitstack-128` - Extreme SummitStack-128 * `extreme-summitstack-256` - Extreme SummitStack-256 * `extreme-summitstack-512` - Extreme SummitStack-512 * `other` - Other
.PARAMETER Label
No description available.
.OUTPUTS

InterfaceType<PSCustomObject>
#>

function Initialize-InterfaceType {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("virtual", "bridge", "lag", "100base-fx", "100base-lfx", "100base-tx", "100base-t1", "1000base-t", "2.5gbase-t", "5gbase-t", "10gbase-t", "10gbase-cx4", "1000base-x-gbic", "1000base-x-sfp", "10gbase-x-sfpp", "10gbase-x-xfp", "10gbase-x-xenpak", "10gbase-x-x2", "25gbase-x-sfp28", "50gbase-x-sfp56", "40gbase-x-qsfpp", "50gbase-x-sfp28", "100gbase-x-cfp", "100gbase-x-cfp2", "200gbase-x-cfp2", "400gbase-x-cfp2", "100gbase-x-cfp4", "100gbase-x-cxp", "100gbase-x-cpak", "100gbase-x-dsfp", "100gbase-x-sfpdd", "100gbase-x-qsfp28", "100gbase-x-qsfpdd", "200gbase-x-qsfp56", "200gbase-x-qsfpdd", "400gbase-x-qsfp112", "400gbase-x-qsfpdd", "400gbase-x-osfp", "400gbase-x-osfp-rhs", "400gbase-x-cdfp", "400gbase-x-cfp8", "800gbase-x-qsfpdd", "800gbase-x-osfp", "1000base-kx", "10gbase-kr", "10gbase-kx4", "25gbase-kr", "40gbase-kr4", "50gbase-kr", "100gbase-kp4", "100gbase-kr2", "100gbase-kr4", "ieee802.11a", "ieee802.11g", "ieee802.11n", "ieee802.11ac", "ieee802.11ad", "ieee802.11ax", "ieee802.11ay", "ieee802.15.1", "other-wireless", "gsm", "cdma", "lte", "sonet-oc3", "sonet-oc12", "sonet-oc48", "sonet-oc192", "sonet-oc768", "sonet-oc1920", "sonet-oc3840", "1gfc-sfp", "2gfc-sfp", "4gfc-sfp", "8gfc-sfpp", "16gfc-sfpp", "32gfc-sfp28", "32gfc-sfpp", "64gfc-qsfpp", "64gfc-sfpdd", "64gfc-sfpp", "128gfc-qsfp28", "infiniband-sdr", "infiniband-ddr", "infiniband-qdr", "infiniband-fdr10", "infiniband-fdr", "infiniband-edr", "infiniband-hdr", "infiniband-ndr", "infiniband-xdr", "t1", "e1", "t3", "e3", "xdsl", "docsis", "gpon", "xg-pon", "xgs-pon", "ng-pon2", "epon", "10g-epon", "cisco-stackwise", "cisco-stackwise-plus", "cisco-flexstack", "cisco-flexstack-plus", "cisco-stackwise-80", "cisco-stackwise-160", "cisco-stackwise-320", "cisco-stackwise-480", "cisco-stackwise-1t", "juniper-vcp", "extreme-summitstack", "extreme-summitstack-128", "extreme-summitstack-256", "extreme-summitstack-512", "other")]
        [String]
        ${Value},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("Virtual", "Bridge", "Link Aggregation Group (LAG)", "100BASE-FX (10/100ME FIBER)", "100BASE-LFX (10/100ME FIBER)", "100BASE-TX (10/100ME)", "100BASE-T1 (10/100ME Single Pair)", "1000BASE-T (1GE)", "2.5GBASE-T (2.5GE)", "5GBASE-T (5GE)", "10GBASE-T (10GE)", "10GBASE-CX4 (10GE)", "GBIC (1GE)", "SFP (1GE)", "SFP+ (10GE)", "XFP (10GE)", "XENPAK (10GE)", "X2 (10GE)", "SFP28 (25GE)", "SFP56 (50GE)", "QSFP+ (40GE)", "QSFP28 (50GE)", "CFP (100GE)", "CFP2 (100GE)", "CFP2 (200GE)", "CFP2 (400GE)", "CFP4 (100GE)", "CXP (100GE)", "Cisco CPAK (100GE)", "DSFP (100GE)", "SFP-DD (100GE)", "QSFP28 (100GE)", "QSFP-DD (100GE)", "QSFP56 (200GE)", "QSFP-DD (200GE)", "QSFP112 (400GE)", "QSFP-DD (400GE)", "OSFP (400GE)", "OSFP-RHS (400GE)", "CDFP (400GE)", "CPF8 (400GE)", "QSFP-DD (800GE)", "OSFP (800GE)", "1000BASE-KX (1GE)", "10GBASE-KR (10GE)", "10GBASE-KX4 (10GE)", "25GBASE-KR (25GE)", "40GBASE-KR4 (40GE)", "50GBASE-KR (50GE)", "100GBASE-KP4 (100GE)", "100GBASE-KR2 (100GE)", "100GBASE-KR4 (100GE)", "IEEE 802.11a", "IEEE 802.11b/g", "IEEE 802.11n", "IEEE 802.11ac", "IEEE 802.11ad", "IEEE 802.11ax", "IEEE 802.11ay", "IEEE 802.15.1 (Bluetooth)", "Other (Wireless)", "GSM", "CDMA", "LTE", "OC-3/STM-1", "OC-12/STM-4", "OC-48/STM-16", "OC-192/STM-64", "OC-768/STM-256", "OC-1920/STM-640", "OC-3840/STM-1234", "SFP (1GFC)", "SFP (2GFC)", "SFP (4GFC)", "SFP+ (8GFC)", "SFP+ (16GFC)", "SFP28 (32GFC)", "SFP+ (32GFC)", "QSFP+ (64GFC)", "SFP-DD (64GFC)", "SFP+ (64GFC)", "QSFP28 (128GFC)", "SDR (2 Gbps)", "DDR (4 Gbps)", "QDR (8 Gbps)", "FDR10 (10 Gbps)", "FDR (13.5 Gbps)", "EDR (25 Gbps)", "HDR (50 Gbps)", "NDR (100 Gbps)", "XDR (250 Gbps)", "T1 (1.544 Mbps)", "E1 (2.048 Mbps)", "T3 (45 Mbps)", "E3 (34 Mbps)", "xDSL", "DOCSIS", "GPON (2.5 Gbps / 1.25 Gps)", "XG-PON (10 Gbps / 2.5 Gbps)", "XGS-PON (10 Gbps)", "NG-PON2 (TWDM-PON) (4x10 Gbps)", "EPON (1 Gbps)", "10G-EPON (10 Gbps)", "Cisco StackWise", "Cisco StackWise Plus", "Cisco FlexStack", "Cisco FlexStack Plus", "Cisco StackWise-80", "Cisco StackWise-160", "Cisco StackWise-320", "Cisco StackWise-480", "Cisco StackWise-1T", "Juniper VCP", "Extreme SummitStack", "Extreme SummitStack-128", "Extreme SummitStack-256", "Extreme SummitStack-512", "Other")]
        [String]
        ${Label}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => InterfaceType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "label" = ${Label}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InterfaceType<PSCustomObject>

.DESCRIPTION

Convert from JSON to InterfaceType<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InterfaceType<PSCustomObject>
#>
function ConvertFrom-JsonToInterfaceType {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => InterfaceType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in InterfaceType
        $AllProperties = ("value", "label")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        $PSO = [PSCustomObject]@{
            "value" = ${Value}
            "label" = ${Label}
        }

        return $PSO
    }

}

