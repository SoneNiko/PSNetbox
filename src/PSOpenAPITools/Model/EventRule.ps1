#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER ContentTypes
No description available.
.PARAMETER Name
No description available.
.PARAMETER TypeCreate
Triggers when a matching object is created.
.PARAMETER TypeUpdate
Triggers when a matching object is updated.
.PARAMETER TypeDelete
Triggers when a matching object is deleted.
.PARAMETER TypeJobStart
Triggers when a job for a matching object is started.
.PARAMETER TypeJobEnd
Triggers when a job for a matching object terminates.
.PARAMETER Enabled
No description available.
.PARAMETER Conditions
A set of conditions which determine whether the event will be generated.
.PARAMETER ActionType
No description available.
.PARAMETER ActionObjectType
No description available.
.PARAMETER ActionObjectId
No description available.
.PARAMETER ActionObject
No description available.
.PARAMETER Description
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER Tags
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.OUTPUTS

EventRule<PSCustomObject>
#>

function Initialize-EventRule {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ContentTypes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TypeCreate},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TypeUpdate},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TypeDelete},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TypeJobStart},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TypeJobEnd},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Conditions},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ActionType},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActionObjectType},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ActionObjectId},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${ActionObject},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => EventRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $ContentTypes) {
            throw "invalid value for 'ContentTypes', 'ContentTypes' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 150) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 150."
        }

        if ($null -eq $ActionType) {
            throw "invalid value for 'ActionType', 'ActionType' cannot be null."
        }

        if ($null -eq $ActionObjectType) {
            throw "invalid value for 'ActionObjectType', 'ActionObjectType' cannot be null."
        }

        if ($ActionObjectId -and $ActionObjectId -gt 9223372036854775807) {
          throw "invalid value for 'ActionObjectId', must be smaller than or equal to 9223372036854775807."
        }

        if ($ActionObjectId -and $ActionObjectId -lt 0) {
          throw "invalid value for 'ActionObjectId', must be greater than or equal to 0."
        }

        if ($null -eq $ActionObject) {
            throw "invalid value for 'ActionObject', 'ActionObject' cannot be null."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "content_types" = ${ContentTypes}
            "name" = ${Name}
            "type_create" = ${TypeCreate}
            "type_update" = ${TypeUpdate}
            "type_delete" = ${TypeDelete}
            "type_job_start" = ${TypeJobStart}
            "type_job_end" = ${TypeJobEnd}
            "enabled" = ${Enabled}
            "conditions" = ${Conditions}
            "action_type" = ${ActionType}
            "action_object_type" = ${ActionObjectType}
            "action_object_id" = ${ActionObjectId}
            "action_object" = ${ActionObject}
            "description" = ${Description}
            "custom_fields" = ${CustomFields}
            "tags" = ${Tags}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to EventRule<PSCustomObject>

.DESCRIPTION

Convert from JSON to EventRule<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

EventRule<PSCustomObject>
#>
function ConvertFrom-JsonToEventRule {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => EventRule' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in EventRule
        $AllProperties = ("id", "url", "display", "content_types", "name", "type_create", "type_update", "type_delete", "type_job_start", "type_job_end", "enabled", "conditions", "action_type", "action_object_type", "action_object_id", "action_object", "description", "custom_fields", "tags", "created", "last_updated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content_types"))) {
            throw "Error! JSON cannot be serialized due to the required property 'content_types' missing."
        } else {
            $ContentTypes = $JsonParameters.PSobject.Properties["content_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "action_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'action_type' missing."
        } else {
            $ActionType = $JsonParameters.PSobject.Properties["action_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "action_object_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'action_object_type' missing."
        } else {
            $ActionObjectType = $JsonParameters.PSobject.Properties["action_object_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "action_object"))) {
            throw "Error! JSON cannot be serialized due to the required property 'action_object' missing."
        } else {
            $ActionObject = $JsonParameters.PSobject.Properties["action_object"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type_create"))) { #optional property not found
            $TypeCreate = $null
        } else {
            $TypeCreate = $JsonParameters.PSobject.Properties["type_create"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type_update"))) { #optional property not found
            $TypeUpdate = $null
        } else {
            $TypeUpdate = $JsonParameters.PSobject.Properties["type_update"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type_delete"))) { #optional property not found
            $TypeDelete = $null
        } else {
            $TypeDelete = $JsonParameters.PSobject.Properties["type_delete"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type_job_start"))) { #optional property not found
            $TypeJobStart = $null
        } else {
            $TypeJobStart = $JsonParameters.PSobject.Properties["type_job_start"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type_job_end"))) { #optional property not found
            $TypeJobEnd = $null
        } else {
            $TypeJobEnd = $JsonParameters.PSobject.Properties["type_job_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "conditions"))) { #optional property not found
            $Conditions = $null
        } else {
            $Conditions = $JsonParameters.PSobject.Properties["conditions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "action_object_id"))) { #optional property not found
            $ActionObjectId = $null
        } else {
            $ActionObjectId = $JsonParameters.PSobject.Properties["action_object_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "content_types" = ${ContentTypes}
            "name" = ${Name}
            "type_create" = ${TypeCreate}
            "type_update" = ${TypeUpdate}
            "type_delete" = ${TypeDelete}
            "type_job_start" = ${TypeJobStart}
            "type_job_end" = ${TypeJobEnd}
            "enabled" = ${Enabled}
            "conditions" = ${Conditions}
            "action_type" = ${ActionType}
            "action_object_type" = ${ActionObjectType}
            "action_object_id" = ${ActionObjectId}
            "action_object" = ${ActionObject}
            "description" = ${Description}
            "custom_fields" = ${CustomFields}
            "tags" = ${Tags}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
        }

        return $PSO
    }

}

