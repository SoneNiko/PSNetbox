#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Cable
No description available.
.PARAMETER CableEnd
* `A` - A * `B` - B
.PARAMETER TerminationType
No description available.
.PARAMETER TerminationId
No description available.
.OUTPUTS

PatchedCableTerminationRequest<PSCustomObject>
#>

function Initialize-PatchedCableTerminationRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Cable},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("A", "B")]
        [String]
        ${CableEnd},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TerminationType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${TerminationId}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedCableTerminationRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($TerminationId -and $TerminationId -gt 9223372036854775807) {
          throw "invalid value for 'TerminationId', must be smaller than or equal to 9223372036854775807."
        }

        if ($TerminationId -and $TerminationId -lt 0) {
          throw "invalid value for 'TerminationId', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "cable" = ${Cable}
            "cable_end" = ${CableEnd}
            "termination_type" = ${TerminationType}
            "termination_id" = ${TerminationId}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedCableTerminationRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedCableTerminationRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedCableTerminationRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedCableTerminationRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedCableTerminationRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedCableTerminationRequest
        $AllProperties = ("cable", "cable_end", "termination_type", "termination_id")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cable"))) { #optional property not found
            $Cable = $null
        } else {
            $Cable = $JsonParameters.PSobject.Properties["cable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cable_end"))) { #optional property not found
            $CableEnd = $null
        } else {
            $CableEnd = $JsonParameters.PSobject.Properties["cable_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "termination_type"))) { #optional property not found
            $TerminationType = $null
        } else {
            $TerminationType = $JsonParameters.PSobject.Properties["termination_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "termination_id"))) { #optional property not found
            $TerminationId = $null
        } else {
            $TerminationId = $JsonParameters.PSobject.Properties["termination_id"].value
        }

        $PSO = [PSCustomObject]@{
            "cable" = ${Cable}
            "cable_end" = ${CableEnd}
            "termination_type" = ${TerminationType}
            "termination_id" = ${TerminationId}
        }

        return $PSO
    }

}

