#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER EncryptionAlgorithm
* `aes-128-cbc` - 128-bit AES (CBC) * `aes-128-gcm` - 128-bit AES (GCM) * `aes-192-cbc` - 192-bit AES (CBC) * `aes-192-gcm` - 192-bit AES (GCM) * `aes-256-cbc` - 256-bit AES (CBC) * `aes-256-gcm` - 256-bit AES (GCM) * `3des-cbc` - 3DES * `des-cbc` - DES
.PARAMETER AuthenticationAlgorithm
* `hmac-sha1` - SHA-1 HMAC * `hmac-sha256` - SHA-256 HMAC * `hmac-sha384` - SHA-384 HMAC * `hmac-sha512` - SHA-512 HMAC * `hmac-md5` - MD5 HMAC
.PARAMETER SaLifetimeSeconds
Security association lifetime (seconds)
.PARAMETER SaLifetimeData
Security association lifetime (in kilobytes)
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

WritableIPSecProposalRequest<PSCustomObject>
#>

function Initialize-WritableIPSecProposalRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("aes-128-cbc", "aes-128-gcm", "aes-192-cbc", "aes-192-gcm", "aes-256-cbc", "aes-256-gcm", "3des-cbc", "des-cbc", "")]
        [String]
        ${EncryptionAlgorithm},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512", "hmac-md5", "")]
        [String]
        ${AuthenticationAlgorithm},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SaLifetimeSeconds},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SaLifetimeData},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WritableIPSecProposalRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($SaLifetimeSeconds -and $SaLifetimeSeconds -gt 2147483647) {
          throw "invalid value for 'SaLifetimeSeconds', must be smaller than or equal to 2147483647."
        }

        if ($SaLifetimeSeconds -and $SaLifetimeSeconds -lt 0) {
          throw "invalid value for 'SaLifetimeSeconds', must be greater than or equal to 0."
        }

        if ($SaLifetimeData -and $SaLifetimeData -gt 2147483647) {
          throw "invalid value for 'SaLifetimeData', must be smaller than or equal to 2147483647."
        }

        if ($SaLifetimeData -and $SaLifetimeData -lt 0) {
          throw "invalid value for 'SaLifetimeData', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "encryption_algorithm" = ${EncryptionAlgorithm}
            "authentication_algorithm" = ${AuthenticationAlgorithm}
            "sa_lifetime_seconds" = ${SaLifetimeSeconds}
            "sa_lifetime_data" = ${SaLifetimeData}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WritableIPSecProposalRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to WritableIPSecProposalRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WritableIPSecProposalRequest<PSCustomObject>
#>
function ConvertFrom-JsonToWritableIPSecProposalRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WritableIPSecProposalRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WritableIPSecProposalRequest
        $AllProperties = ("name", "description", "encryption_algorithm", "authentication_algorithm", "sa_lifetime_seconds", "sa_lifetime_data", "comments", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "encryption_algorithm"))) { #optional property not found
            $EncryptionAlgorithm = $null
        } else {
            $EncryptionAlgorithm = $JsonParameters.PSobject.Properties["encryption_algorithm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authentication_algorithm"))) { #optional property not found
            $AuthenticationAlgorithm = $null
        } else {
            $AuthenticationAlgorithm = $JsonParameters.PSobject.Properties["authentication_algorithm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sa_lifetime_seconds"))) { #optional property not found
            $SaLifetimeSeconds = $null
        } else {
            $SaLifetimeSeconds = $JsonParameters.PSobject.Properties["sa_lifetime_seconds"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sa_lifetime_data"))) { #optional property not found
            $SaLifetimeData = $null
        } else {
            $SaLifetimeData = $JsonParameters.PSobject.Properties["sa_lifetime_data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "encryption_algorithm" = ${EncryptionAlgorithm}
            "authentication_algorithm" = ${AuthenticationAlgorithm}
            "sa_lifetime_seconds" = ${SaLifetimeSeconds}
            "sa_lifetime_data" = ${SaLifetimeData}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

