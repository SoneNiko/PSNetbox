#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER ContentTypes
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER TemplateCode
Jinja2 template code. The list of objects being exported is passed as a context variable named <code>queryset</code>.
.PARAMETER MimeType
Defaults to <code>text/plain; charset=utf-8</code>
.PARAMETER FileExtension
Extension to append to the rendered filename
.PARAMETER AsAttachment
Download file as attachment
.PARAMETER DataSource
Remote data source
.OUTPUTS

WritableExportTemplateRequest<PSCustomObject>
#>

function Initialize-WritableExportTemplateRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ContentTypes},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemplateCode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MimeType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileExtension},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AsAttachment},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DataSource}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WritableExportTemplateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $ContentTypes) {
            throw "invalid value for 'ContentTypes', 'ContentTypes' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $TemplateCode) {
            throw "invalid value for 'TemplateCode', 'TemplateCode' cannot be null."
        }

        if ($TemplateCode.length -lt 1) {
            throw "invalid value for 'TemplateCode', the character length must be great than or equal to 1."
        }

        if (!$MimeType -and $MimeType.length -gt 50) {
            throw "invalid value for 'MimeType', the character length must be smaller than or equal to 50."
        }

        if (!$FileExtension -and $FileExtension.length -gt 15) {
            throw "invalid value for 'FileExtension', the character length must be smaller than or equal to 15."
        }


        $PSO = [PSCustomObject]@{
            "content_types" = ${ContentTypes}
            "name" = ${Name}
            "description" = ${Description}
            "template_code" = ${TemplateCode}
            "mime_type" = ${MimeType}
            "file_extension" = ${FileExtension}
            "as_attachment" = ${AsAttachment}
            "data_source" = ${DataSource}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WritableExportTemplateRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to WritableExportTemplateRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WritableExportTemplateRequest<PSCustomObject>
#>
function ConvertFrom-JsonToWritableExportTemplateRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WritableExportTemplateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WritableExportTemplateRequest
        $AllProperties = ("content_types", "name", "description", "template_code", "mime_type", "file_extension", "as_attachment", "data_source")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'content_types' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content_types"))) {
            throw "Error! JSON cannot be serialized due to the required property 'content_types' missing."
        } else {
            $ContentTypes = $JsonParameters.PSobject.Properties["content_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "template_code"))) {
            throw "Error! JSON cannot be serialized due to the required property 'template_code' missing."
        } else {
            $TemplateCode = $JsonParameters.PSobject.Properties["template_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mime_type"))) { #optional property not found
            $MimeType = $null
        } else {
            $MimeType = $JsonParameters.PSobject.Properties["mime_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file_extension"))) { #optional property not found
            $FileExtension = $null
        } else {
            $FileExtension = $JsonParameters.PSobject.Properties["file_extension"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "as_attachment"))) { #optional property not found
            $AsAttachment = $null
        } else {
            $AsAttachment = $JsonParameters.PSobject.Properties["as_attachment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_source"))) { #optional property not found
            $DataSource = $null
        } else {
            $DataSource = $JsonParameters.PSobject.Properties["data_source"].value
        }

        $PSO = [PSCustomObject]@{
            "content_types" = ${ContentTypes}
            "name" = ${Name}
            "description" = ${Description}
            "template_code" = ${TemplateCode}
            "mime_type" = ${MimeType}
            "file_extension" = ${FileExtension}
            "as_attachment" = ${AsAttachment}
            "data_source" = ${DataSource}
        }

        return $PSO
    }

}

