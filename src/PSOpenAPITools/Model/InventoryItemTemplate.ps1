#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER DeviceType
No description available.
.PARAMETER Parent
No description available.
.PARAMETER Name
{module} is accepted as a substitution for the module bay position when attached to a module type.
.PARAMETER Label
Physical label
.PARAMETER Role
No description available.
.PARAMETER Manufacturer
No description available.
.PARAMETER PartId
Manufacturer-assigned part identifier
.PARAMETER Description
No description available.
.PARAMETER ComponentType
No description available.
.PARAMETER ComponentId
No description available.
.PARAMETER Component
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER Depth
No description available.
.OUTPUTS

InventoryItemTemplate<PSCustomObject>
#>

function Initialize-InventoryItemTemplate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DeviceType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Parent},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Role},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Manufacturer},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ComponentType},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ComponentId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Component},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Depth}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => InventoryItemTemplate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $DeviceType) {
            throw "invalid value for 'DeviceType', 'DeviceType' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 64) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 64."
        }

        if (!$Label -and $Label.length -gt 64) {
            throw "invalid value for 'Label', the character length must be smaller than or equal to 64."
        }

        if (!$PartId -and $PartId.length -gt 50) {
            throw "invalid value for 'PartId', the character length must be smaller than or equal to 50."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($ComponentId -and $ComponentId -gt 9223372036854775807) {
          throw "invalid value for 'ComponentId', must be smaller than or equal to 9223372036854775807."
        }

        if ($ComponentId -and $ComponentId -lt 0) {
          throw "invalid value for 'ComponentId', must be greater than or equal to 0."
        }

        if ($null -eq $Depth) {
            throw "invalid value for 'Depth', 'Depth' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "device_type" = ${DeviceType}
            "parent" = ${Parent}
            "name" = ${Name}
            "label" = ${Label}
            "role" = ${Role}
            "manufacturer" = ${Manufacturer}
            "part_id" = ${PartId}
            "description" = ${Description}
            "component_type" = ${ComponentType}
            "component_id" = ${ComponentId}
            "component" = ${Component}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "_depth" = ${Depth}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to InventoryItemTemplate<PSCustomObject>

.DESCRIPTION

Convert from JSON to InventoryItemTemplate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

InventoryItemTemplate<PSCustomObject>
#>
function ConvertFrom-JsonToInventoryItemTemplate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => InventoryItemTemplate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in InventoryItemTemplate
        $AllProperties = ("id", "url", "display", "device_type", "parent", "name", "label", "role", "manufacturer", "part_id", "description", "component_type", "component_id", "component", "created", "last_updated", "_depth")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device_type' missing."
        } else {
            $DeviceType = $JsonParameters.PSobject.Properties["device_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "component"))) {
            throw "Error! JSON cannot be serialized due to the required property 'component' missing."
        } else {
            $Component = $JsonParameters.PSobject.Properties["component"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_depth"))) {
            throw "Error! JSON cannot be serialized due to the required property '_depth' missing."
        } else {
            $Depth = $JsonParameters.PSobject.Properties["_depth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manufacturer"))) { #optional property not found
            $Manufacturer = $null
        } else {
            $Manufacturer = $JsonParameters.PSobject.Properties["manufacturer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "part_id"))) { #optional property not found
            $PartId = $null
        } else {
            $PartId = $JsonParameters.PSobject.Properties["part_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "component_type"))) { #optional property not found
            $ComponentType = $null
        } else {
            $ComponentType = $JsonParameters.PSobject.Properties["component_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "component_id"))) { #optional property not found
            $ComponentId = $null
        } else {
            $ComponentId = $JsonParameters.PSobject.Properties["component_id"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "device_type" = ${DeviceType}
            "parent" = ${Parent}
            "name" = ${Name}
            "label" = ${Label}
            "role" = ${Role}
            "manufacturer" = ${Manufacturer}
            "part_id" = ${PartId}
            "description" = ${Description}
            "component_type" = ${ComponentType}
            "component_id" = ${ComponentId}
            "component" = ${Component}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "_depth" = ${Depth}
        }

        return $PSO
    }

}

