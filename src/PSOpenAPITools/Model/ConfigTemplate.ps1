#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Introduces support for Tag assignment. Adds `tags` serialization, and handles tag assignment on create() and update().

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER EnvironmentParams
Any <a href=""https://jinja.palletsprojects.com/en/3.1.x/api/#jinja2.Environment"">additional parameters</a> to pass when constructing the Jinja2 environment.
.PARAMETER TemplateCode
Jinja2 template code.
.PARAMETER DataSource
No description available.
.PARAMETER DataPath
Path to remote file (relative to data source root)
.PARAMETER DataFile
No description available.
.PARAMETER DataSynced
No description available.
.PARAMETER Tags
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.OUTPUTS

ConfigTemplate<PSCustomObject>
#>

function Initialize-ConfigTemplate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${EnvironmentParams},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemplateCode},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DataSource},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataPath},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DataFile},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataSynced},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ConfigTemplate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $TemplateCode) {
            throw "invalid value for 'TemplateCode', 'TemplateCode' cannot be null."
        }

        if ($null -eq $DataPath) {
            throw "invalid value for 'DataPath', 'DataPath' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "description" = ${Description}
            "environment_params" = ${EnvironmentParams}
            "template_code" = ${TemplateCode}
            "data_source" = ${DataSource}
            "data_path" = ${DataPath}
            "data_file" = ${DataFile}
            "data_synced" = ${DataSynced}
            "tags" = ${Tags}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConfigTemplate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConfigTemplate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConfigTemplate<PSCustomObject>
#>
function ConvertFrom-JsonToConfigTemplate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ConfigTemplate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ConfigTemplate
        $AllProperties = ("id", "url", "display", "name", "description", "environment_params", "template_code", "data_source", "data_path", "data_file", "data_synced", "tags", "created", "last_updated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "template_code"))) {
            throw "Error! JSON cannot be serialized due to the required property 'template_code' missing."
        } else {
            $TemplateCode = $JsonParameters.PSobject.Properties["template_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_path"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data_path' missing."
        } else {
            $DataPath = $JsonParameters.PSobject.Properties["data_path"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_synced"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data_synced' missing."
        } else {
            $DataSynced = $JsonParameters.PSobject.Properties["data_synced"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "environment_params"))) { #optional property not found
            $EnvironmentParams = $null
        } else {
            $EnvironmentParams = $JsonParameters.PSobject.Properties["environment_params"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_source"))) { #optional property not found
            $DataSource = $null
        } else {
            $DataSource = $JsonParameters.PSobject.Properties["data_source"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_file"))) { #optional property not found
            $DataFile = $null
        } else {
            $DataFile = $JsonParameters.PSobject.Properties["data_file"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "description" = ${Description}
            "environment_params" = ${EnvironmentParams}
            "template_code" = ${TemplateCode}
            "data_source" = ${DataSource}
            "data_path" = ${DataPath}
            "data_file" = ${DataFile}
            "data_synced" = ${DataSynced}
            "tags" = ${Tags}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
        }

        return $PSO
    }

}

