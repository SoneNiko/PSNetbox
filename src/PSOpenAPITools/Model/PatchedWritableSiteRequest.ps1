#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Name
Full name of the site
.PARAMETER Slug
No description available.
.PARAMETER Status
* `planned` - Planned * `staging` - Staging * `active` - Active * `decommissioning` - Decommissioning * `retired` - Retired
.PARAMETER Region
No description available.
.PARAMETER Group
No description available.
.PARAMETER Tenant
No description available.
.PARAMETER Facility
Local facility ID or description
.PARAMETER TimeZone
No description available.
.PARAMETER Description
No description available.
.PARAMETER PhysicalAddress
Physical location of the building
.PARAMETER ShippingAddress
If different from the physical address
.PARAMETER Latitude
GPS coordinate in decimal format (xx.yyyyyy)
.PARAMETER Longitude
GPS coordinate in decimal format (xx.yyyyyy)
.PARAMETER Comments
No description available.
.PARAMETER Asns
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

PatchedWritableSiteRequest<PSCustomObject>
#>

function Initialize-PatchedWritableSiteRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[-a-zA-Z0-9_]+$")]
        [String]
        ${Slug},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("planned", "staging", "active", "decommissioning", "retired")]
        [String]
        ${Status},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Region},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Group},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Tenant},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Facility},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TimeZone},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PhysicalAddress},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ShippingAddress},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Latitude},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Longitude},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Asns},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableSiteRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if (!$Name -and $Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Slug -and $Slug.length -gt 100) {
            throw "invalid value for 'Slug', the character length must be smaller than or equal to 100."
        }

        if (!$Slug -and $Slug.length -lt 1) {
            throw "invalid value for 'Slug', the character length must be great than or equal to 1."
        }

        if (!$Facility -and $Facility.length -gt 50) {
            throw "invalid value for 'Facility', the character length must be smaller than or equal to 50."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if (!$PhysicalAddress -and $PhysicalAddress.length -gt 200) {
            throw "invalid value for 'PhysicalAddress', the character length must be smaller than or equal to 200."
        }

        if (!$ShippingAddress -and $ShippingAddress.length -gt 200) {
            throw "invalid value for 'ShippingAddress', the character length must be smaller than or equal to 200."
        }

        if ($Latitude -and $Latitude -ge 100) {
          throw "invalid value for 'Latitude', must be smaller than 100."
        }

        if ($Latitude -and $Latitude -le -100) {
          throw "invalid value for 'Latitude', must be greater than -100."
        }

        if ($Longitude -and $Longitude -ge 1000) {
          throw "invalid value for 'Longitude', must be smaller than 1000."
        }

        if ($Longitude -and $Longitude -le -1000) {
          throw "invalid value for 'Longitude', must be greater than -1000."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "slug" = ${Slug}
            "status" = ${Status}
            "region" = ${Region}
            "group" = ${Group}
            "tenant" = ${Tenant}
            "facility" = ${Facility}
            "time_zone" = ${TimeZone}
            "description" = ${Description}
            "physical_address" = ${PhysicalAddress}
            "shipping_address" = ${ShippingAddress}
            "latitude" = ${Latitude}
            "longitude" = ${Longitude}
            "comments" = ${Comments}
            "asns" = ${Asns}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableSiteRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableSiteRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableSiteRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableSiteRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableSiteRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableSiteRequest
        $AllProperties = ("name", "slug", "status", "region", "group", "tenant", "facility", "time_zone", "description", "physical_address", "shipping_address", "latitude", "longitude", "comments", "asns", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slug"))) { #optional property not found
            $Slug = $null
        } else {
            $Slug = $JsonParameters.PSobject.Properties["slug"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "region"))) { #optional property not found
            $Region = $null
        } else {
            $Region = $JsonParameters.PSobject.Properties["region"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group"))) { #optional property not found
            $Group = $null
        } else {
            $Group = $JsonParameters.PSobject.Properties["group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "facility"))) { #optional property not found
            $Facility = $null
        } else {
            $Facility = $JsonParameters.PSobject.Properties["facility"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time_zone"))) { #optional property not found
            $TimeZone = $null
        } else {
            $TimeZone = $JsonParameters.PSobject.Properties["time_zone"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "physical_address"))) { #optional property not found
            $PhysicalAddress = $null
        } else {
            $PhysicalAddress = $JsonParameters.PSobject.Properties["physical_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "shipping_address"))) { #optional property not found
            $ShippingAddress = $null
        } else {
            $ShippingAddress = $JsonParameters.PSobject.Properties["shipping_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "latitude"))) { #optional property not found
            $Latitude = $null
        } else {
            $Latitude = $JsonParameters.PSobject.Properties["latitude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "longitude"))) { #optional property not found
            $Longitude = $null
        } else {
            $Longitude = $JsonParameters.PSobject.Properties["longitude"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asns"))) { #optional property not found
            $Asns = $null
        } else {
            $Asns = $JsonParameters.PSobject.Properties["asns"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "slug" = ${Slug}
            "status" = ${Status}
            "region" = ${Region}
            "group" = ${Group}
            "tenant" = ${Tenant}
            "facility" = ${Facility}
            "time_zone" = ${TimeZone}
            "description" = ${Description}
            "physical_address" = ${PhysicalAddress}
            "shipping_address" = ${ShippingAddress}
            "latitude" = ${Latitude}
            "longitude" = ${Longitude}
            "comments" = ${Comments}
            "asns" = ${Asns}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

