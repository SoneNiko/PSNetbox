#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER User
No description available.
.PARAMETER Created
No description available.
.PARAMETER Expires
No description available.
.PARAMETER LastUsed
No description available.
.PARAMETER Key
No description available.
.PARAMETER WriteEnabled
Permit create/update/delete operations using this key
.PARAMETER Description
No description available.
.OUTPUTS

TokenProvision<PSCustomObject>
#>

function Initialize-TokenProvision {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${User},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${Created},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Expires},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${LastUsed},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${WriteEnabled},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TokenProvision' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $User) {
            throw "invalid value for 'User', 'User' cannot be null."
        }

        if ($null -eq $Created) {
            throw "invalid value for 'Created', 'Created' cannot be null."
        }

        if ($null -eq $LastUsed) {
            throw "invalid value for 'LastUsed', 'LastUsed' cannot be null."
        }

        if ($null -eq $Key) {
            throw "invalid value for 'Key', 'Key' cannot be null."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "user" = ${User}
            "created" = ${Created}
            "expires" = ${Expires}
            "last_used" = ${LastUsed}
            "key" = ${Key}
            "write_enabled" = ${WriteEnabled}
            "description" = ${Description}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TokenProvision<PSCustomObject>

.DESCRIPTION

Convert from JSON to TokenProvision<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TokenProvision<PSCustomObject>
#>
function ConvertFrom-JsonToTokenProvision {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TokenProvision' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TokenProvision
        $AllProperties = ("id", "url", "display", "user", "created", "expires", "last_used", "key", "write_enabled", "description")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) {
            throw "Error! JSON cannot be serialized due to the required property 'user' missing."
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_used"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_used' missing."
        } else {
            $LastUsed = $JsonParameters.PSobject.Properties["last_used"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) {
            throw "Error! JSON cannot be serialized due to the required property 'key' missing."
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expires"))) { #optional property not found
            $Expires = $null
        } else {
            $Expires = $JsonParameters.PSobject.Properties["expires"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "write_enabled"))) { #optional property not found
            $WriteEnabled = $null
        } else {
            $WriteEnabled = $JsonParameters.PSobject.Properties["write_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "user" = ${User}
            "created" = ${Created}
            "expires" = ${Expires}
            "last_used" = ${LastUsed}
            "key" = ${Key}
            "write_enabled" = ${WriteEnabled}
            "description" = ${Description}
        }

        return $PSO
    }

}

