#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER AuthenticationMethod
* `preshared-keys` - Pre-shared keys * `certificates` - Certificates * `rsa-signatures` - RSA signatures * `dsa-signatures` - DSA signatures
.PARAMETER EncryptionAlgorithm
* `aes-128-cbc` - 128-bit AES (CBC) * `aes-128-gcm` - 128-bit AES (GCM) * `aes-192-cbc` - 192-bit AES (CBC) * `aes-192-gcm` - 192-bit AES (GCM) * `aes-256-cbc` - 256-bit AES (CBC) * `aes-256-gcm` - 256-bit AES (GCM) * `3des-cbc` - 3DES * `des-cbc` - DES
.PARAMETER AuthenticationAlgorithm
* `hmac-sha1` - SHA-1 HMAC * `hmac-sha256` - SHA-256 HMAC * `hmac-sha384` - SHA-384 HMAC * `hmac-sha512` - SHA-512 HMAC * `hmac-md5` - MD5 HMAC
.PARAMETER Group
Diffie-Hellman group ID  * `1` - Group 1 * `2` - Group 2 * `5` - Group 5 * `14` - Group 14 * `15` - Group 15 * `16` - Group 16 * `17` - Group 17 * `18` - Group 18 * `19` - Group 19 * `20` - Group 20 * `21` - Group 21 * `22` - Group 22 * `23` - Group 23 * `24` - Group 24 * `25` - Group 25 * `26` - Group 26 * `27` - Group 27 * `28` - Group 28 * `29` - Group 29 * `30` - Group 30 * `31` - Group 31 * `32` - Group 32 * `33` - Group 33 * `34` - Group 34
.PARAMETER SaLifetime
Security association lifetime (in seconds)
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

WritableIKEProposalRequest<PSCustomObject>
#>

function Initialize-WritableIKEProposalRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("preshared-keys", "certificates", "rsa-signatures", "dsa-signatures")]
        [String]
        ${AuthenticationMethod},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("aes-128-cbc", "aes-128-gcm", "aes-192-cbc", "aes-192-gcm", "aes-256-cbc", "aes-256-gcm", "3des-cbc", "des-cbc")]
        [String]
        ${EncryptionAlgorithm},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("hmac-sha1", "hmac-sha256", "hmac-sha384", "hmac-sha512", "hmac-md5", "")]
        [String]
        ${AuthenticationAlgorithm},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("1", "2", "5", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34")]
        [Int32]
        ${Group},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SaLifetime},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WritableIKEProposalRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $AuthenticationMethod) {
            throw "invalid value for 'AuthenticationMethod', 'AuthenticationMethod' cannot be null."
        }

        if ($null -eq $EncryptionAlgorithm) {
            throw "invalid value for 'EncryptionAlgorithm', 'EncryptionAlgorithm' cannot be null."
        }

        if ($null -eq $Group) {
            throw "invalid value for 'Group', 'Group' cannot be null."
        }

        if ($Group -gt 32767) {
          throw "invalid value for 'Group', must be smaller than or equal to 32767."
        }

        if ($Group -lt 0) {
          throw "invalid value for 'Group', must be greater than or equal to 0."
        }

        if ($SaLifetime -and $SaLifetime -gt 2147483647) {
          throw "invalid value for 'SaLifetime', must be smaller than or equal to 2147483647."
        }

        if ($SaLifetime -and $SaLifetime -lt 0) {
          throw "invalid value for 'SaLifetime', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "authentication_method" = ${AuthenticationMethod}
            "encryption_algorithm" = ${EncryptionAlgorithm}
            "authentication_algorithm" = ${AuthenticationAlgorithm}
            "group" = ${Group}
            "sa_lifetime" = ${SaLifetime}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WritableIKEProposalRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to WritableIKEProposalRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WritableIKEProposalRequest<PSCustomObject>
#>
function ConvertFrom-JsonToWritableIKEProposalRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WritableIKEProposalRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WritableIKEProposalRequest
        $AllProperties = ("name", "description", "authentication_method", "encryption_algorithm", "authentication_algorithm", "group", "sa_lifetime", "comments", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authentication_method"))) {
            throw "Error! JSON cannot be serialized due to the required property 'authentication_method' missing."
        } else {
            $AuthenticationMethod = $JsonParameters.PSobject.Properties["authentication_method"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "encryption_algorithm"))) {
            throw "Error! JSON cannot be serialized due to the required property 'encryption_algorithm' missing."
        } else {
            $EncryptionAlgorithm = $JsonParameters.PSobject.Properties["encryption_algorithm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group"))) {
            throw "Error! JSON cannot be serialized due to the required property 'group' missing."
        } else {
            $Group = $JsonParameters.PSobject.Properties["group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "authentication_algorithm"))) { #optional property not found
            $AuthenticationAlgorithm = $null
        } else {
            $AuthenticationAlgorithm = $JsonParameters.PSobject.Properties["authentication_algorithm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sa_lifetime"))) { #optional property not found
            $SaLifetime = $null
        } else {
            $SaLifetime = $JsonParameters.PSobject.Properties["sa_lifetime"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "authentication_method" = ${AuthenticationMethod}
            "encryption_algorithm" = ${EncryptionAlgorithm}
            "authentication_algorithm" = ${AuthenticationAlgorithm}
            "group" = ${Group}
            "sa_lifetime" = ${SaLifetime}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

