#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Count
No description available.
.PARAMETER Next
No description available.
.PARAMETER Previous
No description available.
.PARAMETER Results
No description available.
.OUTPUTS

PaginatedRackUnitList<PSCustomObject>
#>

function Initialize-PaginatedRackUnitList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Count},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Next},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Previous},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Results}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PaginatedRackUnitList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "count" = ${Count}
            "next" = ${Next}
            "previous" = ${Previous}
            "results" = ${Results}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PaginatedRackUnitList<PSCustomObject>

.DESCRIPTION

Convert from JSON to PaginatedRackUnitList<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PaginatedRackUnitList<PSCustomObject>
#>
function ConvertFrom-JsonToPaginatedRackUnitList {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PaginatedRackUnitList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PaginatedRackUnitList
        $AllProperties = ("count", "next", "previous", "results")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count"))) { #optional property not found
            $Count = $null
        } else {
            $Count = $JsonParameters.PSobject.Properties["count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "next"))) { #optional property not found
            $Next = $null
        } else {
            $Next = $JsonParameters.PSobject.Properties["next"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "previous"))) { #optional property not found
            $Previous = $null
        } else {
            $Previous = $JsonParameters.PSobject.Properties["previous"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "results"))) { #optional property not found
            $Results = $null
        } else {
            $Results = $JsonParameters.PSobject.Properties["results"].value
        }

        $PSO = [PSCustomObject]@{
            "count" = ${Count}
            "next" = ${Next}
            "previous" = ${Previous}
            "results" = ${Results}
        }

        return $PSO
    }

}

