#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER User
No description available.
.PARAMETER Expires
No description available.
.PARAMETER LastUsed
No description available.
.PARAMETER Key
No description available.
.PARAMETER WriteEnabled
Permit create/update/delete operations using this key
.PARAMETER Description
No description available.
.OUTPUTS

PatchedWritableTokenRequest<PSCustomObject>
#>

function Initialize-PatchedWritableTokenRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${User},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Expires},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUsed},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Key},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${WriteEnabled},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableTokenRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Key -and $Key.length -gt 40) {
            throw "invalid value for 'Key', the character length must be smaller than or equal to 40."
        }

        if (!$Key -and $Key.length -lt 40) {
            throw "invalid value for 'Key', the character length must be great than or equal to 40."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "user" = ${User}
            "expires" = ${Expires}
            "last_used" = ${LastUsed}
            "key" = ${Key}
            "write_enabled" = ${WriteEnabled}
            "description" = ${Description}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableTokenRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableTokenRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableTokenRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableTokenRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableTokenRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableTokenRequest
        $AllProperties = ("user", "expires", "last_used", "key", "write_enabled", "description")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expires"))) { #optional property not found
            $Expires = $null
        } else {
            $Expires = $JsonParameters.PSobject.Properties["expires"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_used"))) { #optional property not found
            $LastUsed = $null
        } else {
            $LastUsed = $JsonParameters.PSobject.Properties["last_used"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "key"))) { #optional property not found
            $Key = $null
        } else {
            $Key = $JsonParameters.PSobject.Properties["key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "write_enabled"))) { #optional property not found
            $WriteEnabled = $null
        } else {
            $WriteEnabled = $JsonParameters.PSobject.Properties["write_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "user" = ${User}
            "expires" = ${Expires}
            "last_used" = ${LastUsed}
            "key" = ${Key}
            "write_enabled" = ${WriteEnabled}
            "description" = ${Description}
        }

        return $PSO
    }

}

