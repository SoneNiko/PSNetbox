#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER ContentType
No description available.
.PARAMETER ObjectId
No description available.
.PARAMETER Contact
No description available.
.PARAMETER Role
No description available.
.PARAMETER Priority
* `primary` - Primary * `secondary` - Secondary * `tertiary` - Tertiary * `inactive` - Inactive
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

PatchedWritableContactAssignmentRequest<PSCustomObject>
#>

function Initialize-PatchedWritableContactAssignmentRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ContentType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ObjectId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Contact},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Role},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("primary", "secondary", "tertiary", "inactive", "")]
        [String]
        ${Priority},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableContactAssignmentRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($ObjectId -and $ObjectId -gt 9223372036854775807) {
          throw "invalid value for 'ObjectId', must be smaller than or equal to 9223372036854775807."
        }

        if ($ObjectId -and $ObjectId -lt 0) {
          throw "invalid value for 'ObjectId', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "content_type" = ${ContentType}
            "object_id" = ${ObjectId}
            "contact" = ${Contact}
            "role" = ${Role}
            "priority" = ${Priority}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableContactAssignmentRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableContactAssignmentRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableContactAssignmentRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableContactAssignmentRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableContactAssignmentRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableContactAssignmentRequest
        $AllProperties = ("content_type", "object_id", "contact", "role", "priority", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content_type"))) { #optional property not found
            $ContentType = $null
        } else {
            $ContentType = $JsonParameters.PSobject.Properties["content_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object_id"))) { #optional property not found
            $ObjectId = $null
        } else {
            $ObjectId = $JsonParameters.PSobject.Properties["object_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "contact"))) { #optional property not found
            $Contact = $null
        } else {
            $Contact = $JsonParameters.PSobject.Properties["contact"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priority"))) { #optional property not found
            $Priority = $null
        } else {
            $Priority = $JsonParameters.PSobject.Properties["priority"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "content_type" = ${ContentType}
            "object_id" = ${ObjectId}
            "contact" = ${Contact}
            "role" = ${Role}
            "priority" = ${Priority}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

