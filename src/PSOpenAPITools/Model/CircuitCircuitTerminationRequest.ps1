#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a dictionary of attributes which can be used to uniquely identify the related object. This class should be subclassed to return a full representation of the related object on read.

.PARAMETER Site
No description available.
.PARAMETER ProviderNetwork
No description available.
.PARAMETER PortSpeed
Physical circuit speed
.PARAMETER UpstreamSpeed
Upstream speed, if different from port speed
.PARAMETER XconnectId
ID of the local cross-connect
.PARAMETER Description
No description available.
.OUTPUTS

CircuitCircuitTerminationRequest<PSCustomObject>
#>

function Initialize-CircuitCircuitTerminationRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Site},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ProviderNetwork},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PortSpeed},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${UpstreamSpeed},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${XconnectId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => CircuitCircuitTerminationRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($PortSpeed -and $PortSpeed -gt 2147483647) {
          throw "invalid value for 'PortSpeed', must be smaller than or equal to 2147483647."
        }

        if ($PortSpeed -and $PortSpeed -lt 0) {
          throw "invalid value for 'PortSpeed', must be greater than or equal to 0."
        }

        if ($UpstreamSpeed -and $UpstreamSpeed -gt 2147483647) {
          throw "invalid value for 'UpstreamSpeed', must be smaller than or equal to 2147483647."
        }

        if ($UpstreamSpeed -and $UpstreamSpeed -lt 0) {
          throw "invalid value for 'UpstreamSpeed', must be greater than or equal to 0."
        }

        if (!$XconnectId -and $XconnectId.length -gt 50) {
            throw "invalid value for 'XconnectId', the character length must be smaller than or equal to 50."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "site" = ${Site}
            "provider_network" = ${ProviderNetwork}
            "port_speed" = ${PortSpeed}
            "upstream_speed" = ${UpstreamSpeed}
            "xconnect_id" = ${XconnectId}
            "description" = ${Description}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to CircuitCircuitTerminationRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to CircuitCircuitTerminationRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

CircuitCircuitTerminationRequest<PSCustomObject>
#>
function ConvertFrom-JsonToCircuitCircuitTerminationRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => CircuitCircuitTerminationRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in CircuitCircuitTerminationRequest
        $AllProperties = ("site", "provider_network", "port_speed", "upstream_speed", "xconnect_id", "description")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'site' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "site"))) {
            throw "Error! JSON cannot be serialized due to the required property 'site' missing."
        } else {
            $Site = $JsonParameters.PSobject.Properties["site"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provider_network"))) {
            throw "Error! JSON cannot be serialized due to the required property 'provider_network' missing."
        } else {
            $ProviderNetwork = $JsonParameters.PSobject.Properties["provider_network"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "port_speed"))) { #optional property not found
            $PortSpeed = $null
        } else {
            $PortSpeed = $JsonParameters.PSobject.Properties["port_speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "upstream_speed"))) { #optional property not found
            $UpstreamSpeed = $null
        } else {
            $UpstreamSpeed = $JsonParameters.PSobject.Properties["upstream_speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "xconnect_id"))) { #optional property not found
            $XconnectId = $null
        } else {
            $XconnectId = $JsonParameters.PSobject.Properties["xconnect_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "site" = ${Site}
            "provider_network" = ${ProviderNetwork}
            "port_speed" = ${PortSpeed}
            "upstream_speed" = ${UpstreamSpeed}
            "xconnect_id" = ${XconnectId}
            "description" = ${Description}
        }

        return $PSO
    }

}

