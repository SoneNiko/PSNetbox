#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER AssignedObjectType
No description available.
.PARAMETER AssignedObjectId
No description available.
.PARAMETER AssignedObject
No description available.
.PARAMETER Created
No description available.
.PARAMETER CreatedBy
No description available.
.PARAMETER Kind
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER LastUpdated
No description available.
.OUTPUTS

JournalEntry<PSCustomObject>
#>

function Initialize-JournalEntry {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssignedObjectType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${AssignedObjectId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${AssignedObject},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CreatedBy},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Kind},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => JournalEntry' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $AssignedObjectType) {
            throw "invalid value for 'AssignedObjectType', 'AssignedObjectType' cannot be null."
        }

        if ($null -eq $AssignedObjectId) {
            throw "invalid value for 'AssignedObjectId', 'AssignedObjectId' cannot be null."
        }

        if ($AssignedObjectId -gt 9223372036854775807) {
          throw "invalid value for 'AssignedObjectId', must be smaller than or equal to 9223372036854775807."
        }

        if ($AssignedObjectId -lt 0) {
          throw "invalid value for 'AssignedObjectId', must be greater than or equal to 0."
        }

        if ($null -eq $Comments) {
            throw "invalid value for 'Comments', 'Comments' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "assigned_object_type" = ${AssignedObjectType}
            "assigned_object_id" = ${AssignedObjectId}
            "assigned_object" = ${AssignedObject}
            "created" = ${Created}
            "created_by" = ${CreatedBy}
            "kind" = ${Kind}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "last_updated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to JournalEntry<PSCustomObject>

.DESCRIPTION

Convert from JSON to JournalEntry<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

JournalEntry<PSCustomObject>
#>
function ConvertFrom-JsonToJournalEntry {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => JournalEntry' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in JournalEntry
        $AllProperties = ("id", "url", "display", "assigned_object_type", "assigned_object_id", "assigned_object", "created", "created_by", "kind", "comments", "tags", "custom_fields", "last_updated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assigned_object_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assigned_object_type' missing."
        } else {
            $AssignedObjectType = $JsonParameters.PSobject.Properties["assigned_object_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assigned_object_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assigned_object_id' missing."
        } else {
            $AssignedObjectId = $JsonParameters.PSobject.Properties["assigned_object_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assigned_object"))) {
            throw "Error! JSON cannot be serialized due to the required property 'assigned_object' missing."
        } else {
            $AssignedObject = $JsonParameters.PSobject.Properties["assigned_object"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) {
            throw "Error! JSON cannot be serialized due to the required property 'comments' missing."
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created_by"))) { #optional property not found
            $CreatedBy = $null
        } else {
            $CreatedBy = $JsonParameters.PSobject.Properties["created_by"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "kind"))) { #optional property not found
            $Kind = $null
        } else {
            $Kind = $JsonParameters.PSobject.Properties["kind"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "assigned_object_type" = ${AssignedObjectType}
            "assigned_object_id" = ${AssignedObjectId}
            "assigned_object" = ${AssignedObject}
            "created" = ${Created}
            "created_by" = ${CreatedBy}
            "kind" = ${Kind}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "last_updated" = ${LastUpdated}
        }

        return $PSO
    }

}

