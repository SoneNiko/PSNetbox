#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Name
No description available.
.PARAMETER Rd
Unique route distinguisher (as defined in RFC 4364)
.PARAMETER Tenant
No description available.
.PARAMETER EnforceUnique
Prevent duplicate prefixes/IP addresses within this VRF
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER ImportTargets
No description available.
.PARAMETER ExportTargets
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER IpaddressCount
No description available.
.PARAMETER PrefixCount
No description available.
.OUTPUTS

VRF<PSCustomObject>
#>

function Initialize-VRF {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Rd},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Tenant},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnforceUnique},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ImportTargets},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${ExportTargets},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${IpaddressCount},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PrefixCount}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => VRF' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if (!$Rd -and $Rd.length -gt 21) {
            throw "invalid value for 'Rd', the character length must be smaller than or equal to 21."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $IpaddressCount) {
            throw "invalid value for 'IpaddressCount', 'IpaddressCount' cannot be null."
        }

        if ($null -eq $PrefixCount) {
            throw "invalid value for 'PrefixCount', 'PrefixCount' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "rd" = ${Rd}
            "tenant" = ${Tenant}
            "enforce_unique" = ${EnforceUnique}
            "description" = ${Description}
            "comments" = ${Comments}
            "import_targets" = ${ImportTargets}
            "export_targets" = ${ExportTargets}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "ipaddress_count" = ${IpaddressCount}
            "prefix_count" = ${PrefixCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to VRF<PSCustomObject>

.DESCRIPTION

Convert from JSON to VRF<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

VRF<PSCustomObject>
#>
function ConvertFrom-JsonToVRF {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => VRF' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in VRF
        $AllProperties = ("id", "url", "display", "name", "rd", "tenant", "enforce_unique", "description", "comments", "import_targets", "export_targets", "tags", "custom_fields", "created", "last_updated", "ipaddress_count", "prefix_count")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ipaddress_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ipaddress_count' missing."
        } else {
            $IpaddressCount = $JsonParameters.PSobject.Properties["ipaddress_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prefix_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'prefix_count' missing."
        } else {
            $PrefixCount = $JsonParameters.PSobject.Properties["prefix_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rd"))) { #optional property not found
            $Rd = $null
        } else {
            $Rd = $JsonParameters.PSobject.Properties["rd"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enforce_unique"))) { #optional property not found
            $EnforceUnique = $null
        } else {
            $EnforceUnique = $JsonParameters.PSobject.Properties["enforce_unique"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "import_targets"))) { #optional property not found
            $ImportTargets = $null
        } else {
            $ImportTargets = $JsonParameters.PSobject.Properties["import_targets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "export_targets"))) { #optional property not found
            $ExportTargets = $null
        } else {
            $ExportTargets = $JsonParameters.PSobject.Properties["export_targets"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "name" = ${Name}
            "rd" = ${Rd}
            "tenant" = ${Tenant}
            "enforce_unique" = ${EnforceUnique}
            "description" = ${Description}
            "comments" = ${Comments}
            "import_targets" = ${ImportTargets}
            "export_targets" = ${ExportTargets}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "ipaddress_count" = ${IpaddressCount}
            "prefix_count" = ${PrefixCount}
        }

        return $PSO
    }

}

