#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Device
No description available.
.PARAMETER Vdcs
No description available.
.PARAMETER Module
No description available.
.PARAMETER Name
No description available.
.PARAMETER Label
Physical label
.PARAMETER Type
No description available.
.PARAMETER Enabled
No description available.
.PARAMETER Parent
No description available.
.PARAMETER Bridge
No description available.
.PARAMETER Lag
No description available.
.PARAMETER Mtu
No description available.
.PARAMETER MacAddress
No description available.
.PARAMETER Speed
No description available.
.PARAMETER Duplex
No description available.
.PARAMETER Wwn
No description available.
.PARAMETER MgmtOnly
This interface is used only for out-of-band management
.PARAMETER Description
No description available.
.PARAMETER Mode
No description available.
.PARAMETER RfRole
No description available.
.PARAMETER RfChannel
No description available.
.PARAMETER PoeMode
No description available.
.PARAMETER PoeType
No description available.
.PARAMETER RfChannelFrequency
Populated by selected channel (if set)
.PARAMETER RfChannelWidth
Populated by selected channel (if set)
.PARAMETER TxPower
No description available.
.PARAMETER UntaggedVlan
No description available.
.PARAMETER TaggedVlans
No description available.
.PARAMETER MarkConnected
Treat as if a cable is connected
.PARAMETER Cable
No description available.
.PARAMETER CableEnd
No description available.
.PARAMETER WirelessLink
No description available.
.PARAMETER LinkPeers
No description available.
.PARAMETER LinkPeersType
Return the type of the peer link terminations, or None.
.PARAMETER WirelessLans
No description available.
.PARAMETER Vrf
No description available.
.PARAMETER L2vpnTermination
No description available.
.PARAMETER ConnectedEndpoints
No description available.
.PARAMETER ConnectedEndpointsType
No description available.
.PARAMETER ConnectedEndpointsReachable
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER CountIpaddresses
No description available.
.PARAMETER CountFhrpGroups
No description available.
.PARAMETER Occupied
No description available.
.OUTPUTS

Interface<PSCustomObject>
#>

function Initialize-Interface {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Device},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Vdcs},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Module},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Parent},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Bridge},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Lag},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Mtu},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MacAddress},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Speed},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Duplex},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Wwn},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MgmtOnly},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Mode},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RfRole},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${RfChannel},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PoeMode},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PoeType},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${RfChannelFrequency},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${RfChannelWidth},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TxPower},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UntaggedVlan},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${TaggedVlans},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MarkConnected},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cable},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CableEnd},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WirelessLink},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${LinkPeers},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkPeersType},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${WirelessLans},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Vrf},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${L2vpnTermination},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ConnectedEndpoints},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConnectedEndpointsType},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${ConnectedEndpointsReachable},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CountIpaddresses},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CountFhrpGroups},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Occupied}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Interface' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $Device) {
            throw "invalid value for 'Device', 'Device' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 64) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 64."
        }

        if (!$Label -and $Label.length -gt 64) {
            throw "invalid value for 'Label', the character length must be smaller than or equal to 64."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($Mtu -and $Mtu -gt 65536) {
          throw "invalid value for 'Mtu', must be smaller than or equal to 65536."
        }

        if ($Mtu -and $Mtu -lt 1) {
          throw "invalid value for 'Mtu', must be greater than or equal to 1."
        }

        if ($Speed -and $Speed -gt 2147483647) {
          throw "invalid value for 'Speed', must be smaller than or equal to 2147483647."
        }

        if ($Speed -and $Speed -lt 0) {
          throw "invalid value for 'Speed', must be greater than or equal to 0."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($RfChannelFrequency -and $RfChannelFrequency -ge 100000) {
          throw "invalid value for 'RfChannelFrequency', must be smaller than 100000."
        }

        if ($RfChannelFrequency -and $RfChannelFrequency -le -100000) {
          throw "invalid value for 'RfChannelFrequency', must be greater than -100000."
        }

        if ($RfChannelWidth -and $RfChannelWidth -ge 10000) {
          throw "invalid value for 'RfChannelWidth', must be smaller than 10000."
        }

        if ($RfChannelWidth -and $RfChannelWidth -le -10000) {
          throw "invalid value for 'RfChannelWidth', must be greater than -10000."
        }

        if ($TxPower -and $TxPower -gt 127) {
          throw "invalid value for 'TxPower', must be smaller than or equal to 127."
        }

        if ($TxPower -and $TxPower -lt 0) {
          throw "invalid value for 'TxPower', must be greater than or equal to 0."
        }

        if ($null -eq $CableEnd) {
            throw "invalid value for 'CableEnd', 'CableEnd' cannot be null."
        }

        if ($null -eq $LinkPeers) {
            throw "invalid value for 'LinkPeers', 'LinkPeers' cannot be null."
        }

        if ($null -eq $LinkPeersType) {
            throw "invalid value for 'LinkPeersType', 'LinkPeersType' cannot be null."
        }

        if ($null -eq $ConnectedEndpoints) {
            throw "invalid value for 'ConnectedEndpoints', 'ConnectedEndpoints' cannot be null."
        }

        if ($null -eq $ConnectedEndpointsType) {
            throw "invalid value for 'ConnectedEndpointsType', 'ConnectedEndpointsType' cannot be null."
        }

        if ($null -eq $ConnectedEndpointsReachable) {
            throw "invalid value for 'ConnectedEndpointsReachable', 'ConnectedEndpointsReachable' cannot be null."
        }

        if ($null -eq $CountIpaddresses) {
            throw "invalid value for 'CountIpaddresses', 'CountIpaddresses' cannot be null."
        }

        if ($null -eq $CountFhrpGroups) {
            throw "invalid value for 'CountFhrpGroups', 'CountFhrpGroups' cannot be null."
        }

        if ($null -eq $Occupied) {
            throw "invalid value for 'Occupied', 'Occupied' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "device" = ${Device}
            "vdcs" = ${Vdcs}
            "module" = ${Module}
            "name" = ${Name}
            "label" = ${Label}
            "type" = ${Type}
            "enabled" = ${Enabled}
            "parent" = ${Parent}
            "bridge" = ${Bridge}
            "lag" = ${Lag}
            "mtu" = ${Mtu}
            "mac_address" = ${MacAddress}
            "speed" = ${Speed}
            "duplex" = ${Duplex}
            "wwn" = ${Wwn}
            "mgmt_only" = ${MgmtOnly}
            "description" = ${Description}
            "mode" = ${Mode}
            "rf_role" = ${RfRole}
            "rf_channel" = ${RfChannel}
            "poe_mode" = ${PoeMode}
            "poe_type" = ${PoeType}
            "rf_channel_frequency" = ${RfChannelFrequency}
            "rf_channel_width" = ${RfChannelWidth}
            "tx_power" = ${TxPower}
            "untagged_vlan" = ${UntaggedVlan}
            "tagged_vlans" = ${TaggedVlans}
            "mark_connected" = ${MarkConnected}
            "cable" = ${Cable}
            "cable_end" = ${CableEnd}
            "wireless_link" = ${WirelessLink}
            "link_peers" = ${LinkPeers}
            "link_peers_type" = ${LinkPeersType}
            "wireless_lans" = ${WirelessLans}
            "vrf" = ${Vrf}
            "l2vpn_termination" = ${L2vpnTermination}
            "connected_endpoints" = ${ConnectedEndpoints}
            "connected_endpoints_type" = ${ConnectedEndpointsType}
            "connected_endpoints_reachable" = ${ConnectedEndpointsReachable}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "count_ipaddresses" = ${CountIpaddresses}
            "count_fhrp_groups" = ${CountFhrpGroups}
            "_occupied" = ${Occupied}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Interface<PSCustomObject>

.DESCRIPTION

Convert from JSON to Interface<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Interface<PSCustomObject>
#>
function ConvertFrom-JsonToInterface {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Interface' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Interface
        $AllProperties = ("id", "url", "display", "device", "vdcs", "module", "name", "label", "type", "enabled", "parent", "bridge", "lag", "mtu", "mac_address", "speed", "duplex", "wwn", "mgmt_only", "description", "mode", "rf_role", "rf_channel", "poe_mode", "poe_type", "rf_channel_frequency", "rf_channel_width", "tx_power", "untagged_vlan", "tagged_vlans", "mark_connected", "cable", "cable_end", "wireless_link", "link_peers", "link_peers_type", "wireless_lans", "vrf", "l2vpn_termination", "connected_endpoints", "connected_endpoints_type", "connected_endpoints_reachable", "tags", "custom_fields", "created", "last_updated", "count_ipaddresses", "count_fhrp_groups", "_occupied")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device' missing."
        } else {
            $Device = $JsonParameters.PSobject.Properties["device"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cable"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cable' missing."
        } else {
            $Cable = $JsonParameters.PSobject.Properties["cable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cable_end"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cable_end' missing."
        } else {
            $CableEnd = $JsonParameters.PSobject.Properties["cable_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wireless_link"))) {
            throw "Error! JSON cannot be serialized due to the required property 'wireless_link' missing."
        } else {
            $WirelessLink = $JsonParameters.PSobject.Properties["wireless_link"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_peers"))) {
            throw "Error! JSON cannot be serialized due to the required property 'link_peers' missing."
        } else {
            $LinkPeers = $JsonParameters.PSobject.Properties["link_peers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_peers_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'link_peers_type' missing."
        } else {
            $LinkPeersType = $JsonParameters.PSobject.Properties["link_peers_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "l2vpn_termination"))) {
            throw "Error! JSON cannot be serialized due to the required property 'l2vpn_termination' missing."
        } else {
            $L2vpnTermination = $JsonParameters.PSobject.Properties["l2vpn_termination"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connected_endpoints"))) {
            throw "Error! JSON cannot be serialized due to the required property 'connected_endpoints' missing."
        } else {
            $ConnectedEndpoints = $JsonParameters.PSobject.Properties["connected_endpoints"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connected_endpoints_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'connected_endpoints_type' missing."
        } else {
            $ConnectedEndpointsType = $JsonParameters.PSobject.Properties["connected_endpoints_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connected_endpoints_reachable"))) {
            throw "Error! JSON cannot be serialized due to the required property 'connected_endpoints_reachable' missing."
        } else {
            $ConnectedEndpointsReachable = $JsonParameters.PSobject.Properties["connected_endpoints_reachable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count_ipaddresses"))) {
            throw "Error! JSON cannot be serialized due to the required property 'count_ipaddresses' missing."
        } else {
            $CountIpaddresses = $JsonParameters.PSobject.Properties["count_ipaddresses"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "count_fhrp_groups"))) {
            throw "Error! JSON cannot be serialized due to the required property 'count_fhrp_groups' missing."
        } else {
            $CountFhrpGroups = $JsonParameters.PSobject.Properties["count_fhrp_groups"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_occupied"))) {
            throw "Error! JSON cannot be serialized due to the required property '_occupied' missing."
        } else {
            $Occupied = $JsonParameters.PSobject.Properties["_occupied"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vdcs"))) { #optional property not found
            $Vdcs = $null
        } else {
            $Vdcs = $JsonParameters.PSobject.Properties["vdcs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "module"))) { #optional property not found
            $Module = $null
        } else {
            $Module = $JsonParameters.PSobject.Properties["module"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enabled"))) { #optional property not found
            $Enabled = $null
        } else {
            $Enabled = $JsonParameters.PSobject.Properties["enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "bridge"))) { #optional property not found
            $Bridge = $null
        } else {
            $Bridge = $JsonParameters.PSobject.Properties["bridge"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "lag"))) { #optional property not found
            $Lag = $null
        } else {
            $Lag = $JsonParameters.PSobject.Properties["lag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mtu"))) { #optional property not found
            $Mtu = $null
        } else {
            $Mtu = $JsonParameters.PSobject.Properties["mtu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mac_address"))) { #optional property not found
            $MacAddress = $null
        } else {
            $MacAddress = $JsonParameters.PSobject.Properties["mac_address"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "speed"))) { #optional property not found
            $Speed = $null
        } else {
            $Speed = $JsonParameters.PSobject.Properties["speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "duplex"))) { #optional property not found
            $Duplex = $null
        } else {
            $Duplex = $JsonParameters.PSobject.Properties["duplex"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wwn"))) { #optional property not found
            $Wwn = $null
        } else {
            $Wwn = $JsonParameters.PSobject.Properties["wwn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mgmt_only"))) { #optional property not found
            $MgmtOnly = $null
        } else {
            $MgmtOnly = $JsonParameters.PSobject.Properties["mgmt_only"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rf_role"))) { #optional property not found
            $RfRole = $null
        } else {
            $RfRole = $JsonParameters.PSobject.Properties["rf_role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rf_channel"))) { #optional property not found
            $RfChannel = $null
        } else {
            $RfChannel = $JsonParameters.PSobject.Properties["rf_channel"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "poe_mode"))) { #optional property not found
            $PoeMode = $null
        } else {
            $PoeMode = $JsonParameters.PSobject.Properties["poe_mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "poe_type"))) { #optional property not found
            $PoeType = $null
        } else {
            $PoeType = $JsonParameters.PSobject.Properties["poe_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rf_channel_frequency"))) { #optional property not found
            $RfChannelFrequency = $null
        } else {
            $RfChannelFrequency = $JsonParameters.PSobject.Properties["rf_channel_frequency"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rf_channel_width"))) { #optional property not found
            $RfChannelWidth = $null
        } else {
            $RfChannelWidth = $JsonParameters.PSobject.Properties["rf_channel_width"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tx_power"))) { #optional property not found
            $TxPower = $null
        } else {
            $TxPower = $JsonParameters.PSobject.Properties["tx_power"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "untagged_vlan"))) { #optional property not found
            $UntaggedVlan = $null
        } else {
            $UntaggedVlan = $JsonParameters.PSobject.Properties["untagged_vlan"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tagged_vlans"))) { #optional property not found
            $TaggedVlans = $null
        } else {
            $TaggedVlans = $JsonParameters.PSobject.Properties["tagged_vlans"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mark_connected"))) { #optional property not found
            $MarkConnected = $null
        } else {
            $MarkConnected = $JsonParameters.PSobject.Properties["mark_connected"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "wireless_lans"))) { #optional property not found
            $WirelessLans = $null
        } else {
            $WirelessLans = $JsonParameters.PSobject.Properties["wireless_lans"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vrf"))) { #optional property not found
            $Vrf = $null
        } else {
            $Vrf = $JsonParameters.PSobject.Properties["vrf"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "device" = ${Device}
            "vdcs" = ${Vdcs}
            "module" = ${Module}
            "name" = ${Name}
            "label" = ${Label}
            "type" = ${Type}
            "enabled" = ${Enabled}
            "parent" = ${Parent}
            "bridge" = ${Bridge}
            "lag" = ${Lag}
            "mtu" = ${Mtu}
            "mac_address" = ${MacAddress}
            "speed" = ${Speed}
            "duplex" = ${Duplex}
            "wwn" = ${Wwn}
            "mgmt_only" = ${MgmtOnly}
            "description" = ${Description}
            "mode" = ${Mode}
            "rf_role" = ${RfRole}
            "rf_channel" = ${RfChannel}
            "poe_mode" = ${PoeMode}
            "poe_type" = ${PoeType}
            "rf_channel_frequency" = ${RfChannelFrequency}
            "rf_channel_width" = ${RfChannelWidth}
            "tx_power" = ${TxPower}
            "untagged_vlan" = ${UntaggedVlan}
            "tagged_vlans" = ${TaggedVlans}
            "mark_connected" = ${MarkConnected}
            "cable" = ${Cable}
            "cable_end" = ${CableEnd}
            "wireless_link" = ${WirelessLink}
            "link_peers" = ${LinkPeers}
            "link_peers_type" = ${LinkPeersType}
            "wireless_lans" = ${WirelessLans}
            "vrf" = ${Vrf}
            "l2vpn_termination" = ${L2vpnTermination}
            "connected_endpoints" = ${ConnectedEndpoints}
            "connected_endpoints_type" = ${ConnectedEndpointsType}
            "connected_endpoints_reachable" = ${ConnectedEndpointsReachable}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "count_ipaddresses" = ${CountIpaddresses}
            "count_fhrp_groups" = ${CountFhrpGroups}
            "_occupied" = ${Occupied}
        }

        return $PSO
    }

}

