#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Representation of a prefix which does not exist in the database.

.PARAMETER Family
No description available.
.PARAMETER Prefix
No description available.
.PARAMETER Vrf
No description available.
.OUTPUTS

AvailablePrefix<PSCustomObject>
#>

function Initialize-AvailablePrefix {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Family},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Prefix},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Vrf}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => AvailablePrefix' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Prefix) {
            throw "invalid value for 'Prefix', 'Prefix' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "family" = ${Family}
            "prefix" = ${Prefix}
            "vrf" = ${Vrf}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to AvailablePrefix<PSCustomObject>

.DESCRIPTION

Convert from JSON to AvailablePrefix<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

AvailablePrefix<PSCustomObject>
#>
function ConvertFrom-JsonToAvailablePrefix {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => AvailablePrefix' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in AvailablePrefix
        $AllProperties = ("family", "prefix", "vrf")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'family' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "family"))) {
            throw "Error! JSON cannot be serialized due to the required property 'family' missing."
        } else {
            $Family = $JsonParameters.PSobject.Properties["family"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prefix"))) {
            throw "Error! JSON cannot be serialized due to the required property 'prefix' missing."
        } else {
            $Prefix = $JsonParameters.PSobject.Properties["prefix"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vrf"))) {
            throw "Error! JSON cannot be serialized due to the required property 'vrf' missing."
        } else {
            $Vrf = $JsonParameters.PSobject.Properties["vrf"].value
        }

        $PSO = [PSCustomObject]@{
            "family" = ${Family}
            "prefix" = ${Prefix}
            "vrf" = ${Vrf}
        }

        return $PSO
    }

}

