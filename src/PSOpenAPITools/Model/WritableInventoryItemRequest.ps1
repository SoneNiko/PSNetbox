#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Device
No description available.
.PARAMETER Parent
No description available.
.PARAMETER Name
No description available.
.PARAMETER Label
Physical label
.PARAMETER Role
No description available.
.PARAMETER Manufacturer
No description available.
.PARAMETER PartId
Manufacturer-assigned part identifier
.PARAMETER Serial
No description available.
.PARAMETER AssetTag
A unique tag used to identify this item
.PARAMETER Discovered
This item was automatically discovered
.PARAMETER Description
No description available.
.PARAMETER ComponentType
No description available.
.PARAMETER ComponentId
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

WritableInventoryItemRequest<PSCustomObject>
#>

function Initialize-WritableInventoryItemRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Device},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Parent},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Role},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Manufacturer},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Serial},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AssetTag},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Discovered},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ComponentType},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int64]]
        ${ComponentId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WritableInventoryItemRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Device) {
            throw "invalid value for 'Device', 'Device' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 64) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 64."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Label -and $Label.length -gt 64) {
            throw "invalid value for 'Label', the character length must be smaller than or equal to 64."
        }

        if (!$PartId -and $PartId.length -gt 50) {
            throw "invalid value for 'PartId', the character length must be smaller than or equal to 50."
        }

        if (!$Serial -and $Serial.length -gt 50) {
            throw "invalid value for 'Serial', the character length must be smaller than or equal to 50."
        }

        if (!$AssetTag -and $AssetTag.length -gt 50) {
            throw "invalid value for 'AssetTag', the character length must be smaller than or equal to 50."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($ComponentId -and $ComponentId -gt 9223372036854775807) {
          throw "invalid value for 'ComponentId', must be smaller than or equal to 9223372036854775807."
        }

        if ($ComponentId -and $ComponentId -lt 0) {
          throw "invalid value for 'ComponentId', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "device" = ${Device}
            "parent" = ${Parent}
            "name" = ${Name}
            "label" = ${Label}
            "role" = ${Role}
            "manufacturer" = ${Manufacturer}
            "part_id" = ${PartId}
            "serial" = ${Serial}
            "asset_tag" = ${AssetTag}
            "discovered" = ${Discovered}
            "description" = ${Description}
            "component_type" = ${ComponentType}
            "component_id" = ${ComponentId}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WritableInventoryItemRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to WritableInventoryItemRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WritableInventoryItemRequest<PSCustomObject>
#>
function ConvertFrom-JsonToWritableInventoryItemRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WritableInventoryItemRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WritableInventoryItemRequest
        $AllProperties = ("device", "parent", "name", "label", "role", "manufacturer", "part_id", "serial", "asset_tag", "discovered", "description", "component_type", "component_id", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'device' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device' missing."
        } else {
            $Device = $JsonParameters.PSobject.Properties["device"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parent"))) { #optional property not found
            $Parent = $null
        } else {
            $Parent = $JsonParameters.PSobject.Properties["parent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manufacturer"))) { #optional property not found
            $Manufacturer = $null
        } else {
            $Manufacturer = $JsonParameters.PSobject.Properties["manufacturer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "part_id"))) { #optional property not found
            $PartId = $null
        } else {
            $PartId = $JsonParameters.PSobject.Properties["part_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "serial"))) { #optional property not found
            $Serial = $null
        } else {
            $Serial = $JsonParameters.PSobject.Properties["serial"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "asset_tag"))) { #optional property not found
            $AssetTag = $null
        } else {
            $AssetTag = $JsonParameters.PSobject.Properties["asset_tag"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "discovered"))) { #optional property not found
            $Discovered = $null
        } else {
            $Discovered = $JsonParameters.PSobject.Properties["discovered"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "component_type"))) { #optional property not found
            $ComponentType = $null
        } else {
            $ComponentType = $JsonParameters.PSobject.Properties["component_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "component_id"))) { #optional property not found
            $ComponentId = $null
        } else {
            $ComponentId = $JsonParameters.PSobject.Properties["component_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "device" = ${Device}
            "parent" = ${Parent}
            "name" = ${Name}
            "label" = ${Label}
            "role" = ${Role}
            "manufacturer" = ${Manufacturer}
            "part_id" = ${PartId}
            "serial" = ${Serial}
            "asset_tag" = ${AssetTag}
            "discovered" = ${Discovered}
            "description" = ${Description}
            "component_type" = ${ComponentType}
            "component_id" = ${ComponentId}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

