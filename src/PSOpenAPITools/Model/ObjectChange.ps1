#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Time
No description available.
.PARAMETER User
No description available.
.PARAMETER UserName
No description available.
.PARAMETER RequestId
No description available.
.PARAMETER Action
No description available.
.PARAMETER ChangedObjectType
No description available.
.PARAMETER ChangedObjectId
No description available.
.PARAMETER ChangedObject
No description available.
.PARAMETER PrechangeData
No description available.
.PARAMETER PostchangeData
No description available.
.OUTPUTS

ObjectChange<PSCustomObject>
#>

function Initialize-ObjectChange {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${Time},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${User},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserName},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RequestId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Action},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ChangedObjectType},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${ChangedObjectId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ChangedObject},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PrechangeData},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PostchangeData}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ObjectChange' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $Time) {
            throw "invalid value for 'Time', 'Time' cannot be null."
        }

        if ($null -eq $User) {
            throw "invalid value for 'User', 'User' cannot be null."
        }

        if ($null -eq $UserName) {
            throw "invalid value for 'UserName', 'UserName' cannot be null."
        }

        if ($null -eq $RequestId) {
            throw "invalid value for 'RequestId', 'RequestId' cannot be null."
        }

        if ($null -eq $Action) {
            throw "invalid value for 'Action', 'Action' cannot be null."
        }

        if ($null -eq $ChangedObjectType) {
            throw "invalid value for 'ChangedObjectType', 'ChangedObjectType' cannot be null."
        }

        if ($null -eq $ChangedObjectId) {
            throw "invalid value for 'ChangedObjectId', 'ChangedObjectId' cannot be null."
        }

        if ($ChangedObjectId -gt 9223372036854775807) {
          throw "invalid value for 'ChangedObjectId', must be smaller than or equal to 9223372036854775807."
        }

        if ($ChangedObjectId -lt 0) {
          throw "invalid value for 'ChangedObjectId', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "time" = ${Time}
            "user" = ${User}
            "user_name" = ${UserName}
            "request_id" = ${RequestId}
            "action" = ${Action}
            "changed_object_type" = ${ChangedObjectType}
            "changed_object_id" = ${ChangedObjectId}
            "changed_object" = ${ChangedObject}
            "prechange_data" = ${PrechangeData}
            "postchange_data" = ${PostchangeData}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ObjectChange<PSCustomObject>

.DESCRIPTION

Convert from JSON to ObjectChange<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ObjectChange<PSCustomObject>
#>
function ConvertFrom-JsonToObjectChange {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ObjectChange' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ObjectChange
        $AllProperties = ("id", "url", "display", "time", "user", "user_name", "request_id", "action", "changed_object_type", "changed_object_id", "changed_object", "prechange_data", "postchange_data")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "time"))) {
            throw "Error! JSON cannot be serialized due to the required property 'time' missing."
        } else {
            $Time = $JsonParameters.PSobject.Properties["time"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) {
            throw "Error! JSON cannot be serialized due to the required property 'user' missing."
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user_name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'user_name' missing."
        } else {
            $UserName = $JsonParameters.PSobject.Properties["user_name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "request_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'request_id' missing."
        } else {
            $RequestId = $JsonParameters.PSobject.Properties["request_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "action"))) {
            throw "Error! JSON cannot be serialized due to the required property 'action' missing."
        } else {
            $Action = $JsonParameters.PSobject.Properties["action"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "changed_object_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'changed_object_type' missing."
        } else {
            $ChangedObjectType = $JsonParameters.PSobject.Properties["changed_object_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "changed_object_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'changed_object_id' missing."
        } else {
            $ChangedObjectId = $JsonParameters.PSobject.Properties["changed_object_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "changed_object"))) {
            throw "Error! JSON cannot be serialized due to the required property 'changed_object' missing."
        } else {
            $ChangedObject = $JsonParameters.PSobject.Properties["changed_object"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "prechange_data"))) {
            throw "Error! JSON cannot be serialized due to the required property 'prechange_data' missing."
        } else {
            $PrechangeData = $JsonParameters.PSobject.Properties["prechange_data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "postchange_data"))) {
            throw "Error! JSON cannot be serialized due to the required property 'postchange_data' missing."
        } else {
            $PostchangeData = $JsonParameters.PSobject.Properties["postchange_data"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "time" = ${Time}
            "user" = ${User}
            "user_name" = ${UserName}
            "request_id" = ${RequestId}
            "action" = ${Action}
            "changed_object_type" = ${ChangedObjectType}
            "changed_object_id" = ${ChangedObjectId}
            "changed_object" = ${ChangedObject}
            "prechange_data" = ${PrechangeData}
            "postchange_data" = ${PostchangeData}
        }

        return $PSO
    }

}

