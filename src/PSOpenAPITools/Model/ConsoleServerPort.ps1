#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Device
No description available.
.PARAMETER Module
No description available.
.PARAMETER Name
No description available.
.PARAMETER Label
Physical label
.PARAMETER Type
No description available.
.PARAMETER Speed
No description available.
.PARAMETER Description
No description available.
.PARAMETER MarkConnected
Treat as if a cable is connected
.PARAMETER Cable
No description available.
.PARAMETER CableEnd
No description available.
.PARAMETER LinkPeers
No description available.
.PARAMETER LinkPeersType
Return the type of the peer link terminations, or None.
.PARAMETER ConnectedEndpoints
No description available.
.PARAMETER ConnectedEndpointsType
No description available.
.PARAMETER ConnectedEndpointsReachable
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER Occupied
No description available.
.OUTPUTS

ConsoleServerPort<PSCustomObject>
#>

function Initialize-ConsoleServerPort {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Device},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Module},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Type},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Speed},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${MarkConnected},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Cable},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CableEnd},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${LinkPeers},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${LinkPeersType},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${ConnectedEndpoints},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ConnectedEndpointsType},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${ConnectedEndpointsReachable},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [Boolean]
        ${Occupied}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ConsoleServerPort' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $Device) {
            throw "invalid value for 'Device', 'Device' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 64) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 64."
        }

        if (!$Label -and $Label.length -gt 64) {
            throw "invalid value for 'Label', the character length must be smaller than or equal to 64."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $CableEnd) {
            throw "invalid value for 'CableEnd', 'CableEnd' cannot be null."
        }

        if ($null -eq $LinkPeers) {
            throw "invalid value for 'LinkPeers', 'LinkPeers' cannot be null."
        }

        if ($null -eq $LinkPeersType) {
            throw "invalid value for 'LinkPeersType', 'LinkPeersType' cannot be null."
        }

        if ($null -eq $ConnectedEndpoints) {
            throw "invalid value for 'ConnectedEndpoints', 'ConnectedEndpoints' cannot be null."
        }

        if ($null -eq $ConnectedEndpointsType) {
            throw "invalid value for 'ConnectedEndpointsType', 'ConnectedEndpointsType' cannot be null."
        }

        if ($null -eq $ConnectedEndpointsReachable) {
            throw "invalid value for 'ConnectedEndpointsReachable', 'ConnectedEndpointsReachable' cannot be null."
        }

        if ($null -eq $Occupied) {
            throw "invalid value for 'Occupied', 'Occupied' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "device" = ${Device}
            "module" = ${Module}
            "name" = ${Name}
            "label" = ${Label}
            "type" = ${Type}
            "speed" = ${Speed}
            "description" = ${Description}
            "mark_connected" = ${MarkConnected}
            "cable" = ${Cable}
            "cable_end" = ${CableEnd}
            "link_peers" = ${LinkPeers}
            "link_peers_type" = ${LinkPeersType}
            "connected_endpoints" = ${ConnectedEndpoints}
            "connected_endpoints_type" = ${ConnectedEndpointsType}
            "connected_endpoints_reachable" = ${ConnectedEndpointsReachable}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "_occupied" = ${Occupied}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ConsoleServerPort<PSCustomObject>

.DESCRIPTION

Convert from JSON to ConsoleServerPort<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ConsoleServerPort<PSCustomObject>
#>
function ConvertFrom-JsonToConsoleServerPort {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ConsoleServerPort' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ConsoleServerPort
        $AllProperties = ("id", "url", "display", "device", "module", "name", "label", "type", "speed", "description", "mark_connected", "cable", "cable_end", "link_peers", "link_peers_type", "connected_endpoints", "connected_endpoints_type", "connected_endpoints_reachable", "tags", "custom_fields", "created", "last_updated", "_occupied")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device' missing."
        } else {
            $Device = $JsonParameters.PSobject.Properties["device"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cable"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cable' missing."
        } else {
            $Cable = $JsonParameters.PSobject.Properties["cable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cable_end"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cable_end' missing."
        } else {
            $CableEnd = $JsonParameters.PSobject.Properties["cable_end"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_peers"))) {
            throw "Error! JSON cannot be serialized due to the required property 'link_peers' missing."
        } else {
            $LinkPeers = $JsonParameters.PSobject.Properties["link_peers"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "link_peers_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'link_peers_type' missing."
        } else {
            $LinkPeersType = $JsonParameters.PSobject.Properties["link_peers_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connected_endpoints"))) {
            throw "Error! JSON cannot be serialized due to the required property 'connected_endpoints' missing."
        } else {
            $ConnectedEndpoints = $JsonParameters.PSobject.Properties["connected_endpoints"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connected_endpoints_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'connected_endpoints_type' missing."
        } else {
            $ConnectedEndpointsType = $JsonParameters.PSobject.Properties["connected_endpoints_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "connected_endpoints_reachable"))) {
            throw "Error! JSON cannot be serialized due to the required property 'connected_endpoints_reachable' missing."
        } else {
            $ConnectedEndpointsReachable = $JsonParameters.PSobject.Properties["connected_endpoints_reachable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_occupied"))) {
            throw "Error! JSON cannot be serialized due to the required property '_occupied' missing."
        } else {
            $Occupied = $JsonParameters.PSobject.Properties["_occupied"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "module"))) { #optional property not found
            $Module = $null
        } else {
            $Module = $JsonParameters.PSobject.Properties["module"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "speed"))) { #optional property not found
            $Speed = $null
        } else {
            $Speed = $JsonParameters.PSobject.Properties["speed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mark_connected"))) { #optional property not found
            $MarkConnected = $null
        } else {
            $MarkConnected = $JsonParameters.PSobject.Properties["mark_connected"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "device" = ${Device}
            "module" = ${Module}
            "name" = ${Name}
            "label" = ${Label}
            "type" = ${Type}
            "speed" = ${Speed}
            "description" = ${Description}
            "mark_connected" = ${MarkConnected}
            "cable" = ${Cable}
            "cable_end" = ${CableEnd}
            "link_peers" = ${LinkPeers}
            "link_peers_type" = ${LinkPeersType}
            "connected_endpoints" = ${ConnectedEndpoints}
            "connected_endpoints_type" = ${ConnectedEndpointsType}
            "connected_endpoints_reachable" = ${ConnectedEndpointsReachable}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "_occupied" = ${Occupied}
        }

        return $PSO
    }

}

