#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Group
No description available.
.PARAMETER InterfaceType
No description available.
.PARAMETER InterfaceId
No description available.
.PARAMETER Priority
No description available.
.OUTPUTS

FHRPGroupAssignmentRequest<PSCustomObject>
#>

function Initialize-FHRPGroupAssignmentRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Group},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${InterfaceType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${InterfaceId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Priority}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => FHRPGroupAssignmentRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Group) {
            throw "invalid value for 'Group', 'Group' cannot be null."
        }

        if ($null -eq $InterfaceType) {
            throw "invalid value for 'InterfaceType', 'InterfaceType' cannot be null."
        }

        if ($null -eq $InterfaceId) {
            throw "invalid value for 'InterfaceId', 'InterfaceId' cannot be null."
        }

        if ($InterfaceId -gt 9223372036854775807) {
          throw "invalid value for 'InterfaceId', must be smaller than or equal to 9223372036854775807."
        }

        if ($InterfaceId -lt 0) {
          throw "invalid value for 'InterfaceId', must be greater than or equal to 0."
        }

        if ($null -eq $Priority) {
            throw "invalid value for 'Priority', 'Priority' cannot be null."
        }

        if ($Priority -gt 255) {
          throw "invalid value for 'Priority', must be smaller than or equal to 255."
        }

        if ($Priority -lt 0) {
          throw "invalid value for 'Priority', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "group" = ${Group}
            "interface_type" = ${InterfaceType}
            "interface_id" = ${InterfaceId}
            "priority" = ${Priority}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FHRPGroupAssignmentRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to FHRPGroupAssignmentRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FHRPGroupAssignmentRequest<PSCustomObject>
#>
function ConvertFrom-JsonToFHRPGroupAssignmentRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => FHRPGroupAssignmentRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FHRPGroupAssignmentRequest
        $AllProperties = ("group", "interface_type", "interface_id", "priority")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'group' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "group"))) {
            throw "Error! JSON cannot be serialized due to the required property 'group' missing."
        } else {
            $Group = $JsonParameters.PSobject.Properties["group"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "interface_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'interface_type' missing."
        } else {
            $InterfaceType = $JsonParameters.PSobject.Properties["interface_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "interface_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'interface_id' missing."
        } else {
            $InterfaceId = $JsonParameters.PSobject.Properties["interface_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "priority"))) {
            throw "Error! JSON cannot be serialized due to the required property 'priority' missing."
        } else {
            $Priority = $JsonParameters.PSobject.Properties["priority"].value
        }

        $PSO = [PSCustomObject]@{
            "group" = ${Group}
            "interface_type" = ${InterfaceType}
            "interface_id" = ${InterfaceId}
            "priority" = ${Priority}
        }

        return $PSO
    }

}

