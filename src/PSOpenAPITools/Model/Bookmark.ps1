#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER ObjectType
No description available.
.PARAMETER ObjectId
No description available.
.PARAMETER Object
No description available.
.PARAMETER User
No description available.
.PARAMETER Created
No description available.
.OUTPUTS

Bookmark<PSCustomObject>
#>

function Initialize-Bookmark {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ObjectType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int64]
        ${ObjectId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Object},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${User},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${Created}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Bookmark' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $ObjectType) {
            throw "invalid value for 'ObjectType', 'ObjectType' cannot be null."
        }

        if ($null -eq $ObjectId) {
            throw "invalid value for 'ObjectId', 'ObjectId' cannot be null."
        }

        if ($ObjectId -gt 9223372036854775807) {
          throw "invalid value for 'ObjectId', must be smaller than or equal to 9223372036854775807."
        }

        if ($ObjectId -lt 0) {
          throw "invalid value for 'ObjectId', must be greater than or equal to 0."
        }

        if ($null -eq $User) {
            throw "invalid value for 'User', 'User' cannot be null."
        }

        if ($null -eq $Created) {
            throw "invalid value for 'Created', 'Created' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "object_type" = ${ObjectType}
            "object_id" = ${ObjectId}
            "object" = ${Object}
            "user" = ${User}
            "created" = ${Created}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Bookmark<PSCustomObject>

.DESCRIPTION

Convert from JSON to Bookmark<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Bookmark<PSCustomObject>
#>
function ConvertFrom-JsonToBookmark {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Bookmark' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Bookmark
        $AllProperties = ("id", "url", "display", "object_type", "object_id", "object", "user", "created")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object_type' missing."
        } else {
            $ObjectType = $JsonParameters.PSobject.Properties["object_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object_id' missing."
        } else {
            $ObjectId = $JsonParameters.PSobject.Properties["object_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "object"))) {
            throw "Error! JSON cannot be serialized due to the required property 'object' missing."
        } else {
            $Object = $JsonParameters.PSobject.Properties["object"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) {
            throw "Error! JSON cannot be serialized due to the required property 'user' missing."
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "object_type" = ${ObjectType}
            "object_id" = ${ObjectId}
            "object" = ${Object}
            "user" = ${User}
            "created" = ${Created}
        }

        return $PSO
    }

}

