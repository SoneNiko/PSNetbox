#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER ContentTypes
No description available.
.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER TemplateCode
Jinja2 template code. The list of objects being exported is passed as a context variable named <code>queryset</code>.
.PARAMETER MimeType
Defaults to <code>text/plain; charset=utf-8</code>
.PARAMETER FileExtension
Extension to append to the rendered filename
.PARAMETER AsAttachment
Download file as attachment
.PARAMETER DataSource
No description available.
.PARAMETER DataPath
Path to remote file (relative to data source root)
.PARAMETER DataFile
No description available.
.PARAMETER DataSynced
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.OUTPUTS

ExportTemplate<PSCustomObject>
#>

function Initialize-ExportTemplate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String[]]
        ${ContentTypes},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemplateCode},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${MimeType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FileExtension},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AsAttachment},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DataSource},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DataPath},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DataFile},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${DataSynced},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ExportTemplate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $ContentTypes) {
            throw "invalid value for 'ContentTypes', 'ContentTypes' cannot be null."
        }

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $TemplateCode) {
            throw "invalid value for 'TemplateCode', 'TemplateCode' cannot be null."
        }

        if (!$MimeType -and $MimeType.length -gt 50) {
            throw "invalid value for 'MimeType', the character length must be smaller than or equal to 50."
        }

        if (!$FileExtension -and $FileExtension.length -gt 15) {
            throw "invalid value for 'FileExtension', the character length must be smaller than or equal to 15."
        }

        if ($null -eq $DataPath) {
            throw "invalid value for 'DataPath', 'DataPath' cannot be null."
        }

        if ($null -eq $DataFile) {
            throw "invalid value for 'DataFile', 'DataFile' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "content_types" = ${ContentTypes}
            "name" = ${Name}
            "description" = ${Description}
            "template_code" = ${TemplateCode}
            "mime_type" = ${MimeType}
            "file_extension" = ${FileExtension}
            "as_attachment" = ${AsAttachment}
            "data_source" = ${DataSource}
            "data_path" = ${DataPath}
            "data_file" = ${DataFile}
            "data_synced" = ${DataSynced}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ExportTemplate<PSCustomObject>

.DESCRIPTION

Convert from JSON to ExportTemplate<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ExportTemplate<PSCustomObject>
#>
function ConvertFrom-JsonToExportTemplate {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ExportTemplate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ExportTemplate
        $AllProperties = ("id", "url", "display", "content_types", "name", "description", "template_code", "mime_type", "file_extension", "as_attachment", "data_source", "data_path", "data_file", "data_synced", "created", "last_updated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "content_types"))) {
            throw "Error! JSON cannot be serialized due to the required property 'content_types' missing."
        } else {
            $ContentTypes = $JsonParameters.PSobject.Properties["content_types"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "template_code"))) {
            throw "Error! JSON cannot be serialized due to the required property 'template_code' missing."
        } else {
            $TemplateCode = $JsonParameters.PSobject.Properties["template_code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_path"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data_path' missing."
        } else {
            $DataPath = $JsonParameters.PSobject.Properties["data_path"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_file"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data_file' missing."
        } else {
            $DataFile = $JsonParameters.PSobject.Properties["data_file"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_synced"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data_synced' missing."
        } else {
            $DataSynced = $JsonParameters.PSobject.Properties["data_synced"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mime_type"))) { #optional property not found
            $MimeType = $null
        } else {
            $MimeType = $JsonParameters.PSobject.Properties["mime_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "file_extension"))) { #optional property not found
            $FileExtension = $null
        } else {
            $FileExtension = $JsonParameters.PSobject.Properties["file_extension"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "as_attachment"))) { #optional property not found
            $AsAttachment = $null
        } else {
            $AsAttachment = $JsonParameters.PSobject.Properties["as_attachment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data_source"))) { #optional property not found
            $DataSource = $null
        } else {
            $DataSource = $JsonParameters.PSobject.Properties["data_source"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "content_types" = ${ContentTypes}
            "name" = ${Name}
            "description" = ${Description}
            "template_code" = ${TemplateCode}
            "mime_type" = ${MimeType}
            "file_extension" = ${FileExtension}
            "as_attachment" = ${AsAttachment}
            "data_source" = ${DataSource}
            "data_path" = ${DataPath}
            "data_file" = ${DataFile}
            "data_synced" = ${DataSynced}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
        }

        return $PSO
    }

}

