#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Manufacturer
No description available.
.PARAMETER DefaultPlatform
No description available.
.PARAMETER Model
No description available.
.PARAMETER Slug
No description available.
.PARAMETER PartNumber
Discrete part number (optional)
.PARAMETER UHeight
No description available.
.PARAMETER ExcludeFromUtilization
Devices of this type are excluded when calculating rack utilization.
.PARAMETER IsFullDepth
Device consumes both front and rear rack faces.
.PARAMETER SubdeviceRole
Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.  * `parent` - Parent * `child` - Child
.PARAMETER Airflow
* `front-to-rear` - Front to rear * `rear-to-front` - Rear to front * `left-to-right` - Left to right * `right-to-left` - Right to left * `side-to-rear` - Side to rear * `passive` - Passive * `mixed` - Mixed
.PARAMETER Weight
No description available.
.PARAMETER WeightUnit
* `kg` - Kilograms * `g` - Grams * `lb` - Pounds * `oz` - Ounces
.PARAMETER FrontImage
No description available.
.PARAMETER RearImage
No description available.
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

WritableDeviceTypeRequest<PSCustomObject>
#>

function Initialize-WritableDeviceTypeRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Manufacturer},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DefaultPlatform},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[-a-zA-Z0-9_]+$")]
        [String]
        ${Slug},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartNumber},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${UHeight} = 1.0,
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ExcludeFromUtilization},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFullDepth},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("parent", "child", "")]
        [String]
        ${SubdeviceRole},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("front-to-rear", "rear-to-front", "left-to-right", "right-to-left", "side-to-rear", "passive", "mixed", "")]
        [String]
        ${Airflow},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Weight},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("kg", "g", "lb", "oz", "")]
        [String]
        ${WeightUnit},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.IO.FileInfo]
        ${FrontImage},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.IO.FileInfo]
        ${RearImage},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WritableDeviceTypeRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Manufacturer) {
            throw "invalid value for 'Manufacturer', 'Manufacturer' cannot be null."
        }

        if ($null -eq $Model) {
            throw "invalid value for 'Model', 'Model' cannot be null."
        }

        if ($Model.length -gt 100) {
            throw "invalid value for 'Model', the character length must be smaller than or equal to 100."
        }

        if ($Model.length -lt 1) {
            throw "invalid value for 'Model', the character length must be great than or equal to 1."
        }

        if ($null -eq $Slug) {
            throw "invalid value for 'Slug', 'Slug' cannot be null."
        }

        if ($Slug.length -gt 100) {
            throw "invalid value for 'Slug', the character length must be smaller than or equal to 100."
        }

        if ($Slug.length -lt 1) {
            throw "invalid value for 'Slug', the character length must be great than or equal to 1."
        }

        if (!$PartNumber -and $PartNumber.length -gt 50) {
            throw "invalid value for 'PartNumber', the character length must be smaller than or equal to 50."
        }

        if ($UHeight -and $UHeight -ge 1000) {
          throw "invalid value for 'UHeight', must be smaller than 1000."
        }

        if ($UHeight -and $UHeight -lt 0) {
          throw "invalid value for 'UHeight', must be greater than or equal to 0."
        }

        if ($Weight -and $Weight -ge 1000000) {
          throw "invalid value for 'Weight', must be smaller than 1000000."
        }

        if ($Weight -and $Weight -le -1000000) {
          throw "invalid value for 'Weight', must be greater than -1000000."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "manufacturer" = ${Manufacturer}
            "default_platform" = ${DefaultPlatform}
            "model" = ${Model}
            "slug" = ${Slug}
            "part_number" = ${PartNumber}
            "u_height" = ${UHeight}
            "exclude_from_utilization" = ${ExcludeFromUtilization}
            "is_full_depth" = ${IsFullDepth}
            "subdevice_role" = ${SubdeviceRole}
            "airflow" = ${Airflow}
            "weight" = ${Weight}
            "weight_unit" = ${WeightUnit}
            "front_image" = ${FrontImage}
            "rear_image" = ${RearImage}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WritableDeviceTypeRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to WritableDeviceTypeRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WritableDeviceTypeRequest<PSCustomObject>
#>
function ConvertFrom-JsonToWritableDeviceTypeRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WritableDeviceTypeRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WritableDeviceTypeRequest
        $AllProperties = ("manufacturer", "default_platform", "model", "slug", "part_number", "u_height", "exclude_from_utilization", "is_full_depth", "subdevice_role", "airflow", "weight", "weight_unit", "front_image", "rear_image", "description", "comments", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'manufacturer' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manufacturer"))) {
            throw "Error! JSON cannot be serialized due to the required property 'manufacturer' missing."
        } else {
            $Manufacturer = $JsonParameters.PSobject.Properties["manufacturer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'model' missing."
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slug"))) {
            throw "Error! JSON cannot be serialized due to the required property 'slug' missing."
        } else {
            $Slug = $JsonParameters.PSobject.Properties["slug"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_platform"))) { #optional property not found
            $DefaultPlatform = $null
        } else {
            $DefaultPlatform = $JsonParameters.PSobject.Properties["default_platform"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "part_number"))) { #optional property not found
            $PartNumber = $null
        } else {
            $PartNumber = $JsonParameters.PSobject.Properties["part_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "u_height"))) { #optional property not found
            $UHeight = $null
        } else {
            $UHeight = $JsonParameters.PSobject.Properties["u_height"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exclude_from_utilization"))) { #optional property not found
            $ExcludeFromUtilization = $null
        } else {
            $ExcludeFromUtilization = $JsonParameters.PSobject.Properties["exclude_from_utilization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_full_depth"))) { #optional property not found
            $IsFullDepth = $null
        } else {
            $IsFullDepth = $JsonParameters.PSobject.Properties["is_full_depth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subdevice_role"))) { #optional property not found
            $SubdeviceRole = $null
        } else {
            $SubdeviceRole = $JsonParameters.PSobject.Properties["subdevice_role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "airflow"))) { #optional property not found
            $Airflow = $null
        } else {
            $Airflow = $JsonParameters.PSobject.Properties["airflow"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight_unit"))) { #optional property not found
            $WeightUnit = $null
        } else {
            $WeightUnit = $JsonParameters.PSobject.Properties["weight_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "front_image"))) { #optional property not found
            $FrontImage = $null
        } else {
            $FrontImage = $JsonParameters.PSobject.Properties["front_image"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rear_image"))) { #optional property not found
            $RearImage = $null
        } else {
            $RearImage = $JsonParameters.PSobject.Properties["rear_image"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "manufacturer" = ${Manufacturer}
            "default_platform" = ${DefaultPlatform}
            "model" = ${Model}
            "slug" = ${Slug}
            "part_number" = ${PartNumber}
            "u_height" = ${UHeight}
            "exclude_from_utilization" = ${ExcludeFromUtilization}
            "is_full_depth" = ${IsFullDepth}
            "subdevice_role" = ${SubdeviceRole}
            "airflow" = ${Airflow}
            "weight" = ${Weight}
            "weight_unit" = ${WeightUnit}
            "front_image" = ${FrontImage}
            "rear_image" = ${RearImage}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

