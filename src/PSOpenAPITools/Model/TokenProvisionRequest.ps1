#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER Expires
No description available.
.PARAMETER WriteEnabled
Permit create/update/delete operations using this key
.PARAMETER Description
No description available.
.PARAMETER Username
No description available.
.PARAMETER Password
No description available.
.OUTPUTS

TokenProvisionRequest<PSCustomObject>
#>

function Initialize-TokenProvisionRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Expires},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${WriteEnabled},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Username},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => TokenProvisionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $Username) {
            throw "invalid value for 'Username', 'Username' cannot be null."
        }

        if ($Username.length -lt 1) {
            throw "invalid value for 'Username', the character length must be great than or equal to 1."
        }

        if ($null -eq $Password) {
            throw "invalid value for 'Password', 'Password' cannot be null."
        }

        if ($Password.length -lt 1) {
            throw "invalid value for 'Password', the character length must be great than or equal to 1."
        }


        $PSO = [PSCustomObject]@{
            "expires" = ${Expires}
            "write_enabled" = ${WriteEnabled}
            "description" = ${Description}
            "username" = ${Username}
            "password" = ${Password}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to TokenProvisionRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to TokenProvisionRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

TokenProvisionRequest<PSCustomObject>
#>
function ConvertFrom-JsonToTokenProvisionRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => TokenProvisionRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in TokenProvisionRequest
        $AllProperties = ("expires", "write_enabled", "description", "username", "password")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'username' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "username"))) {
            throw "Error! JSON cannot be serialized due to the required property 'username' missing."
        } else {
            $Username = $JsonParameters.PSobject.Properties["username"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) {
            throw "Error! JSON cannot be serialized due to the required property 'password' missing."
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "expires"))) { #optional property not found
            $Expires = $null
        } else {
            $Expires = $JsonParameters.PSobject.Properties["expires"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "write_enabled"))) { #optional property not found
            $WriteEnabled = $null
        } else {
            $WriteEnabled = $JsonParameters.PSobject.Properties["write_enabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "expires" = ${Expires}
            "write_enabled" = ${WriteEnabled}
            "description" = ${Description}
            "username" = ${Username}
            "password" = ${Password}
        }

        return $PSO
    }

}

