#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Name
No description available.
.PARAMETER Description
No description available.
.PARAMETER Version
* `1` - IKEv1 * `2` - IKEv2
.PARAMETER Mode
* `aggressive` - Aggressive * `main` - Main
.PARAMETER Proposals
No description available.
.PARAMETER PresharedKey
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

PatchedWritableIKEPolicyRequest<PSCustomObject>
#>

function Initialize-PatchedWritableIKEPolicyRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("1", "2")]
        [System.Nullable[Int32]]
        ${Version},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("aggressive", "main", "")]
        [String]
        ${Mode},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${Proposals},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PresharedKey},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PatchedWritableIKEPolicyRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if (!$Name -and $Name.length -gt 100) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 100."
        }

        if (!$Name -and $Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($Version -and $Version -gt 32767) {
          throw "invalid value for 'Version', must be smaller than or equal to 32767."
        }

        if ($Version -and $Version -lt 0) {
          throw "invalid value for 'Version', must be greater than or equal to 0."
        }


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "version" = ${Version}
            "mode" = ${Mode}
            "proposals" = ${Proposals}
            "preshared_key" = ${PresharedKey}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PatchedWritableIKEPolicyRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to PatchedWritableIKEPolicyRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PatchedWritableIKEPolicyRequest<PSCustomObject>
#>
function ConvertFrom-JsonToPatchedWritableIKEPolicyRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PatchedWritableIKEPolicyRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PatchedWritableIKEPolicyRequest
        $AllProperties = ("name", "description", "version", "mode", "proposals", "preshared_key", "comments", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "version"))) { #optional property not found
            $Version = $null
        } else {
            $Version = $JsonParameters.PSobject.Properties["version"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "proposals"))) { #optional property not found
            $Proposals = $null
        } else {
            $Proposals = $JsonParameters.PSobject.Properties["proposals"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "preshared_key"))) { #optional property not found
            $PresharedKey = $null
        } else {
            $PresharedKey = $JsonParameters.PSobject.Properties["preshared_key"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "description" = ${Description}
            "version" = ${Version}
            "mode" = ${Mode}
            "proposals" = ${Proposals}
            "preshared_key" = ${PresharedKey}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

