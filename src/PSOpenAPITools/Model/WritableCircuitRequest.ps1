#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Cid
Unique circuit ID
.PARAMETER Provider
No description available.
.PARAMETER ProviderAccount
No description available.
.PARAMETER Type
No description available.
.PARAMETER Status
* `planned` - Planned * `provisioning` - Provisioning * `active` - Active * `offline` - Offline * `deprovisioning` - Deprovisioning * `decommissioned` - Decommissioned
.PARAMETER Tenant
No description available.
.PARAMETER InstallDate
No description available.
.PARAMETER TerminationDate
No description available.
.PARAMETER CommitRate
Committed rate
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.OUTPUTS

WritableCircuitRequest<PSCustomObject>
#>

function Initialize-WritableCircuitRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Cid},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Provider},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ProviderAccount},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Type},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("planned", "provisioning", "active", "offline", "deprovisioning", "decommissioned")]
        [String]
        ${Status},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Tenant},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${InstallDate},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${TerminationDate},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CommitRate},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => WritableCircuitRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Cid) {
            throw "invalid value for 'Cid', 'Cid' cannot be null."
        }

        if ($Cid.length -gt 100) {
            throw "invalid value for 'Cid', the character length must be smaller than or equal to 100."
        }

        if ($Cid.length -lt 1) {
            throw "invalid value for 'Cid', the character length must be great than or equal to 1."
        }

        if ($null -eq $Provider) {
            throw "invalid value for 'Provider', 'Provider' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($CommitRate -and $CommitRate -gt 2147483647) {
          throw "invalid value for 'CommitRate', must be smaller than or equal to 2147483647."
        }

        if ($CommitRate -and $CommitRate -lt 0) {
          throw "invalid value for 'CommitRate', must be greater than or equal to 0."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "cid" = ${Cid}
            "provider" = ${Provider}
            "provider_account" = ${ProviderAccount}
            "type" = ${Type}
            "status" = ${Status}
            "tenant" = ${Tenant}
            "install_date" = ${InstallDate}
            "termination_date" = ${TerminationDate}
            "commit_rate" = ${CommitRate}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to WritableCircuitRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to WritableCircuitRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

WritableCircuitRequest<PSCustomObject>
#>
function ConvertFrom-JsonToWritableCircuitRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => WritableCircuitRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in WritableCircuitRequest
        $AllProperties = ("cid", "provider", "provider_account", "type", "status", "tenant", "install_date", "termination_date", "commit_rate", "description", "comments", "tags", "custom_fields")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'cid' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cid"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cid' missing."
        } else {
            $Cid = $JsonParameters.PSobject.Properties["cid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provider"))) {
            throw "Error! JSON cannot be serialized due to the required property 'provider' missing."
        } else {
            $Provider = $JsonParameters.PSobject.Properties["provider"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "provider_account"))) { #optional property not found
            $ProviderAccount = $null
        } else {
            $ProviderAccount = $JsonParameters.PSobject.Properties["provider_account"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) { #optional property not found
            $Status = $null
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tenant"))) { #optional property not found
            $Tenant = $null
        } else {
            $Tenant = $JsonParameters.PSobject.Properties["tenant"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "install_date"))) { #optional property not found
            $InstallDate = $null
        } else {
            $InstallDate = $JsonParameters.PSobject.Properties["install_date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "termination_date"))) { #optional property not found
            $TerminationDate = $null
        } else {
            $TerminationDate = $JsonParameters.PSobject.Properties["termination_date"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "commit_rate"))) { #optional property not found
            $CommitRate = $null
        } else {
            $CommitRate = $JsonParameters.PSobject.Properties["commit_rate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "cid" = ${Cid}
            "provider" = ${Provider}
            "provider_account" = ${ProviderAccount}
            "type" = ${Type}
            "status" = ${Status}
            "tenant" = ${Tenant}
            "install_date" = ${InstallDate}
            "termination_date" = ${TerminationDate}
            "commit_rate" = ${CommitRate}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
        }

        return $PSO
    }

}

