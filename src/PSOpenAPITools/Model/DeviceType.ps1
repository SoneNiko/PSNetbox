#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Adds support for custom fields and tags.

.PARAMETER Id
No description available.
.PARAMETER Url
No description available.
.PARAMETER Display
No description available.
.PARAMETER Manufacturer
No description available.
.PARAMETER DefaultPlatform
No description available.
.PARAMETER Model
No description available.
.PARAMETER Slug
No description available.
.PARAMETER PartNumber
Discrete part number (optional)
.PARAMETER UHeight
No description available.
.PARAMETER ExcludeFromUtilization
Devices of this type are excluded when calculating rack utilization.
.PARAMETER IsFullDepth
Device consumes both front and rear rack faces.
.PARAMETER SubdeviceRole
No description available.
.PARAMETER Airflow
No description available.
.PARAMETER Weight
No description available.
.PARAMETER WeightUnit
No description available.
.PARAMETER FrontImage
No description available.
.PARAMETER RearImage
No description available.
.PARAMETER Description
No description available.
.PARAMETER Comments
No description available.
.PARAMETER Tags
No description available.
.PARAMETER CustomFields
No description available.
.PARAMETER Created
No description available.
.PARAMETER LastUpdated
No description available.
.PARAMETER DeviceCount
No description available.
.PARAMETER ConsolePortTemplateCount
No description available.
.PARAMETER ConsoleServerPortTemplateCount
No description available.
.PARAMETER PowerPortTemplateCount
No description available.
.PARAMETER PowerOutletTemplateCount
No description available.
.PARAMETER InterfaceTemplateCount
No description available.
.PARAMETER FrontPortTemplateCount
No description available.
.PARAMETER RearPortTemplateCount
No description available.
.PARAMETER DeviceBayTemplateCount
No description available.
.PARAMETER ModuleBayTemplateCount
No description available.
.PARAMETER InventoryItemTemplateCount
No description available.
.OUTPUTS

DeviceType<PSCustomObject>
#>

function Initialize-DeviceType {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Url},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Display},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Manufacturer},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DefaultPlatform},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Model},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[-a-zA-Z0-9_]+$")]
        [String]
        ${Slug},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${PartNumber},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${UHeight} = 1.0,
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ExcludeFromUtilization},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${IsFullDepth},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${SubdeviceRole},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Airflow},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${Weight},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${WeightUnit},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FrontImage},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RearImage},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comments},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Tags},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${CustomFields},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${LastUpdated},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${DeviceCount},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ConsolePortTemplateCount},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ConsoleServerPortTemplateCount},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PowerPortTemplateCount},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${PowerOutletTemplateCount},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${InterfaceTemplateCount},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${FrontPortTemplateCount},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${RearPortTemplateCount},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${DeviceBayTemplateCount},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ModuleBayTemplateCount},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${InventoryItemTemplateCount}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => DeviceType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Url) {
            throw "invalid value for 'Url', 'Url' cannot be null."
        }

        if ($null -eq $Display) {
            throw "invalid value for 'Display', 'Display' cannot be null."
        }

        if ($null -eq $Manufacturer) {
            throw "invalid value for 'Manufacturer', 'Manufacturer' cannot be null."
        }

        if ($null -eq $Model) {
            throw "invalid value for 'Model', 'Model' cannot be null."
        }

        if ($Model.length -gt 100) {
            throw "invalid value for 'Model', the character length must be smaller than or equal to 100."
        }

        if ($null -eq $Slug) {
            throw "invalid value for 'Slug', 'Slug' cannot be null."
        }

        if ($Slug.length -gt 100) {
            throw "invalid value for 'Slug', the character length must be smaller than or equal to 100."
        }

        if (!$PartNumber -and $PartNumber.length -gt 50) {
            throw "invalid value for 'PartNumber', the character length must be smaller than or equal to 50."
        }

        if ($UHeight -and $UHeight -ge 1000) {
          throw "invalid value for 'UHeight', must be smaller than 1000."
        }

        if ($UHeight -and $UHeight -lt 0) {
          throw "invalid value for 'UHeight', must be greater than or equal to 0."
        }

        if ($Weight -and $Weight -ge 1000000) {
          throw "invalid value for 'Weight', must be smaller than 1000000."
        }

        if ($Weight -and $Weight -le -1000000) {
          throw "invalid value for 'Weight', must be greater than -1000000."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }

        if ($null -eq $DeviceCount) {
            throw "invalid value for 'DeviceCount', 'DeviceCount' cannot be null."
        }

        if ($null -eq $ConsolePortTemplateCount) {
            throw "invalid value for 'ConsolePortTemplateCount', 'ConsolePortTemplateCount' cannot be null."
        }

        if ($null -eq $ConsoleServerPortTemplateCount) {
            throw "invalid value for 'ConsoleServerPortTemplateCount', 'ConsoleServerPortTemplateCount' cannot be null."
        }

        if ($null -eq $PowerPortTemplateCount) {
            throw "invalid value for 'PowerPortTemplateCount', 'PowerPortTemplateCount' cannot be null."
        }

        if ($null -eq $PowerOutletTemplateCount) {
            throw "invalid value for 'PowerOutletTemplateCount', 'PowerOutletTemplateCount' cannot be null."
        }

        if ($null -eq $InterfaceTemplateCount) {
            throw "invalid value for 'InterfaceTemplateCount', 'InterfaceTemplateCount' cannot be null."
        }

        if ($null -eq $FrontPortTemplateCount) {
            throw "invalid value for 'FrontPortTemplateCount', 'FrontPortTemplateCount' cannot be null."
        }

        if ($null -eq $RearPortTemplateCount) {
            throw "invalid value for 'RearPortTemplateCount', 'RearPortTemplateCount' cannot be null."
        }

        if ($null -eq $DeviceBayTemplateCount) {
            throw "invalid value for 'DeviceBayTemplateCount', 'DeviceBayTemplateCount' cannot be null."
        }

        if ($null -eq $ModuleBayTemplateCount) {
            throw "invalid value for 'ModuleBayTemplateCount', 'ModuleBayTemplateCount' cannot be null."
        }

        if ($null -eq $InventoryItemTemplateCount) {
            throw "invalid value for 'InventoryItemTemplateCount', 'InventoryItemTemplateCount' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "manufacturer" = ${Manufacturer}
            "default_platform" = ${DefaultPlatform}
            "model" = ${Model}
            "slug" = ${Slug}
            "part_number" = ${PartNumber}
            "u_height" = ${UHeight}
            "exclude_from_utilization" = ${ExcludeFromUtilization}
            "is_full_depth" = ${IsFullDepth}
            "subdevice_role" = ${SubdeviceRole}
            "airflow" = ${Airflow}
            "weight" = ${Weight}
            "weight_unit" = ${WeightUnit}
            "front_image" = ${FrontImage}
            "rear_image" = ${RearImage}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "device_count" = ${DeviceCount}
            "console_port_template_count" = ${ConsolePortTemplateCount}
            "console_server_port_template_count" = ${ConsoleServerPortTemplateCount}
            "power_port_template_count" = ${PowerPortTemplateCount}
            "power_outlet_template_count" = ${PowerOutletTemplateCount}
            "interface_template_count" = ${InterfaceTemplateCount}
            "front_port_template_count" = ${FrontPortTemplateCount}
            "rear_port_template_count" = ${RearPortTemplateCount}
            "device_bay_template_count" = ${DeviceBayTemplateCount}
            "module_bay_template_count" = ${ModuleBayTemplateCount}
            "inventory_item_template_count" = ${InventoryItemTemplateCount}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to DeviceType<PSCustomObject>

.DESCRIPTION

Convert from JSON to DeviceType<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

DeviceType<PSCustomObject>
#>
function ConvertFrom-JsonToDeviceType {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => DeviceType' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in DeviceType
        $AllProperties = ("id", "url", "display", "manufacturer", "default_platform", "model", "slug", "part_number", "u_height", "exclude_from_utilization", "is_full_depth", "subdevice_role", "airflow", "weight", "weight_unit", "front_image", "rear_image", "description", "comments", "tags", "custom_fields", "created", "last_updated", "device_count", "console_port_template_count", "console_server_port_template_count", "power_port_template_count", "power_outlet_template_count", "interface_template_count", "front_port_template_count", "rear_port_template_count", "device_bay_template_count", "module_bay_template_count", "inventory_item_template_count")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "url"))) {
            throw "Error! JSON cannot be serialized due to the required property 'url' missing."
        } else {
            $Url = $JsonParameters.PSobject.Properties["url"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "display"))) {
            throw "Error! JSON cannot be serialized due to the required property 'display' missing."
        } else {
            $Display = $JsonParameters.PSobject.Properties["display"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manufacturer"))) {
            throw "Error! JSON cannot be serialized due to the required property 'manufacturer' missing."
        } else {
            $Manufacturer = $JsonParameters.PSobject.Properties["manufacturer"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "model"))) {
            throw "Error! JSON cannot be serialized due to the required property 'model' missing."
        } else {
            $Model = $JsonParameters.PSobject.Properties["model"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slug"))) {
            throw "Error! JSON cannot be serialized due to the required property 'slug' missing."
        } else {
            $Slug = $JsonParameters.PSobject.Properties["slug"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "created"))) {
            throw "Error! JSON cannot be serialized due to the required property 'created' missing."
        } else {
            $Created = $JsonParameters.PSobject.Properties["created"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "last_updated"))) {
            throw "Error! JSON cannot be serialized due to the required property 'last_updated' missing."
        } else {
            $LastUpdated = $JsonParameters.PSobject.Properties["last_updated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device_count' missing."
        } else {
            $DeviceCount = $JsonParameters.PSobject.Properties["device_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "console_port_template_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'console_port_template_count' missing."
        } else {
            $ConsolePortTemplateCount = $JsonParameters.PSobject.Properties["console_port_template_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "console_server_port_template_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'console_server_port_template_count' missing."
        } else {
            $ConsoleServerPortTemplateCount = $JsonParameters.PSobject.Properties["console_server_port_template_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "power_port_template_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'power_port_template_count' missing."
        } else {
            $PowerPortTemplateCount = $JsonParameters.PSobject.Properties["power_port_template_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "power_outlet_template_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'power_outlet_template_count' missing."
        } else {
            $PowerOutletTemplateCount = $JsonParameters.PSobject.Properties["power_outlet_template_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "interface_template_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'interface_template_count' missing."
        } else {
            $InterfaceTemplateCount = $JsonParameters.PSobject.Properties["interface_template_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "front_port_template_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'front_port_template_count' missing."
        } else {
            $FrontPortTemplateCount = $JsonParameters.PSobject.Properties["front_port_template_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rear_port_template_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'rear_port_template_count' missing."
        } else {
            $RearPortTemplateCount = $JsonParameters.PSobject.Properties["rear_port_template_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_bay_template_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'device_bay_template_count' missing."
        } else {
            $DeviceBayTemplateCount = $JsonParameters.PSobject.Properties["device_bay_template_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "module_bay_template_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'module_bay_template_count' missing."
        } else {
            $ModuleBayTemplateCount = $JsonParameters.PSobject.Properties["module_bay_template_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inventory_item_template_count"))) {
            throw "Error! JSON cannot be serialized due to the required property 'inventory_item_template_count' missing."
        } else {
            $InventoryItemTemplateCount = $JsonParameters.PSobject.Properties["inventory_item_template_count"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "default_platform"))) { #optional property not found
            $DefaultPlatform = $null
        } else {
            $DefaultPlatform = $JsonParameters.PSobject.Properties["default_platform"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "part_number"))) { #optional property not found
            $PartNumber = $null
        } else {
            $PartNumber = $JsonParameters.PSobject.Properties["part_number"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "u_height"))) { #optional property not found
            $UHeight = $null
        } else {
            $UHeight = $JsonParameters.PSobject.Properties["u_height"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "exclude_from_utilization"))) { #optional property not found
            $ExcludeFromUtilization = $null
        } else {
            $ExcludeFromUtilization = $JsonParameters.PSobject.Properties["exclude_from_utilization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "is_full_depth"))) { #optional property not found
            $IsFullDepth = $null
        } else {
            $IsFullDepth = $JsonParameters.PSobject.Properties["is_full_depth"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subdevice_role"))) { #optional property not found
            $SubdeviceRole = $null
        } else {
            $SubdeviceRole = $JsonParameters.PSobject.Properties["subdevice_role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "airflow"))) { #optional property not found
            $Airflow = $null
        } else {
            $Airflow = $JsonParameters.PSobject.Properties["airflow"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight"))) { #optional property not found
            $Weight = $null
        } else {
            $Weight = $JsonParameters.PSobject.Properties["weight"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "weight_unit"))) { #optional property not found
            $WeightUnit = $null
        } else {
            $WeightUnit = $JsonParameters.PSobject.Properties["weight_unit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "front_image"))) { #optional property not found
            $FrontImage = $null
        } else {
            $FrontImage = $JsonParameters.PSobject.Properties["front_image"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "rear_image"))) { #optional property not found
            $RearImage = $null
        } else {
            $RearImage = $JsonParameters.PSobject.Properties["rear_image"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comments"))) { #optional property not found
            $Comments = $null
        } else {
            $Comments = $JsonParameters.PSobject.Properties["comments"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tags"))) { #optional property not found
            $Tags = $null
        } else {
            $Tags = $JsonParameters.PSobject.Properties["tags"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "custom_fields"))) { #optional property not found
            $CustomFields = $null
        } else {
            $CustomFields = $JsonParameters.PSobject.Properties["custom_fields"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "url" = ${Url}
            "display" = ${Display}
            "manufacturer" = ${Manufacturer}
            "default_platform" = ${DefaultPlatform}
            "model" = ${Model}
            "slug" = ${Slug}
            "part_number" = ${PartNumber}
            "u_height" = ${UHeight}
            "exclude_from_utilization" = ${ExcludeFromUtilization}
            "is_full_depth" = ${IsFullDepth}
            "subdevice_role" = ${SubdeviceRole}
            "airflow" = ${Airflow}
            "weight" = ${Weight}
            "weight_unit" = ${WeightUnit}
            "front_image" = ${FrontImage}
            "rear_image" = ${RearImage}
            "description" = ${Description}
            "comments" = ${Comments}
            "tags" = ${Tags}
            "custom_fields" = ${CustomFields}
            "created" = ${Created}
            "last_updated" = ${LastUpdated}
            "device_count" = ${DeviceCount}
            "console_port_template_count" = ${ConsolePortTemplateCount}
            "console_server_port_template_count" = ${ConsoleServerPortTemplateCount}
            "power_port_template_count" = ${PowerPortTemplateCount}
            "power_outlet_template_count" = ${PowerOutletTemplateCount}
            "interface_template_count" = ${InterfaceTemplateCount}
            "front_port_template_count" = ${FrontPortTemplateCount}
            "rear_port_template_count" = ${RearPortTemplateCount}
            "device_bay_template_count" = ${DeviceBayTemplateCount}
            "module_bay_template_count" = ${ModuleBayTemplateCount}
            "inventory_item_template_count" = ${InventoryItemTemplateCount}
        }

        return $PSO
    }

}

