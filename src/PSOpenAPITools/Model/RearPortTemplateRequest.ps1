#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)

.PARAMETER DeviceType
No description available.
.PARAMETER ModuleType
No description available.
.PARAMETER Name
{module} is accepted as a substitution for the module bay position when attached to a module type.
.PARAMETER Label
Physical label
.PARAMETER Type
* `8p8c` - 8P8C * `8p6c` - 8P6C * `8p4c` - 8P4C * `8p2c` - 8P2C * `6p6c` - 6P6C * `6p4c` - 6P4C * `6p2c` - 6P2C * `4p4c` - 4P4C * `4p2c` - 4P2C * `gg45` - GG45 * `tera-4p` - TERA 4P * `tera-2p` - TERA 2P * `tera-1p` - TERA 1P * `110-punch` - 110 Punch * `bnc` - BNC * `f` - F Connector * `n` - N Connector * `mrj21` - MRJ21 * `fc` - FC * `lc` - LC * `lc-pc` - LC/PC * `lc-upc` - LC/UPC * `lc-apc` - LC/APC * `lsh` - LSH * `lsh-pc` - LSH/PC * `lsh-upc` - LSH/UPC * `lsh-apc` - LSH/APC * `lx5` - LX.5 * `lx5-pc` - LX.5/PC * `lx5-upc` - LX.5/UPC * `lx5-apc` - LX.5/APC * `mpo` - MPO * `mtrj` - MTRJ * `sc` - SC * `sc-pc` - SC/PC * `sc-upc` - SC/UPC * `sc-apc` - SC/APC * `st` - ST * `cs` - CS * `sn` - SN * `sma-905` - SMA 905 * `sma-906` - SMA 906 * `urm-p2` - URM-P2 * `urm-p4` - URM-P4 * `urm-p8` - URM-P8 * `splice` - Splice * `other` - Other
.PARAMETER Color
No description available.
.PARAMETER Positions
No description available.
.PARAMETER Description
No description available.
.OUTPUTS

RearPortTemplateRequest<PSCustomObject>
#>

function Initialize-RearPortTemplateRequest {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${DeviceType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ModuleType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("8p8c", "8p6c", "8p4c", "8p2c", "6p6c", "6p4c", "6p2c", "4p4c", "4p2c", "gg45", "tera-4p", "tera-2p", "tera-1p", "110-punch", "bnc", "f", "n", "mrj21", "fc", "lc", "lc-pc", "lc-upc", "lc-apc", "lsh", "lsh-pc", "lsh-upc", "lsh-apc", "lx5", "lx5-pc", "lx5-upc", "lx5-apc", "mpo", "mtrj", "sc", "sc-pc", "sc-upc", "sc-apc", "st", "cs", "sn", "sma-905", "sma-906", "urm-p2", "urm-p4", "urm-p8", "splice", "other")]
        [String]
        ${Type},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidatePattern("^[0-9a-f]{6}$")]
        [String]
        ${Color},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Positions},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RearPortTemplateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Name) {
            throw "invalid value for 'Name', 'Name' cannot be null."
        }

        if ($Name.length -gt 64) {
            throw "invalid value for 'Name', the character length must be smaller than or equal to 64."
        }

        if ($Name.length -lt 1) {
            throw "invalid value for 'Name', the character length must be great than or equal to 1."
        }

        if (!$Label -and $Label.length -gt 64) {
            throw "invalid value for 'Label', the character length must be smaller than or equal to 64."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if (!$Color -and $Color.length -gt 6) {
            throw "invalid value for 'Color', the character length must be smaller than or equal to 6."
        }

        if ($Positions -and $Positions -gt 1024) {
          throw "invalid value for 'Positions', must be smaller than or equal to 1024."
        }

        if ($Positions -and $Positions -lt 1) {
          throw "invalid value for 'Positions', must be greater than or equal to 1."
        }

        if (!$Description -and $Description.length -gt 200) {
            throw "invalid value for 'Description', the character length must be smaller than or equal to 200."
        }


        $PSO = [PSCustomObject]@{
            "device_type" = ${DeviceType}
            "module_type" = ${ModuleType}
            "name" = ${Name}
            "label" = ${Label}
            "type" = ${Type}
            "color" = ${Color}
            "positions" = ${Positions}
            "description" = ${Description}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RearPortTemplateRequest<PSCustomObject>

.DESCRIPTION

Convert from JSON to RearPortTemplateRequest<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RearPortTemplateRequest<PSCustomObject>
#>
function ConvertFrom-JsonToRearPortTemplateRequest {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RearPortTemplateRequest' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RearPortTemplateRequest
        $AllProperties = ("device_type", "module_type", "name", "label", "type", "color", "positions", "description")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'name' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) {
            throw "Error! JSON cannot be serialized due to the required property 'name' missing."
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "device_type"))) { #optional property not found
            $DeviceType = $null
        } else {
            $DeviceType = $JsonParameters.PSobject.Properties["device_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "module_type"))) { #optional property not found
            $ModuleType = $null
        } else {
            $ModuleType = $JsonParameters.PSobject.Properties["module_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "color"))) { #optional property not found
            $Color = $null
        } else {
            $Color = $JsonParameters.PSobject.Properties["color"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "positions"))) { #optional property not found
            $Positions = $null
        } else {
            $Positions = $JsonParameters.PSobject.Properties["positions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        $PSO = [PSCustomObject]@{
            "device_type" = ${DeviceType}
            "module_type" = ${ModuleType}
            "name" = ${Name}
            "label" = ${Label}
            "type" = ${Type}
            "color" = ${Color}
            "positions" = ${Positions}
            "description" = ${Description}
        }

        return $PSO
    }

}

