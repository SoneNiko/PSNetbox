#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WirelessLANGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-WirelessWirelessLanGroupsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WirelessLANGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLanGroupsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lan-groups/'

        if (!$WirelessLANGroupRequest) {
            throw "Error! The required parameter `WirelessLANGroupRequest` missing when calling wirelessWirelessLanGroupsBulkDestroy."
        }

        $LocalVarBodyParameter = $WirelessLANGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WirelessLANGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLANGroup[]
#>
function Invoke-WirelessWirelessLanGroupsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WirelessLANGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLanGroupsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lan-groups/'

        if (!$WirelessLANGroupRequest) {
            throw "Error! The required parameter `WirelessLANGroupRequest` missing when calling wirelessWirelessLanGroupsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $WirelessLANGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLANGroup[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WirelessLANGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLANGroup[]
#>
function Invoke-WirelessWirelessLanGroupsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WirelessLANGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLanGroupsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lan-groups/'

        if (!$WirelessLANGroupRequest) {
            throw "Error! The required parameter `WirelessLANGroupRequest` missing when calling wirelessWirelessLanGroupsBulkUpdate."
        }

        $LocalVarBodyParameter = $WirelessLANGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLANGroup[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableWirelessLANGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLANGroup
#>
function Invoke-WirelessWirelessLanGroupsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableWirelessLANGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLanGroupsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lan-groups/'

        if (!$WritableWirelessLANGroupRequest) {
            throw "Error! The required parameter `WritableWirelessLANGroupRequest` missing when calling wirelessWirelessLanGroupsCreate."
        }

        $LocalVarBodyParameter = $WritableWirelessLANGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLANGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless LAN group.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-WirelessWirelessLanGroupsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLanGroupsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/wireless/wireless-lan-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLanGroupsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Parent
No description available.

.PARAMETER ParentN
No description available.

.PARAMETER ParentId
No description available.

.PARAMETER ParentIdN
No description available.

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedWirelessLANGroupList
#>
function Invoke-WirelessWirelessLanGroupsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Parent},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ParentN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentId},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentIdN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLanGroupsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/wireless/wireless-lan-groups/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Parent) {
            $LocalVarQueryParameters['parent'] = $Parent
        }

        if ($ParentN) {
            $LocalVarQueryParameters['parent__n'] = $ParentN
        }

        if ($ParentId) {
            $LocalVarQueryParameters['parent_id'] = $ParentId
        }

        if ($ParentIdN) {
            $LocalVarQueryParameters['parent_id__n'] = $ParentIdN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedWirelessLANGroupList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless LAN group.

.PARAMETER PatchedWritableWirelessLANGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLANGroup
#>
function Invoke-WirelessWirelessLanGroupsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableWirelessLANGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLanGroupsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lan-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLanGroupsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableWirelessLANGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLANGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless LAN group.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLANGroup
#>
function Invoke-WirelessWirelessLanGroupsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLanGroupsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/wireless/wireless-lan-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLanGroupsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLANGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless LAN group.

.PARAMETER WritableWirelessLANGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLANGroup
#>
function Invoke-WirelessWirelessLanGroupsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableWirelessLANGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLanGroupsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lan-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLanGroupsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableWirelessLANGroupRequest) {
            throw "Error! The required parameter `WritableWirelessLANGroupRequest` missing when calling wirelessWirelessLanGroupsUpdate."
        }

        $LocalVarBodyParameter = $WritableWirelessLANGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLANGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WirelessLANRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-WirelessWirelessLansBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WirelessLANRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLansBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lans/'

        if (!$WirelessLANRequest) {
            throw "Error! The required parameter `WirelessLANRequest` missing when calling wirelessWirelessLansBulkDestroy."
        }

        $LocalVarBodyParameter = $WirelessLANRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WirelessLANRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLAN[]
#>
function Invoke-WirelessWirelessLansBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WirelessLANRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLansBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lans/'

        if (!$WirelessLANRequest) {
            throw "Error! The required parameter `WirelessLANRequest` missing when calling wirelessWirelessLansBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $WirelessLANRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLAN[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WirelessLANRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLAN[]
#>
function Invoke-WirelessWirelessLansBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WirelessLANRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLansBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lans/'

        if (!$WirelessLANRequest) {
            throw "Error! The required parameter `WirelessLANRequest` missing when calling wirelessWirelessLansBulkUpdate."
        }

        $LocalVarBodyParameter = $WirelessLANRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLAN[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableWirelessLANRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLAN
#>
function Invoke-WirelessWirelessLansCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableWirelessLANRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLansCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lans/'

        if (!$WritableWirelessLANRequest) {
            throw "Error! The required parameter `WritableWirelessLANRequest` missing when calling wirelessWirelessLansCreate."
        }

        $LocalVarBodyParameter = $WritableWirelessLANRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLAN" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless LAN.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-WirelessWirelessLansDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLansDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/wireless/wireless-lans/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLansDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AuthCipher
No description available.

.PARAMETER AuthCipherN
No description available.

.PARAMETER AuthPsk
No description available.

.PARAMETER AuthPskEmpty
No description available.

.PARAMETER AuthPskIc
No description available.

.PARAMETER AuthPskIe
No description available.

.PARAMETER AuthPskIew
No description available.

.PARAMETER AuthPskIsw
No description available.

.PARAMETER AuthPskN
No description available.

.PARAMETER AuthPskNic
No description available.

.PARAMETER AuthPskNie
No description available.

.PARAMETER AuthPskNiew
No description available.

.PARAMETER AuthPskNisw
No description available.

.PARAMETER AuthType
No description available.

.PARAMETER AuthTypeN
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Group
No description available.

.PARAMETER GroupN
No description available.

.PARAMETER GroupId
No description available.

.PARAMETER GroupIdN
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Ssid
No description available.

.PARAMETER SsidEmpty
No description available.

.PARAMETER SsidIc
No description available.

.PARAMETER SsidIe
No description available.

.PARAMETER SsidIew
No description available.

.PARAMETER SsidIsw
No description available.

.PARAMETER SsidN
No description available.

.PARAMETER SsidNic
No description available.

.PARAMETER SsidNie
No description available.

.PARAMETER SsidNiew
No description available.

.PARAMETER SsidNisw
No description available.

.PARAMETER Status
No description available.

.PARAMETER StatusN
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantGroup
Tenant Group (slug)

.PARAMETER TenantGroupN
Tenant Group (slug)

.PARAMETER TenantGroupId
Tenant Group (ID)

.PARAMETER TenantGroupIdN
Tenant Group (ID)

.PARAMETER TenantId
Tenant (ID)

.PARAMETER TenantIdN
Tenant (ID)

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VlanId
No description available.

.PARAMETER VlanIdN
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedWirelessLANList
#>
function Invoke-WirelessWirelessLansList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthCipher},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthCipherN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPsk},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AuthPskEmpty},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskIc},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskIe},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskIew},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskIsw},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskN},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskNic},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskNie},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskNiew},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskNisw},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthType},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthTypeN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Group},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupN},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupId},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupIdN},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Ssid},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SsidEmpty},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidIc},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidIe},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidIew},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidIsw},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidN},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidNic},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidNie},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidNiew},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidNisw},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Status},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${StatusN},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroup},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupN},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupId},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupIdN},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VlanId},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VlanIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLansList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/wireless/wireless-lans/'

        if ($AuthCipher) {
            $LocalVarQueryParameters['auth_cipher'] = $AuthCipher
        }

        if ($AuthCipherN) {
            $LocalVarQueryParameters['auth_cipher__n'] = $AuthCipherN
        }

        if ($AuthPsk) {
            $LocalVarQueryParameters['auth_psk'] = $AuthPsk
        }

        if ($AuthPskEmpty) {
            $LocalVarQueryParameters['auth_psk__empty'] = $AuthPskEmpty
        }

        if ($AuthPskIc) {
            $LocalVarQueryParameters['auth_psk__ic'] = $AuthPskIc
        }

        if ($AuthPskIe) {
            $LocalVarQueryParameters['auth_psk__ie'] = $AuthPskIe
        }

        if ($AuthPskIew) {
            $LocalVarQueryParameters['auth_psk__iew'] = $AuthPskIew
        }

        if ($AuthPskIsw) {
            $LocalVarQueryParameters['auth_psk__isw'] = $AuthPskIsw
        }

        if ($AuthPskN) {
            $LocalVarQueryParameters['auth_psk__n'] = $AuthPskN
        }

        if ($AuthPskNic) {
            $LocalVarQueryParameters['auth_psk__nic'] = $AuthPskNic
        }

        if ($AuthPskNie) {
            $LocalVarQueryParameters['auth_psk__nie'] = $AuthPskNie
        }

        if ($AuthPskNiew) {
            $LocalVarQueryParameters['auth_psk__niew'] = $AuthPskNiew
        }

        if ($AuthPskNisw) {
            $LocalVarQueryParameters['auth_psk__nisw'] = $AuthPskNisw
        }

        if ($AuthType) {
            $LocalVarQueryParameters['auth_type'] = $AuthType
        }

        if ($AuthTypeN) {
            $LocalVarQueryParameters['auth_type__n'] = $AuthTypeN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Group) {
            $LocalVarQueryParameters['group'] = $Group
        }

        if ($GroupN) {
            $LocalVarQueryParameters['group__n'] = $GroupN
        }

        if ($GroupId) {
            $LocalVarQueryParameters['group_id'] = $GroupId
        }

        if ($GroupIdN) {
            $LocalVarQueryParameters['group_id__n'] = $GroupIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Ssid) {
            $LocalVarQueryParameters['ssid'] = $Ssid
        }

        if ($SsidEmpty) {
            $LocalVarQueryParameters['ssid__empty'] = $SsidEmpty
        }

        if ($SsidIc) {
            $LocalVarQueryParameters['ssid__ic'] = $SsidIc
        }

        if ($SsidIe) {
            $LocalVarQueryParameters['ssid__ie'] = $SsidIe
        }

        if ($SsidIew) {
            $LocalVarQueryParameters['ssid__iew'] = $SsidIew
        }

        if ($SsidIsw) {
            $LocalVarQueryParameters['ssid__isw'] = $SsidIsw
        }

        if ($SsidN) {
            $LocalVarQueryParameters['ssid__n'] = $SsidN
        }

        if ($SsidNic) {
            $LocalVarQueryParameters['ssid__nic'] = $SsidNic
        }

        if ($SsidNie) {
            $LocalVarQueryParameters['ssid__nie'] = $SsidNie
        }

        if ($SsidNiew) {
            $LocalVarQueryParameters['ssid__niew'] = $SsidNiew
        }

        if ($SsidNisw) {
            $LocalVarQueryParameters['ssid__nisw'] = $SsidNisw
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($StatusN) {
            $LocalVarQueryParameters['status__n'] = $StatusN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantGroup) {
            $LocalVarQueryParameters['tenant_group'] = $TenantGroup
        }

        if ($TenantGroupN) {
            $LocalVarQueryParameters['tenant_group__n'] = $TenantGroupN
        }

        if ($TenantGroupId) {
            $LocalVarQueryParameters['tenant_group_id'] = $TenantGroupId
        }

        if ($TenantGroupIdN) {
            $LocalVarQueryParameters['tenant_group_id__n'] = $TenantGroupIdN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VlanId) {
            $LocalVarQueryParameters['vlan_id'] = $VlanId
        }

        if ($VlanIdN) {
            $LocalVarQueryParameters['vlan_id__n'] = $VlanIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedWirelessLANList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless LAN.

.PARAMETER PatchedWritableWirelessLANRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLAN
#>
function Invoke-WirelessWirelessLansPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableWirelessLANRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLansPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lans/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLansPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableWirelessLANRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLAN" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless LAN.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLAN
#>
function Invoke-WirelessWirelessLansRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLansRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/wireless/wireless-lans/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLansRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLAN" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless LAN.

.PARAMETER WritableWirelessLANRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLAN
#>
function Invoke-WirelessWirelessLansUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableWirelessLANRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLansUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-lans/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLansUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableWirelessLANRequest) {
            throw "Error! The required parameter `WritableWirelessLANRequest` missing when calling wirelessWirelessLansUpdate."
        }

        $LocalVarBodyParameter = $WritableWirelessLANRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLAN" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WirelessLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-WirelessWirelessLinksBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WirelessLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLinksBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-links/'

        if (!$WirelessLinkRequest) {
            throw "Error! The required parameter `WirelessLinkRequest` missing when calling wirelessWirelessLinksBulkDestroy."
        }

        $LocalVarBodyParameter = $WirelessLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WirelessLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLink[]
#>
function Invoke-WirelessWirelessLinksBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WirelessLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLinksBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-links/'

        if (!$WirelessLinkRequest) {
            throw "Error! The required parameter `WirelessLinkRequest` missing when calling wirelessWirelessLinksBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $WirelessLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLink[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WirelessLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLink[]
#>
function Invoke-WirelessWirelessLinksBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WirelessLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLinksBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-links/'

        if (!$WirelessLinkRequest) {
            throw "Error! The required parameter `WirelessLinkRequest` missing when calling wirelessWirelessLinksBulkUpdate."
        }

        $LocalVarBodyParameter = $WirelessLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLink[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableWirelessLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLink
#>
function Invoke-WirelessWirelessLinksCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableWirelessLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLinksCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-links/'

        if (!$WritableWirelessLinkRequest) {
            throw "Error! The required parameter `WritableWirelessLinkRequest` missing when calling wirelessWirelessLinksCreate."
        }

        $LocalVarBodyParameter = $WritableWirelessLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLink" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless link.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-WirelessWirelessLinksDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLinksDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/wireless/wireless-links/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLinksDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AuthCipher
No description available.

.PARAMETER AuthCipherN
No description available.

.PARAMETER AuthPsk
No description available.

.PARAMETER AuthPskEmpty
No description available.

.PARAMETER AuthPskIc
No description available.

.PARAMETER AuthPskIe
No description available.

.PARAMETER AuthPskIew
No description available.

.PARAMETER AuthPskIsw
No description available.

.PARAMETER AuthPskN
No description available.

.PARAMETER AuthPskNic
No description available.

.PARAMETER AuthPskNie
No description available.

.PARAMETER AuthPskNiew
No description available.

.PARAMETER AuthPskNisw
No description available.

.PARAMETER AuthType
No description available.

.PARAMETER AuthTypeN
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER InterfaceAId
No description available.

.PARAMETER InterfaceAIdEmpty
No description available.

.PARAMETER InterfaceAIdGt
No description available.

.PARAMETER InterfaceAIdGte
No description available.

.PARAMETER InterfaceAIdLt
No description available.

.PARAMETER InterfaceAIdLte
No description available.

.PARAMETER InterfaceAIdN
No description available.

.PARAMETER InterfaceBId
No description available.

.PARAMETER InterfaceBIdEmpty
No description available.

.PARAMETER InterfaceBIdGt
No description available.

.PARAMETER InterfaceBIdGte
No description available.

.PARAMETER InterfaceBIdLt
No description available.

.PARAMETER InterfaceBIdLte
No description available.

.PARAMETER InterfaceBIdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Ssid
No description available.

.PARAMETER SsidEmpty
No description available.

.PARAMETER SsidIc
No description available.

.PARAMETER SsidIe
No description available.

.PARAMETER SsidIew
No description available.

.PARAMETER SsidIsw
No description available.

.PARAMETER SsidN
No description available.

.PARAMETER SsidNic
No description available.

.PARAMETER SsidNie
No description available.

.PARAMETER SsidNiew
No description available.

.PARAMETER SsidNisw
No description available.

.PARAMETER Status
No description available.

.PARAMETER StatusN
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantGroup
Tenant Group (slug)

.PARAMETER TenantGroupN
Tenant Group (slug)

.PARAMETER TenantGroupId
Tenant Group (ID)

.PARAMETER TenantGroupIdN
Tenant Group (ID)

.PARAMETER TenantId
Tenant (ID)

.PARAMETER TenantIdN
Tenant (ID)

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedWirelessLinkList
#>
function Invoke-WirelessWirelessLinksList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthCipher},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthCipherN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPsk},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AuthPskEmpty},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskIc},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskIe},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskIew},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskIsw},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskN},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskNic},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskNie},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskNiew},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthPskNisw},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthType},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AuthTypeN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceAId},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceAIdEmpty},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceAIdGt},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceAIdGte},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceAIdLt},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceAIdLte},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceAIdN},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceBId},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceBIdEmpty},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceBIdGt},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceBIdGte},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceBIdLt},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceBIdLte},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceBIdN},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Ssid},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SsidEmpty},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidIc},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidIe},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidIew},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidIsw},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidN},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidNic},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidNie},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidNiew},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SsidNisw},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Status},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${StatusN},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroup},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupN},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupId},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupIdN},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLinksList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/wireless/wireless-links/'

        if ($AuthCipher) {
            $LocalVarQueryParameters['auth_cipher'] = $AuthCipher
        }

        if ($AuthCipherN) {
            $LocalVarQueryParameters['auth_cipher__n'] = $AuthCipherN
        }

        if ($AuthPsk) {
            $LocalVarQueryParameters['auth_psk'] = $AuthPsk
        }

        if ($AuthPskEmpty) {
            $LocalVarQueryParameters['auth_psk__empty'] = $AuthPskEmpty
        }

        if ($AuthPskIc) {
            $LocalVarQueryParameters['auth_psk__ic'] = $AuthPskIc
        }

        if ($AuthPskIe) {
            $LocalVarQueryParameters['auth_psk__ie'] = $AuthPskIe
        }

        if ($AuthPskIew) {
            $LocalVarQueryParameters['auth_psk__iew'] = $AuthPskIew
        }

        if ($AuthPskIsw) {
            $LocalVarQueryParameters['auth_psk__isw'] = $AuthPskIsw
        }

        if ($AuthPskN) {
            $LocalVarQueryParameters['auth_psk__n'] = $AuthPskN
        }

        if ($AuthPskNic) {
            $LocalVarQueryParameters['auth_psk__nic'] = $AuthPskNic
        }

        if ($AuthPskNie) {
            $LocalVarQueryParameters['auth_psk__nie'] = $AuthPskNie
        }

        if ($AuthPskNiew) {
            $LocalVarQueryParameters['auth_psk__niew'] = $AuthPskNiew
        }

        if ($AuthPskNisw) {
            $LocalVarQueryParameters['auth_psk__nisw'] = $AuthPskNisw
        }

        if ($AuthType) {
            $LocalVarQueryParameters['auth_type'] = $AuthType
        }

        if ($AuthTypeN) {
            $LocalVarQueryParameters['auth_type__n'] = $AuthTypeN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($InterfaceAId) {
            $LocalVarQueryParameters['interface_a_id'] = $InterfaceAId
        }

        if ($InterfaceAIdEmpty) {
            $LocalVarQueryParameters['interface_a_id__empty'] = $InterfaceAIdEmpty
        }

        if ($InterfaceAIdGt) {
            $LocalVarQueryParameters['interface_a_id__gt'] = $InterfaceAIdGt
        }

        if ($InterfaceAIdGte) {
            $LocalVarQueryParameters['interface_a_id__gte'] = $InterfaceAIdGte
        }

        if ($InterfaceAIdLt) {
            $LocalVarQueryParameters['interface_a_id__lt'] = $InterfaceAIdLt
        }

        if ($InterfaceAIdLte) {
            $LocalVarQueryParameters['interface_a_id__lte'] = $InterfaceAIdLte
        }

        if ($InterfaceAIdN) {
            $LocalVarQueryParameters['interface_a_id__n'] = $InterfaceAIdN
        }

        if ($InterfaceBId) {
            $LocalVarQueryParameters['interface_b_id'] = $InterfaceBId
        }

        if ($InterfaceBIdEmpty) {
            $LocalVarQueryParameters['interface_b_id__empty'] = $InterfaceBIdEmpty
        }

        if ($InterfaceBIdGt) {
            $LocalVarQueryParameters['interface_b_id__gt'] = $InterfaceBIdGt
        }

        if ($InterfaceBIdGte) {
            $LocalVarQueryParameters['interface_b_id__gte'] = $InterfaceBIdGte
        }

        if ($InterfaceBIdLt) {
            $LocalVarQueryParameters['interface_b_id__lt'] = $InterfaceBIdLt
        }

        if ($InterfaceBIdLte) {
            $LocalVarQueryParameters['interface_b_id__lte'] = $InterfaceBIdLte
        }

        if ($InterfaceBIdN) {
            $LocalVarQueryParameters['interface_b_id__n'] = $InterfaceBIdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Ssid) {
            $LocalVarQueryParameters['ssid'] = $Ssid
        }

        if ($SsidEmpty) {
            $LocalVarQueryParameters['ssid__empty'] = $SsidEmpty
        }

        if ($SsidIc) {
            $LocalVarQueryParameters['ssid__ic'] = $SsidIc
        }

        if ($SsidIe) {
            $LocalVarQueryParameters['ssid__ie'] = $SsidIe
        }

        if ($SsidIew) {
            $LocalVarQueryParameters['ssid__iew'] = $SsidIew
        }

        if ($SsidIsw) {
            $LocalVarQueryParameters['ssid__isw'] = $SsidIsw
        }

        if ($SsidN) {
            $LocalVarQueryParameters['ssid__n'] = $SsidN
        }

        if ($SsidNic) {
            $LocalVarQueryParameters['ssid__nic'] = $SsidNic
        }

        if ($SsidNie) {
            $LocalVarQueryParameters['ssid__nie'] = $SsidNie
        }

        if ($SsidNiew) {
            $LocalVarQueryParameters['ssid__niew'] = $SsidNiew
        }

        if ($SsidNisw) {
            $LocalVarQueryParameters['ssid__nisw'] = $SsidNisw
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($StatusN) {
            $LocalVarQueryParameters['status__n'] = $StatusN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantGroup) {
            $LocalVarQueryParameters['tenant_group'] = $TenantGroup
        }

        if ($TenantGroupN) {
            $LocalVarQueryParameters['tenant_group__n'] = $TenantGroupN
        }

        if ($TenantGroupId) {
            $LocalVarQueryParameters['tenant_group_id'] = $TenantGroupId
        }

        if ($TenantGroupIdN) {
            $LocalVarQueryParameters['tenant_group_id__n'] = $TenantGroupIdN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedWirelessLinkList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless link.

.PARAMETER PatchedWritableWirelessLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLink
#>
function Invoke-WirelessWirelessLinksPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableWirelessLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLinksPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-links/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLinksPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableWirelessLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLink" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless link.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLink
#>
function Invoke-WirelessWirelessLinksRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLinksRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/wireless/wireless-links/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLinksRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLink" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this wireless link.

.PARAMETER WritableWirelessLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

WirelessLink
#>
function Invoke-WirelessWirelessLinksUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableWirelessLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-WirelessWirelessLinksUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/wireless/wireless-links/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling wirelessWirelessLinksUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableWirelessLinkRequest) {
            throw "Error! The required parameter `WritableWirelessLinkRequest` missing when calling wirelessWirelessLinksUpdate."
        }

        $LocalVarBodyParameter = $WritableWirelessLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "WirelessLink" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

