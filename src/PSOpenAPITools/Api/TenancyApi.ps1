#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactAssignmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyContactAssignmentsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactAssignmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactAssignmentsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-assignments/'

        if (!$ContactAssignmentRequest) {
            throw "Error! The required parameter `ContactAssignmentRequest` missing when calling tenancyContactAssignmentsBulkDestroy."
        }

        $LocalVarBodyParameter = $ContactAssignmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactAssignmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactAssignment[]
#>
function Invoke-TenancyContactAssignmentsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactAssignmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactAssignmentsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-assignments/'

        if (!$ContactAssignmentRequest) {
            throw "Error! The required parameter `ContactAssignmentRequest` missing when calling tenancyContactAssignmentsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ContactAssignmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactAssignment[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactAssignmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactAssignment[]
#>
function Invoke-TenancyContactAssignmentsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactAssignmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactAssignmentsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-assignments/'

        if (!$ContactAssignmentRequest) {
            throw "Error! The required parameter `ContactAssignmentRequest` missing when calling tenancyContactAssignmentsBulkUpdate."
        }

        $LocalVarBodyParameter = $ContactAssignmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactAssignment[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableContactAssignmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactAssignment
#>
function Invoke-TenancyContactAssignmentsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableContactAssignmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactAssignmentsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-assignments/'

        if (!$WritableContactAssignmentRequest) {
            throw "Error! The required parameter `WritableContactAssignmentRequest` missing when calling tenancyContactAssignmentsCreate."
        }

        $LocalVarBodyParameter = $WritableContactAssignmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactAssignment" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact assignment.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyContactAssignmentsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactAssignmentsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/tenancy/contact-assignments/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactAssignmentsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactId
Contact (ID)

.PARAMETER ContactIdN
Contact (ID)

.PARAMETER ContentType
No description available.

.PARAMETER ContentTypeN
No description available.

.PARAMETER ContentTypeId
No description available.

.PARAMETER ContentTypeIdN
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Group
Contact group (slug)

.PARAMETER GroupN
Contact group (slug)

.PARAMETER GroupId
Contact group (ID)

.PARAMETER GroupIdN
Contact group (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ObjectId
No description available.

.PARAMETER ObjectIdEmpty
No description available.

.PARAMETER ObjectIdGt
No description available.

.PARAMETER ObjectIdGte
No description available.

.PARAMETER ObjectIdLt
No description available.

.PARAMETER ObjectIdLte
No description available.

.PARAMETER ObjectIdN
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Priority
No description available.

.PARAMETER PriorityN
No description available.

.PARAMETER Q
Search

.PARAMETER Role
Contact role (slug)

.PARAMETER RoleN
Contact role (slug)

.PARAMETER RoleId
Contact role (ID)

.PARAMETER RoleIdN
Contact role (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedContactAssignmentList
#>
function Invoke-TenancyContactAssignmentsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactIdN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypeN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ContentTypeId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ContentTypeIdN},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Group},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupN},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupIdN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectId},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ObjectIdEmpty},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdGt},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdGte},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdLt},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdLte},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdN},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Priority},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PriorityN},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactAssignmentsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/contact-assignments/'

        if ($ContactId) {
            $LocalVarQueryParameters['contact_id'] = $ContactId
        }

        if ($ContactIdN) {
            $LocalVarQueryParameters['contact_id__n'] = $ContactIdN
        }

        if ($ContentType) {
            $LocalVarQueryParameters['content_type'] = $ContentType
        }

        if ($ContentTypeN) {
            $LocalVarQueryParameters['content_type__n'] = $ContentTypeN
        }

        if ($ContentTypeId) {
            $LocalVarQueryParameters['content_type_id'] = $ContentTypeId
        }

        if ($ContentTypeIdN) {
            $LocalVarQueryParameters['content_type_id__n'] = $ContentTypeIdN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Group) {
            $LocalVarQueryParameters['group'] = $Group
        }

        if ($GroupN) {
            $LocalVarQueryParameters['group__n'] = $GroupN
        }

        if ($GroupId) {
            $LocalVarQueryParameters['group_id'] = $GroupId
        }

        if ($GroupIdN) {
            $LocalVarQueryParameters['group_id__n'] = $GroupIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ObjectId) {
            $LocalVarQueryParameters['object_id'] = $ObjectId
        }

        if ($ObjectIdEmpty) {
            $LocalVarQueryParameters['object_id__empty'] = $ObjectIdEmpty
        }

        if ($ObjectIdGt) {
            $LocalVarQueryParameters['object_id__gt'] = $ObjectIdGt
        }

        if ($ObjectIdGte) {
            $LocalVarQueryParameters['object_id__gte'] = $ObjectIdGte
        }

        if ($ObjectIdLt) {
            $LocalVarQueryParameters['object_id__lt'] = $ObjectIdLt
        }

        if ($ObjectIdLte) {
            $LocalVarQueryParameters['object_id__lte'] = $ObjectIdLte
        }

        if ($ObjectIdN) {
            $LocalVarQueryParameters['object_id__n'] = $ObjectIdN
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Priority) {
            $LocalVarQueryParameters['priority'] = $Priority
        }

        if ($PriorityN) {
            $LocalVarQueryParameters['priority__n'] = $PriorityN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedContactAssignmentList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact assignment.

.PARAMETER PatchedWritableContactAssignmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactAssignment
#>
function Invoke-TenancyContactAssignmentsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableContactAssignmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactAssignmentsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-assignments/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactAssignmentsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableContactAssignmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactAssignment" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact assignment.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactAssignment
#>
function Invoke-TenancyContactAssignmentsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactAssignmentsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/contact-assignments/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactAssignmentsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactAssignment" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact assignment.

.PARAMETER WritableContactAssignmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactAssignment
#>
function Invoke-TenancyContactAssignmentsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableContactAssignmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactAssignmentsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-assignments/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactAssignmentsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableContactAssignmentRequest) {
            throw "Error! The required parameter `WritableContactAssignmentRequest` missing when calling tenancyContactAssignmentsUpdate."
        }

        $LocalVarBodyParameter = $WritableContactAssignmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactAssignment" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyContactGroupsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactGroupsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-groups/'

        if (!$ContactGroupRequest) {
            throw "Error! The required parameter `ContactGroupRequest` missing when calling tenancyContactGroupsBulkDestroy."
        }

        $LocalVarBodyParameter = $ContactGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactGroup[]
#>
function Invoke-TenancyContactGroupsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactGroupsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-groups/'

        if (!$ContactGroupRequest) {
            throw "Error! The required parameter `ContactGroupRequest` missing when calling tenancyContactGroupsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ContactGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactGroup[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactGroup[]
#>
function Invoke-TenancyContactGroupsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactGroupsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-groups/'

        if (!$ContactGroupRequest) {
            throw "Error! The required parameter `ContactGroupRequest` missing when calling tenancyContactGroupsBulkUpdate."
        }

        $LocalVarBodyParameter = $ContactGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactGroup[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableContactGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactGroup
#>
function Invoke-TenancyContactGroupsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableContactGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactGroupsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-groups/'

        if (!$WritableContactGroupRequest) {
            throw "Error! The required parameter `WritableContactGroupRequest` missing when calling tenancyContactGroupsCreate."
        }

        $LocalVarBodyParameter = $WritableContactGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact group.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyContactGroupsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactGroupsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/tenancy/contact-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactGroupsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Parent
Contact group (slug)

.PARAMETER ParentN
Contact group (slug)

.PARAMETER ParentId
Contact group (ID)

.PARAMETER ParentIdN
Contact group (ID)

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedContactGroupList
#>
function Invoke-TenancyContactGroupsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Parent},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ParentN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentId},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentIdN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactGroupsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/contact-groups/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Parent) {
            $LocalVarQueryParameters['parent'] = $Parent
        }

        if ($ParentN) {
            $LocalVarQueryParameters['parent__n'] = $ParentN
        }

        if ($ParentId) {
            $LocalVarQueryParameters['parent_id'] = $ParentId
        }

        if ($ParentIdN) {
            $LocalVarQueryParameters['parent_id__n'] = $ParentIdN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedContactGroupList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact group.

.PARAMETER PatchedWritableContactGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactGroup
#>
function Invoke-TenancyContactGroupsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableContactGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactGroupsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactGroupsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableContactGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact group.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactGroup
#>
function Invoke-TenancyContactGroupsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactGroupsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/contact-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactGroupsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact group.

.PARAMETER WritableContactGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactGroup
#>
function Invoke-TenancyContactGroupsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableContactGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactGroupsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactGroupsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableContactGroupRequest) {
            throw "Error! The required parameter `WritableContactGroupRequest` missing when calling tenancyContactGroupsUpdate."
        }

        $LocalVarBodyParameter = $WritableContactGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyContactRolesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactRolesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-roles/'

        if (!$ContactRoleRequest) {
            throw "Error! The required parameter `ContactRoleRequest` missing when calling tenancyContactRolesBulkDestroy."
        }

        $LocalVarBodyParameter = $ContactRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactRole[]
#>
function Invoke-TenancyContactRolesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactRolesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-roles/'

        if (!$ContactRoleRequest) {
            throw "Error! The required parameter `ContactRoleRequest` missing when calling tenancyContactRolesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ContactRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactRole[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactRole[]
#>
function Invoke-TenancyContactRolesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactRolesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-roles/'

        if (!$ContactRoleRequest) {
            throw "Error! The required parameter `ContactRoleRequest` missing when calling tenancyContactRolesBulkUpdate."
        }

        $LocalVarBodyParameter = $ContactRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactRole[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactRole
#>
function Invoke-TenancyContactRolesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${ContactRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactRolesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-roles/'

        if (!$ContactRoleRequest) {
            throw "Error! The required parameter `ContactRoleRequest` missing when calling tenancyContactRolesCreate."
        }

        $LocalVarBodyParameter = $ContactRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact role.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyContactRolesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactRolesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/tenancy/contact-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactRolesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedContactRoleList
#>
function Invoke-TenancyContactRolesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactRolesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/contact-roles/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedContactRoleList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact role.

.PARAMETER PatchedContactRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactRole
#>
function Invoke-TenancyContactRolesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedContactRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactRolesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactRolesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedContactRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact role.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactRole
#>
function Invoke-TenancyContactRolesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactRolesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/contact-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactRolesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact role.

.PARAMETER ContactRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContactRole
#>
function Invoke-TenancyContactRolesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${ContactRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactRolesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contact-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactRolesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$ContactRoleRequest) {
            throw "Error! The required parameter `ContactRoleRequest` missing when calling tenancyContactRolesUpdate."
        }

        $LocalVarBodyParameter = $ContactRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContactRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyContactsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contacts/'

        if (!$ContactRequest) {
            throw "Error! The required parameter `ContactRequest` missing when calling tenancyContactsBulkDestroy."
        }

        $LocalVarBodyParameter = $ContactRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Contact[]
#>
function Invoke-TenancyContactsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contacts/'

        if (!$ContactRequest) {
            throw "Error! The required parameter `ContactRequest` missing when calling tenancyContactsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ContactRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Contact[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContactRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Contact[]
#>
function Invoke-TenancyContactsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ContactRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contacts/'

        if (!$ContactRequest) {
            throw "Error! The required parameter `ContactRequest` missing when calling tenancyContactsBulkUpdate."
        }

        $LocalVarBodyParameter = $ContactRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Contact[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableContactRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Contact
#>
function Invoke-TenancyContactsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableContactRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contacts/'

        if (!$WritableContactRequest) {
            throw "Error! The required parameter `WritableContactRequest` missing when calling tenancyContactsCreate."
        }

        $LocalVarBodyParameter = $WritableContactRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Contact" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyContactsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/tenancy/contacts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Address
No description available.

.PARAMETER AddressEmpty
No description available.

.PARAMETER AddressIc
No description available.

.PARAMETER AddressIe
No description available.

.PARAMETER AddressIew
No description available.

.PARAMETER AddressIsw
No description available.

.PARAMETER AddressN
No description available.

.PARAMETER AddressNic
No description available.

.PARAMETER AddressNie
No description available.

.PARAMETER AddressNiew
No description available.

.PARAMETER AddressNisw
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Email
No description available.

.PARAMETER EmailEmpty
No description available.

.PARAMETER EmailIc
No description available.

.PARAMETER EmailIe
No description available.

.PARAMETER EmailIew
No description available.

.PARAMETER EmailIsw
No description available.

.PARAMETER EmailN
No description available.

.PARAMETER EmailNic
No description available.

.PARAMETER EmailNie
No description available.

.PARAMETER EmailNiew
No description available.

.PARAMETER EmailNisw
No description available.

.PARAMETER Group
Contact group (slug)

.PARAMETER GroupN
Contact group (slug)

.PARAMETER GroupId
Contact group (ID)

.PARAMETER GroupIdN
Contact group (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Link
No description available.

.PARAMETER LinkEmpty
No description available.

.PARAMETER LinkIc
No description available.

.PARAMETER LinkIe
No description available.

.PARAMETER LinkIew
No description available.

.PARAMETER LinkIsw
No description available.

.PARAMETER LinkN
No description available.

.PARAMETER LinkNic
No description available.

.PARAMETER LinkNie
No description available.

.PARAMETER LinkNiew
No description available.

.PARAMETER LinkNisw
No description available.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Phone
No description available.

.PARAMETER PhoneEmpty
No description available.

.PARAMETER PhoneIc
No description available.

.PARAMETER PhoneIe
No description available.

.PARAMETER PhoneIew
No description available.

.PARAMETER PhoneIsw
No description available.

.PARAMETER PhoneN
No description available.

.PARAMETER PhoneNic
No description available.

.PARAMETER PhoneNie
No description available.

.PARAMETER PhoneNiew
No description available.

.PARAMETER PhoneNisw
No description available.

.PARAMETER Q
Search

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Title
No description available.

.PARAMETER TitleEmpty
No description available.

.PARAMETER TitleIc
No description available.

.PARAMETER TitleIe
No description available.

.PARAMETER TitleIew
No description available.

.PARAMETER TitleIsw
No description available.

.PARAMETER TitleN
No description available.

.PARAMETER TitleNic
No description available.

.PARAMETER TitleNie
No description available.

.PARAMETER TitleNiew
No description available.

.PARAMETER TitleNisw
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedContactList
#>
function Invoke-TenancyContactsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Address},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AddressEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AddressIc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AddressIe},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AddressIew},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AddressIsw},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AddressN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AddressNic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AddressNie},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AddressNiew},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AddressNisw},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Email},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${EmailEmpty},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${EmailIc},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${EmailIe},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${EmailIew},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${EmailIsw},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${EmailN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${EmailNic},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${EmailNie},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${EmailNiew},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${EmailNisw},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Group},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupN},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupId},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupIdN},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Link},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LinkEmpty},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LinkIc},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LinkIe},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LinkIew},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LinkIsw},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LinkN},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LinkNic},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LinkNie},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LinkNiew},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LinkNisw},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Phone},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PhoneEmpty},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PhoneIc},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PhoneIe},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PhoneIew},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PhoneIsw},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PhoneN},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PhoneNic},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PhoneNie},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PhoneNiew},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PhoneNisw},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Title},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${TitleEmpty},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TitleIc},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TitleIe},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TitleIew},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TitleIsw},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TitleN},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TitleNic},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TitleNie},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TitleNiew},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TitleNisw},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/contacts/'

        if ($Address) {
            $LocalVarQueryParameters['address'] = $Address
        }

        if ($AddressEmpty) {
            $LocalVarQueryParameters['address__empty'] = $AddressEmpty
        }

        if ($AddressIc) {
            $LocalVarQueryParameters['address__ic'] = $AddressIc
        }

        if ($AddressIe) {
            $LocalVarQueryParameters['address__ie'] = $AddressIe
        }

        if ($AddressIew) {
            $LocalVarQueryParameters['address__iew'] = $AddressIew
        }

        if ($AddressIsw) {
            $LocalVarQueryParameters['address__isw'] = $AddressIsw
        }

        if ($AddressN) {
            $LocalVarQueryParameters['address__n'] = $AddressN
        }

        if ($AddressNic) {
            $LocalVarQueryParameters['address__nic'] = $AddressNic
        }

        if ($AddressNie) {
            $LocalVarQueryParameters['address__nie'] = $AddressNie
        }

        if ($AddressNiew) {
            $LocalVarQueryParameters['address__niew'] = $AddressNiew
        }

        if ($AddressNisw) {
            $LocalVarQueryParameters['address__nisw'] = $AddressNisw
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Email) {
            $LocalVarQueryParameters['email'] = $Email
        }

        if ($EmailEmpty) {
            $LocalVarQueryParameters['email__empty'] = $EmailEmpty
        }

        if ($EmailIc) {
            $LocalVarQueryParameters['email__ic'] = $EmailIc
        }

        if ($EmailIe) {
            $LocalVarQueryParameters['email__ie'] = $EmailIe
        }

        if ($EmailIew) {
            $LocalVarQueryParameters['email__iew'] = $EmailIew
        }

        if ($EmailIsw) {
            $LocalVarQueryParameters['email__isw'] = $EmailIsw
        }

        if ($EmailN) {
            $LocalVarQueryParameters['email__n'] = $EmailN
        }

        if ($EmailNic) {
            $LocalVarQueryParameters['email__nic'] = $EmailNic
        }

        if ($EmailNie) {
            $LocalVarQueryParameters['email__nie'] = $EmailNie
        }

        if ($EmailNiew) {
            $LocalVarQueryParameters['email__niew'] = $EmailNiew
        }

        if ($EmailNisw) {
            $LocalVarQueryParameters['email__nisw'] = $EmailNisw
        }

        if ($Group) {
            $LocalVarQueryParameters['group'] = $Group
        }

        if ($GroupN) {
            $LocalVarQueryParameters['group__n'] = $GroupN
        }

        if ($GroupId) {
            $LocalVarQueryParameters['group_id'] = $GroupId
        }

        if ($GroupIdN) {
            $LocalVarQueryParameters['group_id__n'] = $GroupIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Link) {
            $LocalVarQueryParameters['link'] = $Link
        }

        if ($LinkEmpty) {
            $LocalVarQueryParameters['link__empty'] = $LinkEmpty
        }

        if ($LinkIc) {
            $LocalVarQueryParameters['link__ic'] = $LinkIc
        }

        if ($LinkIe) {
            $LocalVarQueryParameters['link__ie'] = $LinkIe
        }

        if ($LinkIew) {
            $LocalVarQueryParameters['link__iew'] = $LinkIew
        }

        if ($LinkIsw) {
            $LocalVarQueryParameters['link__isw'] = $LinkIsw
        }

        if ($LinkN) {
            $LocalVarQueryParameters['link__n'] = $LinkN
        }

        if ($LinkNic) {
            $LocalVarQueryParameters['link__nic'] = $LinkNic
        }

        if ($LinkNie) {
            $LocalVarQueryParameters['link__nie'] = $LinkNie
        }

        if ($LinkNiew) {
            $LocalVarQueryParameters['link__niew'] = $LinkNiew
        }

        if ($LinkNisw) {
            $LocalVarQueryParameters['link__nisw'] = $LinkNisw
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Phone) {
            $LocalVarQueryParameters['phone'] = $Phone
        }

        if ($PhoneEmpty) {
            $LocalVarQueryParameters['phone__empty'] = $PhoneEmpty
        }

        if ($PhoneIc) {
            $LocalVarQueryParameters['phone__ic'] = $PhoneIc
        }

        if ($PhoneIe) {
            $LocalVarQueryParameters['phone__ie'] = $PhoneIe
        }

        if ($PhoneIew) {
            $LocalVarQueryParameters['phone__iew'] = $PhoneIew
        }

        if ($PhoneIsw) {
            $LocalVarQueryParameters['phone__isw'] = $PhoneIsw
        }

        if ($PhoneN) {
            $LocalVarQueryParameters['phone__n'] = $PhoneN
        }

        if ($PhoneNic) {
            $LocalVarQueryParameters['phone__nic'] = $PhoneNic
        }

        if ($PhoneNie) {
            $LocalVarQueryParameters['phone__nie'] = $PhoneNie
        }

        if ($PhoneNiew) {
            $LocalVarQueryParameters['phone__niew'] = $PhoneNiew
        }

        if ($PhoneNisw) {
            $LocalVarQueryParameters['phone__nisw'] = $PhoneNisw
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Title) {
            $LocalVarQueryParameters['title'] = $Title
        }

        if ($TitleEmpty) {
            $LocalVarQueryParameters['title__empty'] = $TitleEmpty
        }

        if ($TitleIc) {
            $LocalVarQueryParameters['title__ic'] = $TitleIc
        }

        if ($TitleIe) {
            $LocalVarQueryParameters['title__ie'] = $TitleIe
        }

        if ($TitleIew) {
            $LocalVarQueryParameters['title__iew'] = $TitleIew
        }

        if ($TitleIsw) {
            $LocalVarQueryParameters['title__isw'] = $TitleIsw
        }

        if ($TitleN) {
            $LocalVarQueryParameters['title__n'] = $TitleN
        }

        if ($TitleNic) {
            $LocalVarQueryParameters['title__nic'] = $TitleNic
        }

        if ($TitleNie) {
            $LocalVarQueryParameters['title__nie'] = $TitleNie
        }

        if ($TitleNiew) {
            $LocalVarQueryParameters['title__niew'] = $TitleNiew
        }

        if ($TitleNisw) {
            $LocalVarQueryParameters['title__nisw'] = $TitleNisw
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedContactList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact.

.PARAMETER PatchedWritableContactRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Contact
#>
function Invoke-TenancyContactsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableContactRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contacts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableContactRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Contact" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Contact
#>
function Invoke-TenancyContactsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/contacts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Contact" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this contact.

.PARAMETER WritableContactRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Contact
#>
function Invoke-TenancyContactsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableContactRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyContactsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/contacts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyContactsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableContactRequest) {
            throw "Error! The required parameter `WritableContactRequest` missing when calling tenancyContactsUpdate."
        }

        $LocalVarBodyParameter = $WritableContactRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Contact" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TenantGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyTenantGroupsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${TenantGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantGroupsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenant-groups/'

        if (!$TenantGroupRequest) {
            throw "Error! The required parameter `TenantGroupRequest` missing when calling tenancyTenantGroupsBulkDestroy."
        }

        $LocalVarBodyParameter = $TenantGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TenantGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

TenantGroup[]
#>
function Invoke-TenancyTenantGroupsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${TenantGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantGroupsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenant-groups/'

        if (!$TenantGroupRequest) {
            throw "Error! The required parameter `TenantGroupRequest` missing when calling tenancyTenantGroupsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $TenantGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "TenantGroup[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TenantGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

TenantGroup[]
#>
function Invoke-TenancyTenantGroupsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${TenantGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantGroupsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenant-groups/'

        if (!$TenantGroupRequest) {
            throw "Error! The required parameter `TenantGroupRequest` missing when calling tenancyTenantGroupsBulkUpdate."
        }

        $LocalVarBodyParameter = $TenantGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "TenantGroup[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableTenantGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

TenantGroup
#>
function Invoke-TenancyTenantGroupsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableTenantGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantGroupsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenant-groups/'

        if (!$WritableTenantGroupRequest) {
            throw "Error! The required parameter `WritableTenantGroupRequest` missing when calling tenancyTenantGroupsCreate."
        }

        $LocalVarBodyParameter = $WritableTenantGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "TenantGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tenant group.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyTenantGroupsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantGroupsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/tenancy/tenant-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyTenantGroupsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Parent
Tenant group (slug)

.PARAMETER ParentN
Tenant group (slug)

.PARAMETER ParentId
Tenant group (ID)

.PARAMETER ParentIdN
Tenant group (ID)

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedTenantGroupList
#>
function Invoke-TenancyTenantGroupsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Parent},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ParentN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentId},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentIdN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantGroupsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/tenant-groups/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Parent) {
            $LocalVarQueryParameters['parent'] = $Parent
        }

        if ($ParentN) {
            $LocalVarQueryParameters['parent__n'] = $ParentN
        }

        if ($ParentId) {
            $LocalVarQueryParameters['parent_id'] = $ParentId
        }

        if ($ParentIdN) {
            $LocalVarQueryParameters['parent_id__n'] = $ParentIdN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedTenantGroupList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tenant group.

.PARAMETER PatchedWritableTenantGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

TenantGroup
#>
function Invoke-TenancyTenantGroupsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableTenantGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantGroupsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenant-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyTenantGroupsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableTenantGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "TenantGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tenant group.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

TenantGroup
#>
function Invoke-TenancyTenantGroupsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantGroupsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/tenant-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyTenantGroupsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "TenantGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tenant group.

.PARAMETER WritableTenantGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

TenantGroup
#>
function Invoke-TenancyTenantGroupsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableTenantGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantGroupsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenant-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyTenantGroupsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableTenantGroupRequest) {
            throw "Error! The required parameter `WritableTenantGroupRequest` missing when calling tenancyTenantGroupsUpdate."
        }

        $LocalVarBodyParameter = $WritableTenantGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "TenantGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TenantRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyTenantsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${TenantRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenants/'

        if (!$TenantRequest) {
            throw "Error! The required parameter `TenantRequest` missing when calling tenancyTenantsBulkDestroy."
        }

        $LocalVarBodyParameter = $TenantRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TenantRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tenant[]
#>
function Invoke-TenancyTenantsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${TenantRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenants/'

        if (!$TenantRequest) {
            throw "Error! The required parameter `TenantRequest` missing when calling tenancyTenantsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $TenantRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tenant[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TenantRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tenant[]
#>
function Invoke-TenancyTenantsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${TenantRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenants/'

        if (!$TenantRequest) {
            throw "Error! The required parameter `TenantRequest` missing when calling tenancyTenantsBulkUpdate."
        }

        $LocalVarBodyParameter = $TenantRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tenant[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableTenantRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tenant
#>
function Invoke-TenancyTenantsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableTenantRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenants/'

        if (!$WritableTenantRequest) {
            throw "Error! The required parameter `WritableTenantRequest` missing when calling tenancyTenantsCreate."
        }

        $LocalVarBodyParameter = $WritableTenantRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tenant" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tenant.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-TenancyTenantsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/tenancy/tenants/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyTenantsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Contact
Contact

.PARAMETER ContactN
Contact

.PARAMETER ContactGroup
Contact group

.PARAMETER ContactGroupN
Contact group

.PARAMETER ContactRole
Contact Role

.PARAMETER ContactRoleN
Contact Role

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Group
Tenant group (slug)

.PARAMETER GroupN
Tenant group (slug)

.PARAMETER GroupId
Tenant group (ID)

.PARAMETER GroupIdN
Tenant group (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedTenantList
#>
function Invoke-TenancyTenantsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Contact},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroup},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroupN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRole},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRoleN},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Group},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupN},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupId},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupIdN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/tenants/'

        if ($Contact) {
            $LocalVarQueryParameters['contact'] = $Contact
        }

        if ($ContactN) {
            $LocalVarQueryParameters['contact__n'] = $ContactN
        }

        if ($ContactGroup) {
            $LocalVarQueryParameters['contact_group'] = $ContactGroup
        }

        if ($ContactGroupN) {
            $LocalVarQueryParameters['contact_group__n'] = $ContactGroupN
        }

        if ($ContactRole) {
            $LocalVarQueryParameters['contact_role'] = $ContactRole
        }

        if ($ContactRoleN) {
            $LocalVarQueryParameters['contact_role__n'] = $ContactRoleN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Group) {
            $LocalVarQueryParameters['group'] = $Group
        }

        if ($GroupN) {
            $LocalVarQueryParameters['group__n'] = $GroupN
        }

        if ($GroupId) {
            $LocalVarQueryParameters['group_id'] = $GroupId
        }

        if ($GroupIdN) {
            $LocalVarQueryParameters['group_id__n'] = $GroupIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedTenantList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tenant.

.PARAMETER PatchedWritableTenantRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tenant
#>
function Invoke-TenancyTenantsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableTenantRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenants/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyTenantsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableTenantRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tenant" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tenant.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tenant
#>
function Invoke-TenancyTenantsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/tenancy/tenants/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyTenantsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tenant" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tenant.

.PARAMETER WritableTenantRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tenant
#>
function Invoke-TenancyTenantsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableTenantRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-TenancyTenantsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/tenancy/tenants/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling tenancyTenantsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableTenantRequest) {
            throw "Error! The required parameter `WritableTenantRequest` missing when calling tenancyTenantsUpdate."
        }

        $LocalVarBodyParameter = $WritableTenantRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tenant" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

