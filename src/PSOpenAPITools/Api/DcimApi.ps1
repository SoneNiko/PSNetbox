#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableTerminationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimCableTerminationsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CableTerminationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCableTerminationsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cable-terminations/'

        if (!$CableTerminationRequest) {
            throw "Error! The required parameter `CableTerminationRequest` missing when calling dcimCableTerminationsBulkDestroy."
        }

        $LocalVarBodyParameter = $CableTerminationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableTerminationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CableTermination[]
#>
function Invoke-DcimCableTerminationsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CableTerminationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCableTerminationsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cable-terminations/'

        if (!$CableTerminationRequest) {
            throw "Error! The required parameter `CableTerminationRequest` missing when calling dcimCableTerminationsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $CableTerminationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CableTermination[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableTerminationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CableTermination[]
#>
function Invoke-DcimCableTerminationsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CableTerminationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCableTerminationsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cable-terminations/'

        if (!$CableTerminationRequest) {
            throw "Error! The required parameter `CableTerminationRequest` missing when calling dcimCableTerminationsBulkUpdate."
        }

        $LocalVarBodyParameter = $CableTerminationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CableTermination[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableTerminationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CableTermination
#>
function Invoke-DcimCableTerminationsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${CableTerminationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCableTerminationsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cable-terminations/'

        if (!$CableTerminationRequest) {
            throw "Error! The required parameter `CableTerminationRequest` missing when calling dcimCableTerminationsCreate."
        }

        $LocalVarBodyParameter = $CableTerminationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CableTermination" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this cable termination.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimCableTerminationsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCableTerminationsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/cable-terminations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimCableTerminationsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Cable
No description available.

.PARAMETER CableN
No description available.

.PARAMETER CableEnd
No description available.

.PARAMETER CableEndN
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER TerminationId
No description available.

.PARAMETER TerminationIdEmpty
No description available.

.PARAMETER TerminationIdGt
No description available.

.PARAMETER TerminationIdGte
No description available.

.PARAMETER TerminationIdLt
No description available.

.PARAMETER TerminationIdLte
No description available.

.PARAMETER TerminationIdN
No description available.

.PARAMETER TerminationType
No description available.

.PARAMETER TerminationTypeN
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedCableTerminationList
#>
function Invoke-DcimCableTerminationsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Cable},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${CableN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEnd},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEndN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TerminationId},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${TerminationIdEmpty},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TerminationIdGt},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TerminationIdGte},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TerminationIdLt},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TerminationIdLte},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TerminationIdN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TerminationType},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TerminationTypeN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCableTerminationsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/cable-terminations/'

        if ($Cable) {
            $LocalVarQueryParameters['cable'] = $Cable
        }

        if ($CableN) {
            $LocalVarQueryParameters['cable__n'] = $CableN
        }

        if ($CableEnd) {
            $LocalVarQueryParameters['cable_end'] = $CableEnd
        }

        if ($CableEndN) {
            $LocalVarQueryParameters['cable_end__n'] = $CableEndN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($TerminationId) {
            $LocalVarQueryParameters['termination_id'] = $TerminationId
        }

        if ($TerminationIdEmpty) {
            $LocalVarQueryParameters['termination_id__empty'] = $TerminationIdEmpty
        }

        if ($TerminationIdGt) {
            $LocalVarQueryParameters['termination_id__gt'] = $TerminationIdGt
        }

        if ($TerminationIdGte) {
            $LocalVarQueryParameters['termination_id__gte'] = $TerminationIdGte
        }

        if ($TerminationIdLt) {
            $LocalVarQueryParameters['termination_id__lt'] = $TerminationIdLt
        }

        if ($TerminationIdLte) {
            $LocalVarQueryParameters['termination_id__lte'] = $TerminationIdLte
        }

        if ($TerminationIdN) {
            $LocalVarQueryParameters['termination_id__n'] = $TerminationIdN
        }

        if ($TerminationType) {
            $LocalVarQueryParameters['termination_type'] = $TerminationType
        }

        if ($TerminationTypeN) {
            $LocalVarQueryParameters['termination_type__n'] = $TerminationTypeN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedCableTerminationList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this cable termination.

.PARAMETER PatchedCableTerminationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CableTermination
#>
function Invoke-DcimCableTerminationsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedCableTerminationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCableTerminationsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cable-terminations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimCableTerminationsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedCableTerminationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CableTermination" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this cable termination.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CableTermination
#>
function Invoke-DcimCableTerminationsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCableTerminationsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/cable-terminations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimCableTerminationsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CableTermination" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this cable termination.

.PARAMETER CableTerminationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CableTermination
#>
function Invoke-DcimCableTerminationsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${CableTerminationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCableTerminationsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cable-terminations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimCableTerminationsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$CableTerminationRequest) {
            throw "Error! The required parameter `CableTerminationRequest` missing when calling dcimCableTerminationsUpdate."
        }

        $LocalVarBodyParameter = $CableTerminationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CableTermination" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimCablesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CableRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCablesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cables/'

        if (!$CableRequest) {
            throw "Error! The required parameter `CableRequest` missing when calling dcimCablesBulkDestroy."
        }

        $LocalVarBodyParameter = $CableRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Cable[]
#>
function Invoke-DcimCablesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CableRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCablesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cables/'

        if (!$CableRequest) {
            throw "Error! The required parameter `CableRequest` missing when calling dcimCablesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $CableRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Cable[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Cable[]
#>
function Invoke-DcimCablesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CableRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCablesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cables/'

        if (!$CableRequest) {
            throw "Error! The required parameter `CableRequest` missing when calling dcimCablesBulkUpdate."
        }

        $LocalVarBodyParameter = $CableRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Cable[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableCableRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Cable
#>
function Invoke-DcimCablesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableCableRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCablesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cables/'

        $LocalVarBodyParameter = $WritableCableRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Cable" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this cable.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimCablesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCablesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/cables/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimCablesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CircuitterminationId
No description available.

.PARAMETER Color
No description available.

.PARAMETER ColorN
No description available.

.PARAMETER ConsoleportId
No description available.

.PARAMETER ConsoleserverportId
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Device
No description available.

.PARAMETER DeviceId
No description available.

.PARAMETER FrontportId
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER InterfaceId
No description available.

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Length
No description available.

.PARAMETER LengthEmpty
No description available.

.PARAMETER LengthGt
No description available.

.PARAMETER LengthGte
No description available.

.PARAMETER LengthLt
No description available.

.PARAMETER LengthLte
No description available.

.PARAMETER LengthN
No description available.

.PARAMETER LengthUnit
No description available.

.PARAMETER LengthUnitN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
No description available.

.PARAMETER LocationId
No description available.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER PowerfeedId
No description available.

.PARAMETER PoweroutletId
No description available.

.PARAMETER PowerportId
No description available.

.PARAMETER Q
Search

.PARAMETER Rack
No description available.

.PARAMETER RackId
No description available.

.PARAMETER RearportId
No description available.

.PARAMETER Site
No description available.

.PARAMETER SiteId
No description available.

.PARAMETER Status
No description available.

.PARAMETER StatusN
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantGroup
Tenant Group (slug)

.PARAMETER TenantGroupN
Tenant Group (slug)

.PARAMETER TenantGroupId
Tenant Group (ID)

.PARAMETER TenantGroupIdN
Tenant Group (ID)

.PARAMETER TenantId
Tenant (ID)

.PARAMETER TenantIdN
Tenant (ID)

.PARAMETER TerminationAId
No description available.

.PARAMETER TerminationAType
No description available.

.PARAMETER TerminationATypeN
No description available.

.PARAMETER TerminationBId
No description available.

.PARAMETER TerminationBType
No description available.

.PARAMETER TerminationBTypeN
No description available.

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER Unterminated
Unterminated

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedCableList
#>
function Invoke-DcimCablesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${CircuitterminationId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Color},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorN},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ConsoleportId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ConsoleserverportId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Device},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${FrontportId},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${InterfaceId},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${Length},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LengthEmpty},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LengthGt},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LengthGte},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LengthLt},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LengthLte},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LengthN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LengthUnit},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LengthUnitN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PowerfeedId},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PoweroutletId},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PowerportId},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Rack},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RearportId},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Status},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${StatusN},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroup},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupN},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupId},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupIdN},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TerminationAId},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TerminationAType},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TerminationATypeN},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TerminationBId},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TerminationBType},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TerminationBTypeN},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Unterminated},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCablesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/cables/'

        if ($CircuitterminationId) {
            $LocalVarQueryParameters['circuittermination_id'] = $CircuitterminationId
        }

        if ($Color) {
            $LocalVarQueryParameters['color'] = $Color
        }

        if ($ColorN) {
            $LocalVarQueryParameters['color__n'] = $ColorN
        }

        if ($ConsoleportId) {
            $LocalVarQueryParameters['consoleport_id'] = $ConsoleportId
        }

        if ($ConsoleserverportId) {
            $LocalVarQueryParameters['consoleserverport_id'] = $ConsoleserverportId
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($FrontportId) {
            $LocalVarQueryParameters['frontport_id'] = $FrontportId
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($InterfaceId) {
            $LocalVarQueryParameters['interface_id'] = $InterfaceId
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Length) {
            $LocalVarQueryParameters['length'] = $Length
        }

        if ($LengthEmpty) {
            $LocalVarQueryParameters['length__empty'] = $LengthEmpty
        }

        if ($LengthGt) {
            $LocalVarQueryParameters['length__gt'] = $LengthGt
        }

        if ($LengthGte) {
            $LocalVarQueryParameters['length__gte'] = $LengthGte
        }

        if ($LengthLt) {
            $LocalVarQueryParameters['length__lt'] = $LengthLt
        }

        if ($LengthLte) {
            $LocalVarQueryParameters['length__lte'] = $LengthLte
        }

        if ($LengthN) {
            $LocalVarQueryParameters['length__n'] = $LengthN
        }

        if ($LengthUnit) {
            $LocalVarQueryParameters['length_unit'] = $LengthUnit
        }

        if ($LengthUnitN) {
            $LocalVarQueryParameters['length_unit__n'] = $LengthUnitN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($PowerfeedId) {
            $LocalVarQueryParameters['powerfeed_id'] = $PowerfeedId
        }

        if ($PoweroutletId) {
            $LocalVarQueryParameters['poweroutlet_id'] = $PoweroutletId
        }

        if ($PowerportId) {
            $LocalVarQueryParameters['powerport_id'] = $PowerportId
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Rack) {
            $LocalVarQueryParameters['rack'] = $Rack
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RearportId) {
            $LocalVarQueryParameters['rearport_id'] = $RearportId
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($StatusN) {
            $LocalVarQueryParameters['status__n'] = $StatusN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantGroup) {
            $LocalVarQueryParameters['tenant_group'] = $TenantGroup
        }

        if ($TenantGroupN) {
            $LocalVarQueryParameters['tenant_group__n'] = $TenantGroupN
        }

        if ($TenantGroupId) {
            $LocalVarQueryParameters['tenant_group_id'] = $TenantGroupId
        }

        if ($TenantGroupIdN) {
            $LocalVarQueryParameters['tenant_group_id__n'] = $TenantGroupIdN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($TerminationAId) {
            $LocalVarQueryParameters['termination_a_id'] = $TerminationAId
        }

        if ($TerminationAType) {
            $LocalVarQueryParameters['termination_a_type'] = $TerminationAType
        }

        if ($TerminationATypeN) {
            $LocalVarQueryParameters['termination_a_type__n'] = $TerminationATypeN
        }

        if ($TerminationBId) {
            $LocalVarQueryParameters['termination_b_id'] = $TerminationBId
        }

        if ($TerminationBType) {
            $LocalVarQueryParameters['termination_b_type'] = $TerminationBType
        }

        if ($TerminationBTypeN) {
            $LocalVarQueryParameters['termination_b_type__n'] = $TerminationBTypeN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($Unterminated) {
            $LocalVarQueryParameters['unterminated'] = $Unterminated
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedCableList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this cable.

.PARAMETER PatchedWritableCableRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Cable
#>
function Invoke-DcimCablesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableCableRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCablesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cables/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimCablesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableCableRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Cable" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this cable.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Cable
#>
function Invoke-DcimCablesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCablesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/cables/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimCablesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Cable" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this cable.

.PARAMETER WritableCableRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Cable
#>
function Invoke-DcimCablesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableCableRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimCablesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/cables/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimCablesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $WritableCableRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Cable" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PeerDevice
The name of the peer device

.PARAMETER PeerInterface
The name of the peer interface

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Device[]
#>
function Invoke-DcimConnectedDeviceList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PeerDevice},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PeerInterface},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConnectedDeviceList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/connected-device/'

        if (!$PeerDevice) {
            throw "Error! The required parameter `PeerDevice` missing when calling dcimConnectedDeviceList."
        }
        $LocalVarQueryParameters['peer_device'] = $PeerDevice

        if (!$PeerInterface) {
            throw "Error! The required parameter `PeerInterface` missing when calling dcimConnectedDeviceList."
        }
        $LocalVarQueryParameters['peer_interface'] = $PeerInterface

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Device[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsolePortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimConsolePortTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsolePortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-port-templates/'

        if (!$ConsolePortTemplateRequest) {
            throw "Error! The required parameter `ConsolePortTemplateRequest` missing when calling dcimConsolePortTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $ConsolePortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsolePortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePortTemplate[]
#>
function Invoke-DcimConsolePortTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsolePortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-port-templates/'

        if (!$ConsolePortTemplateRequest) {
            throw "Error! The required parameter `ConsolePortTemplateRequest` missing when calling dcimConsolePortTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ConsolePortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePortTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsolePortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePortTemplate[]
#>
function Invoke-DcimConsolePortTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsolePortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-port-templates/'

        if (!$ConsolePortTemplateRequest) {
            throw "Error! The required parameter `ConsolePortTemplateRequest` missing when calling dcimConsolePortTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $ConsolePortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePortTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableConsolePortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePortTemplate
#>
function Invoke-DcimConsolePortTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConsolePortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-port-templates/'

        if (!$WritableConsolePortTemplateRequest) {
            throw "Error! The required parameter `WritableConsolePortTemplateRequest` missing when calling dcimConsolePortTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritableConsolePortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console port template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimConsolePortTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/console-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsolePortTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DevicetypeId
Device type (ID)

.PARAMETER DevicetypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuletypeId
Module type (ID)

.PARAMETER ModuletypeIdN
Module type (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedConsolePortTemplateList
#>
function Invoke-DcimConsolePortTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeIdN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeId},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeIdN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TypeN},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/console-port-templates/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DevicetypeId) {
            $LocalVarQueryParameters['devicetype_id'] = $DevicetypeId
        }

        if ($DevicetypeIdN) {
            $LocalVarQueryParameters['devicetype_id__n'] = $DevicetypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuletypeId) {
            $LocalVarQueryParameters['moduletype_id'] = $ModuletypeId
        }

        if ($ModuletypeIdN) {
            $LocalVarQueryParameters['moduletype_id__n'] = $ModuletypeIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedConsolePortTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console port template.

.PARAMETER PatchedWritableConsolePortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePortTemplate
#>
function Invoke-DcimConsolePortTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableConsolePortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsolePortTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableConsolePortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console port template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePortTemplate
#>
function Invoke-DcimConsolePortTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/console-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsolePortTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console port template.

.PARAMETER WritableConsolePortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePortTemplate
#>
function Invoke-DcimConsolePortTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConsolePortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsolePortTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableConsolePortTemplateRequest) {
            throw "Error! The required parameter `WritableConsolePortTemplateRequest` missing when calling dcimConsolePortTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritableConsolePortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsolePortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimConsolePortsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsolePortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-ports/'

        if (!$ConsolePortRequest) {
            throw "Error! The required parameter `ConsolePortRequest` missing when calling dcimConsolePortsBulkDestroy."
        }

        $LocalVarBodyParameter = $ConsolePortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsolePortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePort[]
#>
function Invoke-DcimConsolePortsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsolePortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-ports/'

        if (!$ConsolePortRequest) {
            throw "Error! The required parameter `ConsolePortRequest` missing when calling dcimConsolePortsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ConsolePortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePort[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsolePortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePort[]
#>
function Invoke-DcimConsolePortsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsolePortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-ports/'

        if (!$ConsolePortRequest) {
            throw "Error! The required parameter `ConsolePortRequest` missing when calling dcimConsolePortsBulkUpdate."
        }

        $LocalVarBodyParameter = $ConsolePortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePort[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableConsolePortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePort
#>
function Invoke-DcimConsolePortsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConsolePortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-ports/'

        if (!$WritableConsolePortRequest) {
            throw "Error! The required parameter `WritableConsolePortRequest` missing when calling dcimConsolePortsCreate."
        }

        $LocalVarBodyParameter = $WritableConsolePortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimConsolePortsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/console-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsolePortsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableEnd
No description available.

.PARAMETER CableEndN
No description available.

.PARAMETER Cabled
No description available.

.PARAMETER Connected
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Device
Device (name)

.PARAMETER DeviceN
Device (name)

.PARAMETER DeviceId
Device (ID)

.PARAMETER DeviceIdN
Device (ID)

.PARAMETER DeviceRole
Device role (slug)

.PARAMETER DeviceRoleN
Device role (slug)

.PARAMETER DeviceRoleId
Device role (ID)

.PARAMETER DeviceRoleIdN
Device role (ID)

.PARAMETER DeviceType
Device type (model)

.PARAMETER DeviceTypeN
Device type (model)

.PARAMETER DeviceTypeId
Device type (ID)

.PARAMETER DeviceTypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuleId
Module (ID)

.PARAMETER ModuleIdN
Module (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Occupied
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Rack
Rack (name)

.PARAMETER RackN
Rack (name)

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Role
Device role (slug)

.PARAMETER RoleN
Device role (slug)

.PARAMETER RoleId
Device role (ID)

.PARAMETER RoleIdN
Device role (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Type
Physical port type

.PARAMETER TypeN
Physical port type

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VirtualChassis
Virtual Chassis

.PARAMETER VirtualChassisN
Virtual Chassis

.PARAMETER VirtualChassisId
Virtual Chassis (ID)

.PARAMETER VirtualChassisIdN
Virtual Chassis (ID)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedConsolePortList
#>
function Invoke-DcimConsolePortsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEnd},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEndN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Cabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Connected},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Device},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceN},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRole},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRoleN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleId},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleIdN},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceType},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceTypeN},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LocationN},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleId},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleIdN},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Occupied},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Rack},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RackN},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassis},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassisN},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisId},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/console-ports/'

        if ($CableEnd) {
            $LocalVarQueryParameters['cable_end'] = $CableEnd
        }

        if ($CableEndN) {
            $LocalVarQueryParameters['cable_end__n'] = $CableEndN
        }

        if ($Cabled) {
            $LocalVarQueryParameters['cabled'] = $Cabled
        }

        if ($Connected) {
            $LocalVarQueryParameters['connected'] = $Connected
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceN) {
            $LocalVarQueryParameters['device__n'] = $DeviceN
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($DeviceRole) {
            $LocalVarQueryParameters['device_role'] = $DeviceRole
        }

        if ($DeviceRoleN) {
            $LocalVarQueryParameters['device_role__n'] = $DeviceRoleN
        }

        if ($DeviceRoleId) {
            $LocalVarQueryParameters['device_role_id'] = $DeviceRoleId
        }

        if ($DeviceRoleIdN) {
            $LocalVarQueryParameters['device_role_id__n'] = $DeviceRoleIdN
        }

        if ($DeviceType) {
            $LocalVarQueryParameters['device_type'] = $DeviceType
        }

        if ($DeviceTypeN) {
            $LocalVarQueryParameters['device_type__n'] = $DeviceTypeN
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuleId) {
            $LocalVarQueryParameters['module_id'] = $ModuleId
        }

        if ($ModuleIdN) {
            $LocalVarQueryParameters['module_id__n'] = $ModuleIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Occupied) {
            $LocalVarQueryParameters['occupied'] = $Occupied
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Rack) {
            $LocalVarQueryParameters['rack'] = $Rack
        }

        if ($RackN) {
            $LocalVarQueryParameters['rack__n'] = $RackN
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VirtualChassis) {
            $LocalVarQueryParameters['virtual_chassis'] = $VirtualChassis
        }

        if ($VirtualChassisN) {
            $LocalVarQueryParameters['virtual_chassis__n'] = $VirtualChassisN
        }

        if ($VirtualChassisId) {
            $LocalVarQueryParameters['virtual_chassis_id'] = $VirtualChassisId
        }

        if ($VirtualChassisIdN) {
            $LocalVarQueryParameters['virtual_chassis_id__n'] = $VirtualChassisIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedConsolePortList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console port.

.PARAMETER PatchedWritableConsolePortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePort
#>
function Invoke-DcimConsolePortsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableConsolePortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsolePortsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableConsolePortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePort
#>
function Invoke-DcimConsolePortsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/console-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsolePortsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePort
#>
function Invoke-DcimConsolePortsTraceRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortsTraceRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/console-ports/{id}/trace/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsolePortsTraceRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console port.

.PARAMETER WritableConsolePortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsolePort
#>
function Invoke-DcimConsolePortsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConsolePortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsolePortsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsolePortsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableConsolePortRequest) {
            throw "Error! The required parameter `WritableConsolePortRequest` missing when calling dcimConsolePortsUpdate."
        }

        $LocalVarBodyParameter = $WritableConsolePortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsolePort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsoleServerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimConsoleServerPortTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsoleServerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-port-templates/'

        if (!$ConsoleServerPortTemplateRequest) {
            throw "Error! The required parameter `ConsoleServerPortTemplateRequest` missing when calling dcimConsoleServerPortTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $ConsoleServerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsoleServerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPortTemplate[]
#>
function Invoke-DcimConsoleServerPortTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsoleServerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-port-templates/'

        if (!$ConsoleServerPortTemplateRequest) {
            throw "Error! The required parameter `ConsoleServerPortTemplateRequest` missing when calling dcimConsoleServerPortTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ConsoleServerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPortTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsoleServerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPortTemplate[]
#>
function Invoke-DcimConsoleServerPortTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsoleServerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-port-templates/'

        if (!$ConsoleServerPortTemplateRequest) {
            throw "Error! The required parameter `ConsoleServerPortTemplateRequest` missing when calling dcimConsoleServerPortTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $ConsoleServerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPortTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableConsoleServerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPortTemplate
#>
function Invoke-DcimConsoleServerPortTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConsoleServerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-port-templates/'

        if (!$WritableConsoleServerPortTemplateRequest) {
            throw "Error! The required parameter `WritableConsoleServerPortTemplateRequest` missing when calling dcimConsoleServerPortTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritableConsoleServerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console server port template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimConsoleServerPortTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/console-server-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsoleServerPortTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DevicetypeId
Device type (ID)

.PARAMETER DevicetypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuletypeId
Module type (ID)

.PARAMETER ModuletypeIdN
Module type (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedConsoleServerPortTemplateList
#>
function Invoke-DcimConsoleServerPortTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeIdN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeId},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeIdN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TypeN},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/console-server-port-templates/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DevicetypeId) {
            $LocalVarQueryParameters['devicetype_id'] = $DevicetypeId
        }

        if ($DevicetypeIdN) {
            $LocalVarQueryParameters['devicetype_id__n'] = $DevicetypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuletypeId) {
            $LocalVarQueryParameters['moduletype_id'] = $ModuletypeId
        }

        if ($ModuletypeIdN) {
            $LocalVarQueryParameters['moduletype_id__n'] = $ModuletypeIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedConsoleServerPortTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console server port template.

.PARAMETER PatchedWritableConsoleServerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPortTemplate
#>
function Invoke-DcimConsoleServerPortTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableConsoleServerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsoleServerPortTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableConsoleServerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console server port template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPortTemplate
#>
function Invoke-DcimConsoleServerPortTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/console-server-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsoleServerPortTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console server port template.

.PARAMETER WritableConsoleServerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPortTemplate
#>
function Invoke-DcimConsoleServerPortTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConsoleServerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsoleServerPortTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableConsoleServerPortTemplateRequest) {
            throw "Error! The required parameter `WritableConsoleServerPortTemplateRequest` missing when calling dcimConsoleServerPortTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritableConsoleServerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsoleServerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimConsoleServerPortsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsoleServerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-ports/'

        if (!$ConsoleServerPortRequest) {
            throw "Error! The required parameter `ConsoleServerPortRequest` missing when calling dcimConsoleServerPortsBulkDestroy."
        }

        $LocalVarBodyParameter = $ConsoleServerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsoleServerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPort[]
#>
function Invoke-DcimConsoleServerPortsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsoleServerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-ports/'

        if (!$ConsoleServerPortRequest) {
            throw "Error! The required parameter `ConsoleServerPortRequest` missing when calling dcimConsoleServerPortsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ConsoleServerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPort[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsoleServerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPort[]
#>
function Invoke-DcimConsoleServerPortsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConsoleServerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-ports/'

        if (!$ConsoleServerPortRequest) {
            throw "Error! The required parameter `ConsoleServerPortRequest` missing when calling dcimConsoleServerPortsBulkUpdate."
        }

        $LocalVarBodyParameter = $ConsoleServerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPort[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableConsoleServerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPort
#>
function Invoke-DcimConsoleServerPortsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConsoleServerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-ports/'

        if (!$WritableConsoleServerPortRequest) {
            throw "Error! The required parameter `WritableConsoleServerPortRequest` missing when calling dcimConsoleServerPortsCreate."
        }

        $LocalVarBodyParameter = $WritableConsoleServerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console server port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimConsoleServerPortsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/console-server-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsoleServerPortsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableEnd
No description available.

.PARAMETER CableEndN
No description available.

.PARAMETER Cabled
No description available.

.PARAMETER Connected
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Device
Device (name)

.PARAMETER DeviceN
Device (name)

.PARAMETER DeviceId
Device (ID)

.PARAMETER DeviceIdN
Device (ID)

.PARAMETER DeviceRole
Device role (slug)

.PARAMETER DeviceRoleN
Device role (slug)

.PARAMETER DeviceRoleId
Device role (ID)

.PARAMETER DeviceRoleIdN
Device role (ID)

.PARAMETER DeviceType
Device type (model)

.PARAMETER DeviceTypeN
Device type (model)

.PARAMETER DeviceTypeId
Device type (ID)

.PARAMETER DeviceTypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuleId
Module (ID)

.PARAMETER ModuleIdN
Module (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Occupied
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Rack
Rack (name)

.PARAMETER RackN
Rack (name)

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Role
Device role (slug)

.PARAMETER RoleN
Device role (slug)

.PARAMETER RoleId
Device role (ID)

.PARAMETER RoleIdN
Device role (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Type
Physical port type

.PARAMETER TypeN
Physical port type

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VirtualChassis
Virtual Chassis

.PARAMETER VirtualChassisN
Virtual Chassis

.PARAMETER VirtualChassisId
Virtual Chassis (ID)

.PARAMETER VirtualChassisIdN
Virtual Chassis (ID)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedConsoleServerPortList
#>
function Invoke-DcimConsoleServerPortsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEnd},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEndN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Cabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Connected},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Device},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceN},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRole},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRoleN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleId},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleIdN},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceType},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceTypeN},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LocationN},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleId},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleIdN},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Occupied},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Rack},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RackN},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassis},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassisN},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisId},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/console-server-ports/'

        if ($CableEnd) {
            $LocalVarQueryParameters['cable_end'] = $CableEnd
        }

        if ($CableEndN) {
            $LocalVarQueryParameters['cable_end__n'] = $CableEndN
        }

        if ($Cabled) {
            $LocalVarQueryParameters['cabled'] = $Cabled
        }

        if ($Connected) {
            $LocalVarQueryParameters['connected'] = $Connected
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceN) {
            $LocalVarQueryParameters['device__n'] = $DeviceN
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($DeviceRole) {
            $LocalVarQueryParameters['device_role'] = $DeviceRole
        }

        if ($DeviceRoleN) {
            $LocalVarQueryParameters['device_role__n'] = $DeviceRoleN
        }

        if ($DeviceRoleId) {
            $LocalVarQueryParameters['device_role_id'] = $DeviceRoleId
        }

        if ($DeviceRoleIdN) {
            $LocalVarQueryParameters['device_role_id__n'] = $DeviceRoleIdN
        }

        if ($DeviceType) {
            $LocalVarQueryParameters['device_type'] = $DeviceType
        }

        if ($DeviceTypeN) {
            $LocalVarQueryParameters['device_type__n'] = $DeviceTypeN
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuleId) {
            $LocalVarQueryParameters['module_id'] = $ModuleId
        }

        if ($ModuleIdN) {
            $LocalVarQueryParameters['module_id__n'] = $ModuleIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Occupied) {
            $LocalVarQueryParameters['occupied'] = $Occupied
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Rack) {
            $LocalVarQueryParameters['rack'] = $Rack
        }

        if ($RackN) {
            $LocalVarQueryParameters['rack__n'] = $RackN
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VirtualChassis) {
            $LocalVarQueryParameters['virtual_chassis'] = $VirtualChassis
        }

        if ($VirtualChassisN) {
            $LocalVarQueryParameters['virtual_chassis__n'] = $VirtualChassisN
        }

        if ($VirtualChassisId) {
            $LocalVarQueryParameters['virtual_chassis_id'] = $VirtualChassisId
        }

        if ($VirtualChassisIdN) {
            $LocalVarQueryParameters['virtual_chassis_id__n'] = $VirtualChassisIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedConsoleServerPortList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console server port.

.PARAMETER PatchedWritableConsoleServerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPort
#>
function Invoke-DcimConsoleServerPortsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableConsoleServerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsoleServerPortsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableConsoleServerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console server port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPort
#>
function Invoke-DcimConsoleServerPortsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/console-server-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsoleServerPortsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console server port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPort
#>
function Invoke-DcimConsoleServerPortsTraceRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortsTraceRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/console-server-ports/{id}/trace/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsoleServerPortsTraceRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this console server port.

.PARAMETER WritableConsoleServerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConsoleServerPort
#>
function Invoke-DcimConsoleServerPortsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConsoleServerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimConsoleServerPortsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/console-server-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimConsoleServerPortsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableConsoleServerPortRequest) {
            throw "Error! The required parameter `WritableConsoleServerPortRequest` missing when calling dcimConsoleServerPortsUpdate."
        }

        $LocalVarBodyParameter = $WritableConsoleServerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConsoleServerPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimDeviceBayTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBayTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bay-templates/'

        if (!$DeviceBayTemplateRequest) {
            throw "Error! The required parameter `DeviceBayTemplateRequest` missing when calling dcimDeviceBayTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $DeviceBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBayTemplate[]
#>
function Invoke-DcimDeviceBayTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBayTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bay-templates/'

        if (!$DeviceBayTemplateRequest) {
            throw "Error! The required parameter `DeviceBayTemplateRequest` missing when calling dcimDeviceBayTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $DeviceBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBayTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBayTemplate[]
#>
function Invoke-DcimDeviceBayTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBayTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bay-templates/'

        if (!$DeviceBayTemplateRequest) {
            throw "Error! The required parameter `DeviceBayTemplateRequest` missing when calling dcimDeviceBayTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $DeviceBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBayTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableDeviceBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBayTemplate
#>
function Invoke-DcimDeviceBayTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableDeviceBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBayTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bay-templates/'

        if (!$WritableDeviceBayTemplateRequest) {
            throw "Error! The required parameter `WritableDeviceBayTemplateRequest` missing when calling dcimDeviceBayTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritableDeviceBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBayTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device bay template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimDeviceBayTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBayTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/device-bay-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceBayTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DevicetypeId
Device type (ID)

.PARAMETER DevicetypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedDeviceBayTemplateList
#>
function Invoke-DcimDeviceBayTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeIdN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBayTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/device-bay-templates/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DevicetypeId) {
            $LocalVarQueryParameters['devicetype_id'] = $DevicetypeId
        }

        if ($DevicetypeIdN) {
            $LocalVarQueryParameters['devicetype_id__n'] = $DevicetypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedDeviceBayTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device bay template.

.PARAMETER PatchedWritableDeviceBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBayTemplate
#>
function Invoke-DcimDeviceBayTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableDeviceBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBayTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bay-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceBayTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableDeviceBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBayTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device bay template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBayTemplate
#>
function Invoke-DcimDeviceBayTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBayTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/device-bay-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceBayTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBayTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device bay template.

.PARAMETER WritableDeviceBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBayTemplate
#>
function Invoke-DcimDeviceBayTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableDeviceBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBayTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bay-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceBayTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableDeviceBayTemplateRequest) {
            throw "Error! The required parameter `WritableDeviceBayTemplateRequest` missing when calling dcimDeviceBayTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritableDeviceBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBayTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimDeviceBaysBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBaysBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bays/'

        if (!$DeviceBayRequest) {
            throw "Error! The required parameter `DeviceBayRequest` missing when calling dcimDeviceBaysBulkDestroy."
        }

        $LocalVarBodyParameter = $DeviceBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBay[]
#>
function Invoke-DcimDeviceBaysBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBaysBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bays/'

        if (!$DeviceBayRequest) {
            throw "Error! The required parameter `DeviceBayRequest` missing when calling dcimDeviceBaysBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $DeviceBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBay[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBay[]
#>
function Invoke-DcimDeviceBaysBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBaysBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bays/'

        if (!$DeviceBayRequest) {
            throw "Error! The required parameter `DeviceBayRequest` missing when calling dcimDeviceBaysBulkUpdate."
        }

        $LocalVarBodyParameter = $DeviceBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBay[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableDeviceBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBay
#>
function Invoke-DcimDeviceBaysCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableDeviceBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBaysCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bays/'

        if (!$WritableDeviceBayRequest) {
            throw "Error! The required parameter `WritableDeviceBayRequest` missing when calling dcimDeviceBaysCreate."
        }

        $LocalVarBodyParameter = $WritableDeviceBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBay" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device bay.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimDeviceBaysDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBaysDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/device-bays/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceBaysDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Device
Device (name)

.PARAMETER DeviceN
Device (name)

.PARAMETER DeviceId
Device (ID)

.PARAMETER DeviceIdN
Device (ID)

.PARAMETER DeviceRole
Device role (slug)

.PARAMETER DeviceRoleN
Device role (slug)

.PARAMETER DeviceRoleId
Device role (ID)

.PARAMETER DeviceRoleIdN
Device role (ID)

.PARAMETER DeviceType
Device type (model)

.PARAMETER DeviceTypeN
Device type (model)

.PARAMETER DeviceTypeId
Device type (ID)

.PARAMETER DeviceTypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Rack
Rack (name)

.PARAMETER RackN
Rack (name)

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Role
Device role (slug)

.PARAMETER RoleN
Device role (slug)

.PARAMETER RoleId
Device role (ID)

.PARAMETER RoleIdN
Device role (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VirtualChassis
Virtual Chassis

.PARAMETER VirtualChassisN
Virtual Chassis

.PARAMETER VirtualChassisId
Virtual Chassis (ID)

.PARAMETER VirtualChassisIdN
Virtual Chassis (ID)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedDeviceBayList
#>
function Invoke-DcimDeviceBaysList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Device},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRole},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRoleN},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleId},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleIdN},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceType},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceTypeN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LocationN},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Rack},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RackN},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassis},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassisN},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisId},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBaysList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/device-bays/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceN) {
            $LocalVarQueryParameters['device__n'] = $DeviceN
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($DeviceRole) {
            $LocalVarQueryParameters['device_role'] = $DeviceRole
        }

        if ($DeviceRoleN) {
            $LocalVarQueryParameters['device_role__n'] = $DeviceRoleN
        }

        if ($DeviceRoleId) {
            $LocalVarQueryParameters['device_role_id'] = $DeviceRoleId
        }

        if ($DeviceRoleIdN) {
            $LocalVarQueryParameters['device_role_id__n'] = $DeviceRoleIdN
        }

        if ($DeviceType) {
            $LocalVarQueryParameters['device_type'] = $DeviceType
        }

        if ($DeviceTypeN) {
            $LocalVarQueryParameters['device_type__n'] = $DeviceTypeN
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Rack) {
            $LocalVarQueryParameters['rack'] = $Rack
        }

        if ($RackN) {
            $LocalVarQueryParameters['rack__n'] = $RackN
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VirtualChassis) {
            $LocalVarQueryParameters['virtual_chassis'] = $VirtualChassis
        }

        if ($VirtualChassisN) {
            $LocalVarQueryParameters['virtual_chassis__n'] = $VirtualChassisN
        }

        if ($VirtualChassisId) {
            $LocalVarQueryParameters['virtual_chassis_id'] = $VirtualChassisId
        }

        if ($VirtualChassisIdN) {
            $LocalVarQueryParameters['virtual_chassis_id__n'] = $VirtualChassisIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedDeviceBayList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device bay.

.PARAMETER PatchedWritableDeviceBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBay
#>
function Invoke-DcimDeviceBaysPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableDeviceBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBaysPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bays/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceBaysPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableDeviceBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBay" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device bay.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBay
#>
function Invoke-DcimDeviceBaysRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBaysRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/device-bays/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceBaysRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBay" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device bay.

.PARAMETER WritableDeviceBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceBay
#>
function Invoke-DcimDeviceBaysUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableDeviceBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceBaysUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-bays/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceBaysUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableDeviceBayRequest) {
            throw "Error! The required parameter `WritableDeviceBayRequest` missing when calling dcimDeviceBaysUpdate."
        }

        $LocalVarBodyParameter = $WritableDeviceBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceBay" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimDeviceRolesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceRolesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-roles/'

        if (!$DeviceRoleRequest) {
            throw "Error! The required parameter `DeviceRoleRequest` missing when calling dcimDeviceRolesBulkDestroy."
        }

        $LocalVarBodyParameter = $DeviceRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceRole[]
#>
function Invoke-DcimDeviceRolesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceRolesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-roles/'

        if (!$DeviceRoleRequest) {
            throw "Error! The required parameter `DeviceRoleRequest` missing when calling dcimDeviceRolesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $DeviceRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceRole[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceRole[]
#>
function Invoke-DcimDeviceRolesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceRolesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-roles/'

        if (!$DeviceRoleRequest) {
            throw "Error! The required parameter `DeviceRoleRequest` missing when calling dcimDeviceRolesBulkUpdate."
        }

        $LocalVarBodyParameter = $DeviceRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceRole[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableDeviceRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceRole
#>
function Invoke-DcimDeviceRolesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableDeviceRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceRolesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-roles/'

        if (!$WritableDeviceRoleRequest) {
            throw "Error! The required parameter `WritableDeviceRoleRequest` missing when calling dcimDeviceRolesCreate."
        }

        $LocalVarBodyParameter = $WritableDeviceRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device role.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimDeviceRolesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceRolesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/device-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceRolesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Color
No description available.

.PARAMETER ColorEmpty
No description available.

.PARAMETER ColorIc
No description available.

.PARAMETER ColorIe
No description available.

.PARAMETER ColorIew
No description available.

.PARAMETER ColorIsw
No description available.

.PARAMETER ColorN
No description available.

.PARAMETER ColorNic
No description available.

.PARAMETER ColorNie
No description available.

.PARAMETER ColorNiew
No description available.

.PARAMETER ColorNisw
No description available.

.PARAMETER ConfigTemplateId
Config template (ID)

.PARAMETER ConfigTemplateIdN
Config template (ID)

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VmRole
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedDeviceRoleList
#>
function Invoke-DcimDeviceRolesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Color},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ColorEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIe},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIew},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIsw},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNie},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNiew},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNisw},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ConfigTemplateId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ConfigTemplateIdN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${VmRole},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceRolesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/device-roles/'

        if ($Color) {
            $LocalVarQueryParameters['color'] = $Color
        }

        if ($ColorEmpty) {
            $LocalVarQueryParameters['color__empty'] = $ColorEmpty
        }

        if ($ColorIc) {
            $LocalVarQueryParameters['color__ic'] = $ColorIc
        }

        if ($ColorIe) {
            $LocalVarQueryParameters['color__ie'] = $ColorIe
        }

        if ($ColorIew) {
            $LocalVarQueryParameters['color__iew'] = $ColorIew
        }

        if ($ColorIsw) {
            $LocalVarQueryParameters['color__isw'] = $ColorIsw
        }

        if ($ColorN) {
            $LocalVarQueryParameters['color__n'] = $ColorN
        }

        if ($ColorNic) {
            $LocalVarQueryParameters['color__nic'] = $ColorNic
        }

        if ($ColorNie) {
            $LocalVarQueryParameters['color__nie'] = $ColorNie
        }

        if ($ColorNiew) {
            $LocalVarQueryParameters['color__niew'] = $ColorNiew
        }

        if ($ColorNisw) {
            $LocalVarQueryParameters['color__nisw'] = $ColorNisw
        }

        if ($ConfigTemplateId) {
            $LocalVarQueryParameters['config_template_id'] = $ConfigTemplateId
        }

        if ($ConfigTemplateIdN) {
            $LocalVarQueryParameters['config_template_id__n'] = $ConfigTemplateIdN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VmRole) {
            $LocalVarQueryParameters['vm_role'] = $VmRole
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedDeviceRoleList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device role.

.PARAMETER PatchedWritableDeviceRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceRole
#>
function Invoke-DcimDeviceRolesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableDeviceRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceRolesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceRolesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableDeviceRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device role.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceRole
#>
function Invoke-DcimDeviceRolesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceRolesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/device-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceRolesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device role.

.PARAMETER WritableDeviceRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceRole
#>
function Invoke-DcimDeviceRolesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableDeviceRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceRolesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceRolesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableDeviceRoleRequest) {
            throw "Error! The required parameter `WritableDeviceRoleRequest` missing when calling dcimDeviceRolesUpdate."
        }

        $LocalVarBodyParameter = $WritableDeviceRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimDeviceTypesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceTypesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-types/'

        if (!$DeviceTypeRequest) {
            throw "Error! The required parameter `DeviceTypeRequest` missing when calling dcimDeviceTypesBulkDestroy."
        }

        $LocalVarBodyParameter = $DeviceTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceType[]
#>
function Invoke-DcimDeviceTypesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceTypesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-types/'

        if (!$DeviceTypeRequest) {
            throw "Error! The required parameter `DeviceTypeRequest` missing when calling dcimDeviceTypesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $DeviceTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceType[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceType[]
#>
function Invoke-DcimDeviceTypesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceTypesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-types/'

        if (!$DeviceTypeRequest) {
            throw "Error! The required parameter `DeviceTypeRequest` missing when calling dcimDeviceTypesBulkUpdate."
        }

        $LocalVarBodyParameter = $DeviceTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceType[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableDeviceTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceType
#>
function Invoke-DcimDeviceTypesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableDeviceTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceTypesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-types/'

        if (!$WritableDeviceTypeRequest) {
            throw "Error! The required parameter `WritableDeviceTypeRequest` missing when calling dcimDeviceTypesCreate."
        }

        $LocalVarBodyParameter = $WritableDeviceTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceType" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device type.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimDeviceTypesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceTypesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/device-types/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceTypesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Airflow
No description available.

.PARAMETER AirflowN
No description available.

.PARAMETER ConsolePorts
Has console ports

.PARAMETER ConsoleServerPorts
Has console server ports

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER DefaultPlatform
Default platform (slug)

.PARAMETER DefaultPlatformN
Default platform (slug)

.PARAMETER DefaultPlatformId
Default platform (ID)

.PARAMETER DefaultPlatformIdN
Default platform (ID)

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DeviceBays
Has device bays

.PARAMETER ExcludeFromUtilization
No description available.

.PARAMETER HasFrontImage
Has a front image

.PARAMETER HasRearImage
Has a rear image

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Interfaces
Has interfaces

.PARAMETER InventoryItems
Has inventory items

.PARAMETER IsFullDepth
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Manufacturer
Manufacturer (slug)

.PARAMETER ManufacturerN
Manufacturer (slug)

.PARAMETER ManufacturerId
Manufacturer (ID)

.PARAMETER ManufacturerIdN
Manufacturer (ID)

.PARAMETER Model
No description available.

.PARAMETER ModelEmpty
No description available.

.PARAMETER ModelIc
No description available.

.PARAMETER ModelIe
No description available.

.PARAMETER ModelIew
No description available.

.PARAMETER ModelIsw
No description available.

.PARAMETER ModelN
No description available.

.PARAMETER ModelNic
No description available.

.PARAMETER ModelNie
No description available.

.PARAMETER ModelNiew
No description available.

.PARAMETER ModelNisw
No description available.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuleBays
Has module bays

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER PartNumber
No description available.

.PARAMETER PartNumberEmpty
No description available.

.PARAMETER PartNumberIc
No description available.

.PARAMETER PartNumberIe
No description available.

.PARAMETER PartNumberIew
No description available.

.PARAMETER PartNumberIsw
No description available.

.PARAMETER PartNumberN
No description available.

.PARAMETER PartNumberNic
No description available.

.PARAMETER PartNumberNie
No description available.

.PARAMETER PartNumberNiew
No description available.

.PARAMETER PartNumberNisw
No description available.

.PARAMETER PassThroughPorts
Has pass-through ports

.PARAMETER PowerOutlets
Has power outlets

.PARAMETER PowerPorts
Has power ports

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER SubdeviceRole
Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.

.PARAMETER SubdeviceRoleN
Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UHeight
No description available.

.PARAMETER UHeightEmpty
No description available.

.PARAMETER UHeightGt
No description available.

.PARAMETER UHeightGte
No description available.

.PARAMETER UHeightLt
No description available.

.PARAMETER UHeightLte
No description available.

.PARAMETER UHeightN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER Weight
No description available.

.PARAMETER WeightEmpty
No description available.

.PARAMETER WeightGt
No description available.

.PARAMETER WeightGte
No description available.

.PARAMETER WeightLt
No description available.

.PARAMETER WeightLte
No description available.

.PARAMETER WeightN
No description available.

.PARAMETER WeightUnit
No description available.

.PARAMETER WeightUnitN
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedDeviceTypeList
#>
function Invoke-DcimDeviceTypesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Airflow},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AirflowN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ConsolePorts},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ConsoleServerPorts},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DefaultPlatform},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DefaultPlatformN},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DefaultPlatformId},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DefaultPlatformIdN},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DeviceBays},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ExcludeFromUtilization},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${HasFrontImage},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${HasRearImage},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Interfaces},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${InventoryItems},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IsFullDepth},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Manufacturer},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ManufacturerN},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerId},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerIdN},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Model},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ModelEmpty},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelIc},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelIe},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelIew},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelIsw},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelNic},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelNie},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelNiew},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelNisw},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ModuleBays},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumber},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PartNumberEmpty},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberIc},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberIe},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberIew},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberIsw},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberN},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberNic},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberNie},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberNiew},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberNisw},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PassThroughPorts},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PowerOutlets},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PowerPorts},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SubdeviceRole},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SubdeviceRoleN},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${UHeight},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${UHeightEmpty},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${UHeightGt},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${UHeightGte},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${UHeightLt},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${UHeightLte},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${UHeightN},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${Weight},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${WeightEmpty},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightGt},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightGte},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightLt},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightLte},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightN},
        [Parameter(Position = 113, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WeightUnit},
        [Parameter(Position = 114, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WeightUnitN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceTypesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/device-types/'

        if ($Airflow) {
            $LocalVarQueryParameters['airflow'] = $Airflow
        }

        if ($AirflowN) {
            $LocalVarQueryParameters['airflow__n'] = $AirflowN
        }

        if ($ConsolePorts) {
            $LocalVarQueryParameters['console_ports'] = $ConsolePorts
        }

        if ($ConsoleServerPorts) {
            $LocalVarQueryParameters['console_server_ports'] = $ConsoleServerPorts
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($DefaultPlatform) {
            $LocalVarQueryParameters['default_platform'] = $DefaultPlatform
        }

        if ($DefaultPlatformN) {
            $LocalVarQueryParameters['default_platform__n'] = $DefaultPlatformN
        }

        if ($DefaultPlatformId) {
            $LocalVarQueryParameters['default_platform_id'] = $DefaultPlatformId
        }

        if ($DefaultPlatformIdN) {
            $LocalVarQueryParameters['default_platform_id__n'] = $DefaultPlatformIdN
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DeviceBays) {
            $LocalVarQueryParameters['device_bays'] = $DeviceBays
        }

        if ($ExcludeFromUtilization) {
            $LocalVarQueryParameters['exclude_from_utilization'] = $ExcludeFromUtilization
        }

        if ($HasFrontImage) {
            $LocalVarQueryParameters['has_front_image'] = $HasFrontImage
        }

        if ($HasRearImage) {
            $LocalVarQueryParameters['has_rear_image'] = $HasRearImage
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Interfaces) {
            $LocalVarQueryParameters['interfaces'] = $Interfaces
        }

        if ($InventoryItems) {
            $LocalVarQueryParameters['inventory_items'] = $InventoryItems
        }

        if ($IsFullDepth) {
            $LocalVarQueryParameters['is_full_depth'] = $IsFullDepth
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Manufacturer) {
            $LocalVarQueryParameters['manufacturer'] = $Manufacturer
        }

        if ($ManufacturerN) {
            $LocalVarQueryParameters['manufacturer__n'] = $ManufacturerN
        }

        if ($ManufacturerId) {
            $LocalVarQueryParameters['manufacturer_id'] = $ManufacturerId
        }

        if ($ManufacturerIdN) {
            $LocalVarQueryParameters['manufacturer_id__n'] = $ManufacturerIdN
        }

        if ($Model) {
            $LocalVarQueryParameters['model'] = $Model
        }

        if ($ModelEmpty) {
            $LocalVarQueryParameters['model__empty'] = $ModelEmpty
        }

        if ($ModelIc) {
            $LocalVarQueryParameters['model__ic'] = $ModelIc
        }

        if ($ModelIe) {
            $LocalVarQueryParameters['model__ie'] = $ModelIe
        }

        if ($ModelIew) {
            $LocalVarQueryParameters['model__iew'] = $ModelIew
        }

        if ($ModelIsw) {
            $LocalVarQueryParameters['model__isw'] = $ModelIsw
        }

        if ($ModelN) {
            $LocalVarQueryParameters['model__n'] = $ModelN
        }

        if ($ModelNic) {
            $LocalVarQueryParameters['model__nic'] = $ModelNic
        }

        if ($ModelNie) {
            $LocalVarQueryParameters['model__nie'] = $ModelNie
        }

        if ($ModelNiew) {
            $LocalVarQueryParameters['model__niew'] = $ModelNiew
        }

        if ($ModelNisw) {
            $LocalVarQueryParameters['model__nisw'] = $ModelNisw
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuleBays) {
            $LocalVarQueryParameters['module_bays'] = $ModuleBays
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($PartNumber) {
            $LocalVarQueryParameters['part_number'] = $PartNumber
        }

        if ($PartNumberEmpty) {
            $LocalVarQueryParameters['part_number__empty'] = $PartNumberEmpty
        }

        if ($PartNumberIc) {
            $LocalVarQueryParameters['part_number__ic'] = $PartNumberIc
        }

        if ($PartNumberIe) {
            $LocalVarQueryParameters['part_number__ie'] = $PartNumberIe
        }

        if ($PartNumberIew) {
            $LocalVarQueryParameters['part_number__iew'] = $PartNumberIew
        }

        if ($PartNumberIsw) {
            $LocalVarQueryParameters['part_number__isw'] = $PartNumberIsw
        }

        if ($PartNumberN) {
            $LocalVarQueryParameters['part_number__n'] = $PartNumberN
        }

        if ($PartNumberNic) {
            $LocalVarQueryParameters['part_number__nic'] = $PartNumberNic
        }

        if ($PartNumberNie) {
            $LocalVarQueryParameters['part_number__nie'] = $PartNumberNie
        }

        if ($PartNumberNiew) {
            $LocalVarQueryParameters['part_number__niew'] = $PartNumberNiew
        }

        if ($PartNumberNisw) {
            $LocalVarQueryParameters['part_number__nisw'] = $PartNumberNisw
        }

        if ($PassThroughPorts) {
            $LocalVarQueryParameters['pass_through_ports'] = $PassThroughPorts
        }

        if ($PowerOutlets) {
            $LocalVarQueryParameters['power_outlets'] = $PowerOutlets
        }

        if ($PowerPorts) {
            $LocalVarQueryParameters['power_ports'] = $PowerPorts
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($SubdeviceRole) {
            $LocalVarQueryParameters['subdevice_role'] = $SubdeviceRole
        }

        if ($SubdeviceRoleN) {
            $LocalVarQueryParameters['subdevice_role__n'] = $SubdeviceRoleN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UHeight) {
            $LocalVarQueryParameters['u_height'] = $UHeight
        }

        if ($UHeightEmpty) {
            $LocalVarQueryParameters['u_height__empty'] = $UHeightEmpty
        }

        if ($UHeightGt) {
            $LocalVarQueryParameters['u_height__gt'] = $UHeightGt
        }

        if ($UHeightGte) {
            $LocalVarQueryParameters['u_height__gte'] = $UHeightGte
        }

        if ($UHeightLt) {
            $LocalVarQueryParameters['u_height__lt'] = $UHeightLt
        }

        if ($UHeightLte) {
            $LocalVarQueryParameters['u_height__lte'] = $UHeightLte
        }

        if ($UHeightN) {
            $LocalVarQueryParameters['u_height__n'] = $UHeightN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Weight) {
            $LocalVarQueryParameters['weight'] = $Weight
        }

        if ($WeightEmpty) {
            $LocalVarQueryParameters['weight__empty'] = $WeightEmpty
        }

        if ($WeightGt) {
            $LocalVarQueryParameters['weight__gt'] = $WeightGt
        }

        if ($WeightGte) {
            $LocalVarQueryParameters['weight__gte'] = $WeightGte
        }

        if ($WeightLt) {
            $LocalVarQueryParameters['weight__lt'] = $WeightLt
        }

        if ($WeightLte) {
            $LocalVarQueryParameters['weight__lte'] = $WeightLte
        }

        if ($WeightN) {
            $LocalVarQueryParameters['weight__n'] = $WeightN
        }

        if ($WeightUnit) {
            $LocalVarQueryParameters['weight_unit'] = $WeightUnit
        }

        if ($WeightUnitN) {
            $LocalVarQueryParameters['weight_unit__n'] = $WeightUnitN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedDeviceTypeList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device type.

.PARAMETER PatchedWritableDeviceTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceType
#>
function Invoke-DcimDeviceTypesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableDeviceTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceTypesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-types/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceTypesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableDeviceTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceType" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device type.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceType
#>
function Invoke-DcimDeviceTypesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceTypesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/device-types/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceTypesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceType" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device type.

.PARAMETER WritableDeviceTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceType
#>
function Invoke-DcimDeviceTypesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableDeviceTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDeviceTypesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/device-types/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDeviceTypesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableDeviceTypeRequest) {
            throw "Error! The required parameter `WritableDeviceTypeRequest` missing when calling dcimDeviceTypesUpdate."
        }

        $LocalVarBodyParameter = $WritableDeviceTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceType" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceWithConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimDevicesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceWithConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDevicesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/devices/'

        if (!$DeviceWithConfigContextRequest) {
            throw "Error! The required parameter `DeviceWithConfigContextRequest` missing when calling dcimDevicesBulkDestroy."
        }

        $LocalVarBodyParameter = $DeviceWithConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceWithConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceWithConfigContext[]
#>
function Invoke-DcimDevicesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceWithConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDevicesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/devices/'

        if (!$DeviceWithConfigContextRequest) {
            throw "Error! The required parameter `DeviceWithConfigContextRequest` missing when calling dcimDevicesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $DeviceWithConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceWithConfigContext[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DeviceWithConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceWithConfigContext[]
#>
function Invoke-DcimDevicesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${DeviceWithConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDevicesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/devices/'

        if (!$DeviceWithConfigContextRequest) {
            throw "Error! The required parameter `DeviceWithConfigContextRequest` missing when calling dcimDevicesBulkUpdate."
        }

        $LocalVarBodyParameter = $DeviceWithConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceWithConfigContext[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableDeviceWithConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceWithConfigContext
#>
function Invoke-DcimDevicesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableDeviceWithConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDevicesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/devices/'

        if (!$WritableDeviceWithConfigContextRequest) {
            throw "Error! The required parameter `WritableDeviceWithConfigContextRequest` missing when calling dcimDevicesCreate."
        }

        $LocalVarBodyParameter = $WritableDeviceWithConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceWithConfigContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimDevicesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDevicesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/devices/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDevicesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Airflow
No description available.

.PARAMETER AirflowN
No description available.

.PARAMETER AssetTag
No description available.

.PARAMETER AssetTagEmpty
No description available.

.PARAMETER AssetTagIc
No description available.

.PARAMETER AssetTagIe
No description available.

.PARAMETER AssetTagIew
No description available.

.PARAMETER AssetTagIsw
No description available.

.PARAMETER AssetTagN
No description available.

.PARAMETER AssetTagNic
No description available.

.PARAMETER AssetTagNie
No description available.

.PARAMETER AssetTagNiew
No description available.

.PARAMETER AssetTagNisw
No description available.

.PARAMETER ClusterId
VM cluster (ID)

.PARAMETER ClusterIdN
VM cluster (ID)

.PARAMETER ConfigTemplateId
Config template (ID)

.PARAMETER ConfigTemplateIdN
Config template (ID)

.PARAMETER ConsolePorts
Has console ports

.PARAMETER ConsoleServerPorts
Has console server ports

.PARAMETER Contact
Contact

.PARAMETER ContactN
Contact

.PARAMETER ContactGroup
Contact group

.PARAMETER ContactGroupN
Contact group

.PARAMETER ContactRole
Contact Role

.PARAMETER ContactRoleN
Contact Role

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DeviceBays
Has device bays

.PARAMETER DeviceType
Device type (slug)

.PARAMETER DeviceTypeN
Device type (slug)

.PARAMETER DeviceTypeId
Device type (ID)

.PARAMETER DeviceTypeIdN
Device type (ID)

.PARAMETER Face
No description available.

.PARAMETER FaceN
No description available.

.PARAMETER HasOobIp
Has an out-of-band IP

.PARAMETER HasPrimaryIp
Has a primary IP

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Interfaces
Has interfaces

.PARAMETER IsFullDepth
Is full depth

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Latitude
No description available.

.PARAMETER LatitudeEmpty
No description available.

.PARAMETER LatitudeGt
No description available.

.PARAMETER LatitudeGte
No description available.

.PARAMETER LatitudeLt
No description available.

.PARAMETER LatitudeLte
No description available.

.PARAMETER LatitudeN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER LocalContextData
Has local config context data

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER Longitude
No description available.

.PARAMETER LongitudeEmpty
No description available.

.PARAMETER LongitudeGt
No description available.

.PARAMETER LongitudeGte
No description available.

.PARAMETER LongitudeLt
No description available.

.PARAMETER LongitudeLte
No description available.

.PARAMETER LongitudeN
No description available.

.PARAMETER MacAddress
No description available.

.PARAMETER MacAddressIc
No description available.

.PARAMETER MacAddressIe
No description available.

.PARAMETER MacAddressIew
No description available.

.PARAMETER MacAddressIsw
No description available.

.PARAMETER MacAddressN
No description available.

.PARAMETER MacAddressNic
No description available.

.PARAMETER MacAddressNie
No description available.

.PARAMETER MacAddressNiew
No description available.

.PARAMETER MacAddressNisw
No description available.

.PARAMETER Manufacturer
Manufacturer (slug)

.PARAMETER ManufacturerN
Manufacturer (slug)

.PARAMETER ManufacturerId
Manufacturer (ID)

.PARAMETER ManufacturerIdN
Manufacturer (ID)

.PARAMETER Model
Device model (slug)

.PARAMETER ModelN
Device model (slug)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuleBays
Has module bays

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER OobIpId
OOB IP (ID)

.PARAMETER OobIpIdN
OOB IP (ID)

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER ParentDeviceId
Parent Device (ID)

.PARAMETER ParentDeviceIdN
Parent Device (ID)

.PARAMETER PassThroughPorts
Has pass-through ports

.PARAMETER Platform
Platform (slug)

.PARAMETER PlatformN
Platform (slug)

.PARAMETER PlatformId
Platform (ID)

.PARAMETER PlatformIdN
Platform (ID)

.PARAMETER Position
No description available.

.PARAMETER PositionEmpty
No description available.

.PARAMETER PositionGt
No description available.

.PARAMETER PositionGte
No description available.

.PARAMETER PositionLt
No description available.

.PARAMETER PositionLte
No description available.

.PARAMETER PositionN
No description available.

.PARAMETER PowerOutlets
Has power outlets

.PARAMETER PowerPorts
Has power ports

.PARAMETER PrimaryIp4Id
Primary IPv4 (ID)

.PARAMETER PrimaryIp4IdN
Primary IPv4 (ID)

.PARAMETER PrimaryIp6Id
Primary IPv6 (ID)

.PARAMETER PrimaryIp6IdN
Primary IPv6 (ID)

.PARAMETER Q
Search

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Role
Role (slug)

.PARAMETER RoleN
Role (slug)

.PARAMETER RoleId
Role (ID)

.PARAMETER RoleIdN
Role (ID)

.PARAMETER Serial
No description available.

.PARAMETER SerialEmpty
No description available.

.PARAMETER SerialIc
No description available.

.PARAMETER SerialIe
No description available.

.PARAMETER SerialIew
No description available.

.PARAMETER SerialIsw
No description available.

.PARAMETER SerialN
No description available.

.PARAMETER SerialNic
No description available.

.PARAMETER SerialNie
No description available.

.PARAMETER SerialNiew
No description available.

.PARAMETER SerialNisw
No description available.

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Status
No description available.

.PARAMETER StatusN
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantGroup
Tenant Group (slug)

.PARAMETER TenantGroupN
Tenant Group (slug)

.PARAMETER TenantGroupId
Tenant Group (ID)

.PARAMETER TenantGroupIdN
Tenant Group (ID)

.PARAMETER TenantId
Tenant (ID)

.PARAMETER TenantIdN
Tenant (ID)

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VcPosition
No description available.

.PARAMETER VcPositionEmpty
No description available.

.PARAMETER VcPositionGt
No description available.

.PARAMETER VcPositionGte
No description available.

.PARAMETER VcPositionLt
No description available.

.PARAMETER VcPositionLte
No description available.

.PARAMETER VcPositionN
No description available.

.PARAMETER VcPriority
No description available.

.PARAMETER VcPriorityEmpty
No description available.

.PARAMETER VcPriorityGt
No description available.

.PARAMETER VcPriorityGte
No description available.

.PARAMETER VcPriorityLt
No description available.

.PARAMETER VcPriorityLte
No description available.

.PARAMETER VcPriorityN
No description available.

.PARAMETER VirtualChassisId
Virtual chassis (ID)

.PARAMETER VirtualChassisIdN
Virtual chassis (ID)

.PARAMETER VirtualChassisMember
Is a virtual chassis member

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedDeviceWithConfigContextList
#>
function Invoke-DcimDevicesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Airflow},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AirflowN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTag},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AssetTagEmpty},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIc},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIe},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIew},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIsw},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagN},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNic},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNie},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNiew},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNisw},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ClusterId},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ClusterIdN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ConfigTemplateId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ConfigTemplateIdN},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ConsolePorts},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ConsoleServerPorts},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Contact},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroup},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroupN},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRole},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRoleN},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DeviceBays},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceType},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceTypeN},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Face},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FaceN},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${HasOobIp},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${HasPrimaryIp},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Interfaces},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IsFullDepth},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${Latitude},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LatitudeEmpty},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LatitudeGt},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LatitudeGte},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LatitudeLt},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LatitudeLte},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LatitudeN},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LocalContextData},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${Longitude},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LongitudeEmpty},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LongitudeGt},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LongitudeGte},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LongitudeLt},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LongitudeLte},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LongitudeN},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddress},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressIc},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressIe},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressIew},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressIsw},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressN},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressNic},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressNie},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressNiew},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressNisw},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Manufacturer},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ManufacturerN},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerId},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerIdN},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Model},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelN},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ModuleBays},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 113, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 114, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 115, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 116, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 117, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OobIpId},
        [Parameter(Position = 118, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OobIpIdN},
        [Parameter(Position = 119, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 120, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentDeviceId},
        [Parameter(Position = 121, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentDeviceIdN},
        [Parameter(Position = 122, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PassThroughPorts},
        [Parameter(Position = 123, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Platform},
        [Parameter(Position = 124, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PlatformN},
        [Parameter(Position = 125, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PlatformId},
        [Parameter(Position = 126, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PlatformIdN},
        [Parameter(Position = 127, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${Position},
        [Parameter(Position = 128, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PositionEmpty},
        [Parameter(Position = 129, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${PositionGt},
        [Parameter(Position = 130, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${PositionGte},
        [Parameter(Position = 131, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${PositionLt},
        [Parameter(Position = 132, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${PositionLte},
        [Parameter(Position = 133, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${PositionN},
        [Parameter(Position = 134, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PowerOutlets},
        [Parameter(Position = 135, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PowerPorts},
        [Parameter(Position = 136, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PrimaryIp4Id},
        [Parameter(Position = 137, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PrimaryIp4IdN},
        [Parameter(Position = 138, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PrimaryIp6Id},
        [Parameter(Position = 139, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PrimaryIp6IdN},
        [Parameter(Position = 140, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 141, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 142, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 143, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 144, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 145, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 146, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 147, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 148, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 149, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 150, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 151, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Serial},
        [Parameter(Position = 152, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SerialEmpty},
        [Parameter(Position = 153, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIc},
        [Parameter(Position = 154, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIe},
        [Parameter(Position = 155, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIew},
        [Parameter(Position = 156, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIsw},
        [Parameter(Position = 157, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialN},
        [Parameter(Position = 158, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNic},
        [Parameter(Position = 159, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNie},
        [Parameter(Position = 160, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNiew},
        [Parameter(Position = 161, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNisw},
        [Parameter(Position = 162, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 163, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 164, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 165, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 166, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 167, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 168, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 169, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 170, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Status},
        [Parameter(Position = 171, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${StatusN},
        [Parameter(Position = 172, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 173, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 174, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 175, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 176, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroup},
        [Parameter(Position = 177, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupN},
        [Parameter(Position = 178, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupId},
        [Parameter(Position = 179, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupIdN},
        [Parameter(Position = 180, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 181, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 182, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 183, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPosition},
        [Parameter(Position = 184, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${VcPositionEmpty},
        [Parameter(Position = 185, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPositionGt},
        [Parameter(Position = 186, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPositionGte},
        [Parameter(Position = 187, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPositionLt},
        [Parameter(Position = 188, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPositionLte},
        [Parameter(Position = 189, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPositionN},
        [Parameter(Position = 190, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPriority},
        [Parameter(Position = 191, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${VcPriorityEmpty},
        [Parameter(Position = 192, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPriorityGt},
        [Parameter(Position = 193, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPriorityGte},
        [Parameter(Position = 194, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPriorityLt},
        [Parameter(Position = 195, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPriorityLte},
        [Parameter(Position = 196, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VcPriorityN},
        [Parameter(Position = 197, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisId},
        [Parameter(Position = 198, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisIdN},
        [Parameter(Position = 199, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${VirtualChassisMember},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDevicesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/devices/'

        if ($Airflow) {
            $LocalVarQueryParameters['airflow'] = $Airflow
        }

        if ($AirflowN) {
            $LocalVarQueryParameters['airflow__n'] = $AirflowN
        }

        if ($AssetTag) {
            $LocalVarQueryParameters['asset_tag'] = $AssetTag
        }

        if ($AssetTagEmpty) {
            $LocalVarQueryParameters['asset_tag__empty'] = $AssetTagEmpty
        }

        if ($AssetTagIc) {
            $LocalVarQueryParameters['asset_tag__ic'] = $AssetTagIc
        }

        if ($AssetTagIe) {
            $LocalVarQueryParameters['asset_tag__ie'] = $AssetTagIe
        }

        if ($AssetTagIew) {
            $LocalVarQueryParameters['asset_tag__iew'] = $AssetTagIew
        }

        if ($AssetTagIsw) {
            $LocalVarQueryParameters['asset_tag__isw'] = $AssetTagIsw
        }

        if ($AssetTagN) {
            $LocalVarQueryParameters['asset_tag__n'] = $AssetTagN
        }

        if ($AssetTagNic) {
            $LocalVarQueryParameters['asset_tag__nic'] = $AssetTagNic
        }

        if ($AssetTagNie) {
            $LocalVarQueryParameters['asset_tag__nie'] = $AssetTagNie
        }

        if ($AssetTagNiew) {
            $LocalVarQueryParameters['asset_tag__niew'] = $AssetTagNiew
        }

        if ($AssetTagNisw) {
            $LocalVarQueryParameters['asset_tag__nisw'] = $AssetTagNisw
        }

        if ($ClusterId) {
            $LocalVarQueryParameters['cluster_id'] = $ClusterId
        }

        if ($ClusterIdN) {
            $LocalVarQueryParameters['cluster_id__n'] = $ClusterIdN
        }

        if ($ConfigTemplateId) {
            $LocalVarQueryParameters['config_template_id'] = $ConfigTemplateId
        }

        if ($ConfigTemplateIdN) {
            $LocalVarQueryParameters['config_template_id__n'] = $ConfigTemplateIdN
        }

        if ($ConsolePorts) {
            $LocalVarQueryParameters['console_ports'] = $ConsolePorts
        }

        if ($ConsoleServerPorts) {
            $LocalVarQueryParameters['console_server_ports'] = $ConsoleServerPorts
        }

        if ($Contact) {
            $LocalVarQueryParameters['contact'] = $Contact
        }

        if ($ContactN) {
            $LocalVarQueryParameters['contact__n'] = $ContactN
        }

        if ($ContactGroup) {
            $LocalVarQueryParameters['contact_group'] = $ContactGroup
        }

        if ($ContactGroupN) {
            $LocalVarQueryParameters['contact_group__n'] = $ContactGroupN
        }

        if ($ContactRole) {
            $LocalVarQueryParameters['contact_role'] = $ContactRole
        }

        if ($ContactRoleN) {
            $LocalVarQueryParameters['contact_role__n'] = $ContactRoleN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DeviceBays) {
            $LocalVarQueryParameters['device_bays'] = $DeviceBays
        }

        if ($DeviceType) {
            $LocalVarQueryParameters['device_type'] = $DeviceType
        }

        if ($DeviceTypeN) {
            $LocalVarQueryParameters['device_type__n'] = $DeviceTypeN
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($Face) {
            $LocalVarQueryParameters['face'] = $Face
        }

        if ($FaceN) {
            $LocalVarQueryParameters['face__n'] = $FaceN
        }

        if ($HasOobIp) {
            $LocalVarQueryParameters['has_oob_ip'] = $HasOobIp
        }

        if ($HasPrimaryIp) {
            $LocalVarQueryParameters['has_primary_ip'] = $HasPrimaryIp
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Interfaces) {
            $LocalVarQueryParameters['interfaces'] = $Interfaces
        }

        if ($IsFullDepth) {
            $LocalVarQueryParameters['is_full_depth'] = $IsFullDepth
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Latitude) {
            $LocalVarQueryParameters['latitude'] = $Latitude
        }

        if ($LatitudeEmpty) {
            $LocalVarQueryParameters['latitude__empty'] = $LatitudeEmpty
        }

        if ($LatitudeGt) {
            $LocalVarQueryParameters['latitude__gt'] = $LatitudeGt
        }

        if ($LatitudeGte) {
            $LocalVarQueryParameters['latitude__gte'] = $LatitudeGte
        }

        if ($LatitudeLt) {
            $LocalVarQueryParameters['latitude__lt'] = $LatitudeLt
        }

        if ($LatitudeLte) {
            $LocalVarQueryParameters['latitude__lte'] = $LatitudeLte
        }

        if ($LatitudeN) {
            $LocalVarQueryParameters['latitude__n'] = $LatitudeN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($LocalContextData) {
            $LocalVarQueryParameters['local_context_data'] = $LocalContextData
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($Longitude) {
            $LocalVarQueryParameters['longitude'] = $Longitude
        }

        if ($LongitudeEmpty) {
            $LocalVarQueryParameters['longitude__empty'] = $LongitudeEmpty
        }

        if ($LongitudeGt) {
            $LocalVarQueryParameters['longitude__gt'] = $LongitudeGt
        }

        if ($LongitudeGte) {
            $LocalVarQueryParameters['longitude__gte'] = $LongitudeGte
        }

        if ($LongitudeLt) {
            $LocalVarQueryParameters['longitude__lt'] = $LongitudeLt
        }

        if ($LongitudeLte) {
            $LocalVarQueryParameters['longitude__lte'] = $LongitudeLte
        }

        if ($LongitudeN) {
            $LocalVarQueryParameters['longitude__n'] = $LongitudeN
        }

        if ($MacAddress) {
            $LocalVarQueryParameters['mac_address'] = $MacAddress
        }

        if ($MacAddressIc) {
            $LocalVarQueryParameters['mac_address__ic'] = $MacAddressIc
        }

        if ($MacAddressIe) {
            $LocalVarQueryParameters['mac_address__ie'] = $MacAddressIe
        }

        if ($MacAddressIew) {
            $LocalVarQueryParameters['mac_address__iew'] = $MacAddressIew
        }

        if ($MacAddressIsw) {
            $LocalVarQueryParameters['mac_address__isw'] = $MacAddressIsw
        }

        if ($MacAddressN) {
            $LocalVarQueryParameters['mac_address__n'] = $MacAddressN
        }

        if ($MacAddressNic) {
            $LocalVarQueryParameters['mac_address__nic'] = $MacAddressNic
        }

        if ($MacAddressNie) {
            $LocalVarQueryParameters['mac_address__nie'] = $MacAddressNie
        }

        if ($MacAddressNiew) {
            $LocalVarQueryParameters['mac_address__niew'] = $MacAddressNiew
        }

        if ($MacAddressNisw) {
            $LocalVarQueryParameters['mac_address__nisw'] = $MacAddressNisw
        }

        if ($Manufacturer) {
            $LocalVarQueryParameters['manufacturer'] = $Manufacturer
        }

        if ($ManufacturerN) {
            $LocalVarQueryParameters['manufacturer__n'] = $ManufacturerN
        }

        if ($ManufacturerId) {
            $LocalVarQueryParameters['manufacturer_id'] = $ManufacturerId
        }

        if ($ManufacturerIdN) {
            $LocalVarQueryParameters['manufacturer_id__n'] = $ManufacturerIdN
        }

        if ($Model) {
            $LocalVarQueryParameters['model'] = $Model
        }

        if ($ModelN) {
            $LocalVarQueryParameters['model__n'] = $ModelN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuleBays) {
            $LocalVarQueryParameters['module_bays'] = $ModuleBays
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($OobIpId) {
            $LocalVarQueryParameters['oob_ip_id'] = $OobIpId
        }

        if ($OobIpIdN) {
            $LocalVarQueryParameters['oob_ip_id__n'] = $OobIpIdN
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($ParentDeviceId) {
            $LocalVarQueryParameters['parent_device_id'] = $ParentDeviceId
        }

        if ($ParentDeviceIdN) {
            $LocalVarQueryParameters['parent_device_id__n'] = $ParentDeviceIdN
        }

        if ($PassThroughPorts) {
            $LocalVarQueryParameters['pass_through_ports'] = $PassThroughPorts
        }

        if ($Platform) {
            $LocalVarQueryParameters['platform'] = $Platform
        }

        if ($PlatformN) {
            $LocalVarQueryParameters['platform__n'] = $PlatformN
        }

        if ($PlatformId) {
            $LocalVarQueryParameters['platform_id'] = $PlatformId
        }

        if ($PlatformIdN) {
            $LocalVarQueryParameters['platform_id__n'] = $PlatformIdN
        }

        if ($Position) {
            $LocalVarQueryParameters['position'] = $Position
        }

        if ($PositionEmpty) {
            $LocalVarQueryParameters['position__empty'] = $PositionEmpty
        }

        if ($PositionGt) {
            $LocalVarQueryParameters['position__gt'] = $PositionGt
        }

        if ($PositionGte) {
            $LocalVarQueryParameters['position__gte'] = $PositionGte
        }

        if ($PositionLt) {
            $LocalVarQueryParameters['position__lt'] = $PositionLt
        }

        if ($PositionLte) {
            $LocalVarQueryParameters['position__lte'] = $PositionLte
        }

        if ($PositionN) {
            $LocalVarQueryParameters['position__n'] = $PositionN
        }

        if ($PowerOutlets) {
            $LocalVarQueryParameters['power_outlets'] = $PowerOutlets
        }

        if ($PowerPorts) {
            $LocalVarQueryParameters['power_ports'] = $PowerPorts
        }

        if ($PrimaryIp4Id) {
            $LocalVarQueryParameters['primary_ip4_id'] = $PrimaryIp4Id
        }

        if ($PrimaryIp4IdN) {
            $LocalVarQueryParameters['primary_ip4_id__n'] = $PrimaryIp4IdN
        }

        if ($PrimaryIp6Id) {
            $LocalVarQueryParameters['primary_ip6_id'] = $PrimaryIp6Id
        }

        if ($PrimaryIp6IdN) {
            $LocalVarQueryParameters['primary_ip6_id__n'] = $PrimaryIp6IdN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Serial) {
            $LocalVarQueryParameters['serial'] = $Serial
        }

        if ($SerialEmpty) {
            $LocalVarQueryParameters['serial__empty'] = $SerialEmpty
        }

        if ($SerialIc) {
            $LocalVarQueryParameters['serial__ic'] = $SerialIc
        }

        if ($SerialIe) {
            $LocalVarQueryParameters['serial__ie'] = $SerialIe
        }

        if ($SerialIew) {
            $LocalVarQueryParameters['serial__iew'] = $SerialIew
        }

        if ($SerialIsw) {
            $LocalVarQueryParameters['serial__isw'] = $SerialIsw
        }

        if ($SerialN) {
            $LocalVarQueryParameters['serial__n'] = $SerialN
        }

        if ($SerialNic) {
            $LocalVarQueryParameters['serial__nic'] = $SerialNic
        }

        if ($SerialNie) {
            $LocalVarQueryParameters['serial__nie'] = $SerialNie
        }

        if ($SerialNiew) {
            $LocalVarQueryParameters['serial__niew'] = $SerialNiew
        }

        if ($SerialNisw) {
            $LocalVarQueryParameters['serial__nisw'] = $SerialNisw
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($StatusN) {
            $LocalVarQueryParameters['status__n'] = $StatusN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantGroup) {
            $LocalVarQueryParameters['tenant_group'] = $TenantGroup
        }

        if ($TenantGroupN) {
            $LocalVarQueryParameters['tenant_group__n'] = $TenantGroupN
        }

        if ($TenantGroupId) {
            $LocalVarQueryParameters['tenant_group_id'] = $TenantGroupId
        }

        if ($TenantGroupIdN) {
            $LocalVarQueryParameters['tenant_group_id__n'] = $TenantGroupIdN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VcPosition) {
            $LocalVarQueryParameters['vc_position'] = $VcPosition
        }

        if ($VcPositionEmpty) {
            $LocalVarQueryParameters['vc_position__empty'] = $VcPositionEmpty
        }

        if ($VcPositionGt) {
            $LocalVarQueryParameters['vc_position__gt'] = $VcPositionGt
        }

        if ($VcPositionGte) {
            $LocalVarQueryParameters['vc_position__gte'] = $VcPositionGte
        }

        if ($VcPositionLt) {
            $LocalVarQueryParameters['vc_position__lt'] = $VcPositionLt
        }

        if ($VcPositionLte) {
            $LocalVarQueryParameters['vc_position__lte'] = $VcPositionLte
        }

        if ($VcPositionN) {
            $LocalVarQueryParameters['vc_position__n'] = $VcPositionN
        }

        if ($VcPriority) {
            $LocalVarQueryParameters['vc_priority'] = $VcPriority
        }

        if ($VcPriorityEmpty) {
            $LocalVarQueryParameters['vc_priority__empty'] = $VcPriorityEmpty
        }

        if ($VcPriorityGt) {
            $LocalVarQueryParameters['vc_priority__gt'] = $VcPriorityGt
        }

        if ($VcPriorityGte) {
            $LocalVarQueryParameters['vc_priority__gte'] = $VcPriorityGte
        }

        if ($VcPriorityLt) {
            $LocalVarQueryParameters['vc_priority__lt'] = $VcPriorityLt
        }

        if ($VcPriorityLte) {
            $LocalVarQueryParameters['vc_priority__lte'] = $VcPriorityLte
        }

        if ($VcPriorityN) {
            $LocalVarQueryParameters['vc_priority__n'] = $VcPriorityN
        }

        if ($VirtualChassisId) {
            $LocalVarQueryParameters['virtual_chassis_id'] = $VirtualChassisId
        }

        if ($VirtualChassisIdN) {
            $LocalVarQueryParameters['virtual_chassis_id__n'] = $VirtualChassisIdN
        }

        if ($VirtualChassisMember) {
            $LocalVarQueryParameters['virtual_chassis_member'] = $VirtualChassisMember
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedDeviceWithConfigContextList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device.

.PARAMETER PatchedWritableDeviceWithConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceWithConfigContext
#>
function Invoke-DcimDevicesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableDeviceWithConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDevicesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/devices/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDevicesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableDeviceWithConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceWithConfigContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device.

.PARAMETER WritableDeviceWithConfigContextRequest
No description available.

.PARAMETER Format
No description available.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/plain

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceWithConfigContext
#>
function Invoke-DcimDevicesRenderConfigCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableDeviceWithConfigContextRequest},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("json", "txt")]
        [String]
        ${Format},
        [String]
        [ValidateSet("application/json", "text/plain")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDevicesRenderConfigCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/plain')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/devices/{id}/render-config/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDevicesRenderConfigCreate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Format) {
            $LocalVarQueryParameters['format'] = $Format
        }

        if (!$WritableDeviceWithConfigContextRequest) {
            throw "Error! The required parameter `WritableDeviceWithConfigContextRequest` missing when calling dcimDevicesRenderConfigCreate."
        }

        $LocalVarBodyParameter = $WritableDeviceWithConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceWithConfigContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceWithConfigContext
#>
function Invoke-DcimDevicesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDevicesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/devices/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDevicesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceWithConfigContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this device.

.PARAMETER WritableDeviceWithConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

DeviceWithConfigContext
#>
function Invoke-DcimDevicesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableDeviceWithConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimDevicesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/devices/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimDevicesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableDeviceWithConfigContextRequest) {
            throw "Error! The required parameter `WritableDeviceWithConfigContextRequest` missing when calling dcimDevicesUpdate."
        }

        $LocalVarBodyParameter = $WritableDeviceWithConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "DeviceWithConfigContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FrontPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimFrontPortTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${FrontPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-port-templates/'

        if (!$FrontPortTemplateRequest) {
            throw "Error! The required parameter `FrontPortTemplateRequest` missing when calling dcimFrontPortTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $FrontPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FrontPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPortTemplate[]
#>
function Invoke-DcimFrontPortTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${FrontPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-port-templates/'

        if (!$FrontPortTemplateRequest) {
            throw "Error! The required parameter `FrontPortTemplateRequest` missing when calling dcimFrontPortTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $FrontPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPortTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FrontPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPortTemplate[]
#>
function Invoke-DcimFrontPortTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${FrontPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-port-templates/'

        if (!$FrontPortTemplateRequest) {
            throw "Error! The required parameter `FrontPortTemplateRequest` missing when calling dcimFrontPortTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $FrontPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPortTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableFrontPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPortTemplate
#>
function Invoke-DcimFrontPortTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableFrontPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-port-templates/'

        if (!$WritableFrontPortTemplateRequest) {
            throw "Error! The required parameter `WritableFrontPortTemplateRequest` missing when calling dcimFrontPortTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritableFrontPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this front port template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimFrontPortTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/front-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimFrontPortTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Color
No description available.

.PARAMETER ColorEmpty
No description available.

.PARAMETER ColorIc
No description available.

.PARAMETER ColorIe
No description available.

.PARAMETER ColorIew
No description available.

.PARAMETER ColorIsw
No description available.

.PARAMETER ColorN
No description available.

.PARAMETER ColorNic
No description available.

.PARAMETER ColorNie
No description available.

.PARAMETER ColorNiew
No description available.

.PARAMETER ColorNisw
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DevicetypeId
Device type (ID)

.PARAMETER DevicetypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuletypeId
Module type (ID)

.PARAMETER ModuletypeIdN
Module type (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedFrontPortTemplateList
#>
function Invoke-DcimFrontPortTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Color},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ColorEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIe},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIew},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIsw},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNie},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNiew},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNisw},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeId},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeIdN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeId},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeIdN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/front-port-templates/'

        if ($Color) {
            $LocalVarQueryParameters['color'] = $Color
        }

        if ($ColorEmpty) {
            $LocalVarQueryParameters['color__empty'] = $ColorEmpty
        }

        if ($ColorIc) {
            $LocalVarQueryParameters['color__ic'] = $ColorIc
        }

        if ($ColorIe) {
            $LocalVarQueryParameters['color__ie'] = $ColorIe
        }

        if ($ColorIew) {
            $LocalVarQueryParameters['color__iew'] = $ColorIew
        }

        if ($ColorIsw) {
            $LocalVarQueryParameters['color__isw'] = $ColorIsw
        }

        if ($ColorN) {
            $LocalVarQueryParameters['color__n'] = $ColorN
        }

        if ($ColorNic) {
            $LocalVarQueryParameters['color__nic'] = $ColorNic
        }

        if ($ColorNie) {
            $LocalVarQueryParameters['color__nie'] = $ColorNie
        }

        if ($ColorNiew) {
            $LocalVarQueryParameters['color__niew'] = $ColorNiew
        }

        if ($ColorNisw) {
            $LocalVarQueryParameters['color__nisw'] = $ColorNisw
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DevicetypeId) {
            $LocalVarQueryParameters['devicetype_id'] = $DevicetypeId
        }

        if ($DevicetypeIdN) {
            $LocalVarQueryParameters['devicetype_id__n'] = $DevicetypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuletypeId) {
            $LocalVarQueryParameters['moduletype_id'] = $ModuletypeId
        }

        if ($ModuletypeIdN) {
            $LocalVarQueryParameters['moduletype_id__n'] = $ModuletypeIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedFrontPortTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this front port template.

.PARAMETER PatchedWritableFrontPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPortTemplate
#>
function Invoke-DcimFrontPortTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableFrontPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimFrontPortTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableFrontPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this front port template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPortTemplate
#>
function Invoke-DcimFrontPortTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/front-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimFrontPortTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this front port template.

.PARAMETER WritableFrontPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPortTemplate
#>
function Invoke-DcimFrontPortTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableFrontPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimFrontPortTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableFrontPortTemplateRequest) {
            throw "Error! The required parameter `WritableFrontPortTemplateRequest` missing when calling dcimFrontPortTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritableFrontPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FrontPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimFrontPortsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${FrontPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-ports/'

        if (!$FrontPortRequest) {
            throw "Error! The required parameter `FrontPortRequest` missing when calling dcimFrontPortsBulkDestroy."
        }

        $LocalVarBodyParameter = $FrontPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FrontPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPort[]
#>
function Invoke-DcimFrontPortsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${FrontPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-ports/'

        if (!$FrontPortRequest) {
            throw "Error! The required parameter `FrontPortRequest` missing when calling dcimFrontPortsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $FrontPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPort[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FrontPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPort[]
#>
function Invoke-DcimFrontPortsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${FrontPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-ports/'

        if (!$FrontPortRequest) {
            throw "Error! The required parameter `FrontPortRequest` missing when calling dcimFrontPortsBulkUpdate."
        }

        $LocalVarBodyParameter = $FrontPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPort[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableFrontPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPort
#>
function Invoke-DcimFrontPortsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableFrontPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-ports/'

        if (!$WritableFrontPortRequest) {
            throw "Error! The required parameter `WritableFrontPortRequest` missing when calling dcimFrontPortsCreate."
        }

        $LocalVarBodyParameter = $WritableFrontPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this front port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimFrontPortsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/front-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimFrontPortsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableEnd
No description available.

.PARAMETER CableEndN
No description available.

.PARAMETER Cabled
No description available.

.PARAMETER Color
No description available.

.PARAMETER ColorEmpty
No description available.

.PARAMETER ColorIc
No description available.

.PARAMETER ColorIe
No description available.

.PARAMETER ColorIew
No description available.

.PARAMETER ColorIsw
No description available.

.PARAMETER ColorN
No description available.

.PARAMETER ColorNic
No description available.

.PARAMETER ColorNie
No description available.

.PARAMETER ColorNiew
No description available.

.PARAMETER ColorNisw
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Device
Device (name)

.PARAMETER DeviceN
Device (name)

.PARAMETER DeviceId
Device (ID)

.PARAMETER DeviceIdN
Device (ID)

.PARAMETER DeviceRole
Device role (slug)

.PARAMETER DeviceRoleN
Device role (slug)

.PARAMETER DeviceRoleId
Device role (ID)

.PARAMETER DeviceRoleIdN
Device role (ID)

.PARAMETER DeviceType
Device type (model)

.PARAMETER DeviceTypeN
Device type (model)

.PARAMETER DeviceTypeId
Device type (ID)

.PARAMETER DeviceTypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuleId
Module (ID)

.PARAMETER ModuleIdN
Module (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Occupied
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Rack
Rack (name)

.PARAMETER RackN
Rack (name)

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Role
Device role (slug)

.PARAMETER RoleN
Device role (slug)

.PARAMETER RoleId
Device role (ID)

.PARAMETER RoleIdN
Device role (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VirtualChassis
Virtual Chassis

.PARAMETER VirtualChassisN
Virtual Chassis

.PARAMETER VirtualChassisId
Virtual Chassis (ID)

.PARAMETER VirtualChassisIdN
Virtual Chassis (ID)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedFrontPortList
#>
function Invoke-DcimFrontPortsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEnd},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEndN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Cabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Color},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ColorEmpty},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIc},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIe},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIew},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIsw},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorN},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNic},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNie},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNiew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNisw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Device},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRole},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRoleN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleId},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleIdN},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceType},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceTypeN},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LocationN},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleId},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleIdN},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Occupied},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Rack},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RackN},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 113, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 114, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 115, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 116, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 117, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 118, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassis},
        [Parameter(Position = 119, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassisN},
        [Parameter(Position = 120, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisId},
        [Parameter(Position = 121, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/front-ports/'

        if ($CableEnd) {
            $LocalVarQueryParameters['cable_end'] = $CableEnd
        }

        if ($CableEndN) {
            $LocalVarQueryParameters['cable_end__n'] = $CableEndN
        }

        if ($Cabled) {
            $LocalVarQueryParameters['cabled'] = $Cabled
        }

        if ($Color) {
            $LocalVarQueryParameters['color'] = $Color
        }

        if ($ColorEmpty) {
            $LocalVarQueryParameters['color__empty'] = $ColorEmpty
        }

        if ($ColorIc) {
            $LocalVarQueryParameters['color__ic'] = $ColorIc
        }

        if ($ColorIe) {
            $LocalVarQueryParameters['color__ie'] = $ColorIe
        }

        if ($ColorIew) {
            $LocalVarQueryParameters['color__iew'] = $ColorIew
        }

        if ($ColorIsw) {
            $LocalVarQueryParameters['color__isw'] = $ColorIsw
        }

        if ($ColorN) {
            $LocalVarQueryParameters['color__n'] = $ColorN
        }

        if ($ColorNic) {
            $LocalVarQueryParameters['color__nic'] = $ColorNic
        }

        if ($ColorNie) {
            $LocalVarQueryParameters['color__nie'] = $ColorNie
        }

        if ($ColorNiew) {
            $LocalVarQueryParameters['color__niew'] = $ColorNiew
        }

        if ($ColorNisw) {
            $LocalVarQueryParameters['color__nisw'] = $ColorNisw
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceN) {
            $LocalVarQueryParameters['device__n'] = $DeviceN
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($DeviceRole) {
            $LocalVarQueryParameters['device_role'] = $DeviceRole
        }

        if ($DeviceRoleN) {
            $LocalVarQueryParameters['device_role__n'] = $DeviceRoleN
        }

        if ($DeviceRoleId) {
            $LocalVarQueryParameters['device_role_id'] = $DeviceRoleId
        }

        if ($DeviceRoleIdN) {
            $LocalVarQueryParameters['device_role_id__n'] = $DeviceRoleIdN
        }

        if ($DeviceType) {
            $LocalVarQueryParameters['device_type'] = $DeviceType
        }

        if ($DeviceTypeN) {
            $LocalVarQueryParameters['device_type__n'] = $DeviceTypeN
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuleId) {
            $LocalVarQueryParameters['module_id'] = $ModuleId
        }

        if ($ModuleIdN) {
            $LocalVarQueryParameters['module_id__n'] = $ModuleIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Occupied) {
            $LocalVarQueryParameters['occupied'] = $Occupied
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Rack) {
            $LocalVarQueryParameters['rack'] = $Rack
        }

        if ($RackN) {
            $LocalVarQueryParameters['rack__n'] = $RackN
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VirtualChassis) {
            $LocalVarQueryParameters['virtual_chassis'] = $VirtualChassis
        }

        if ($VirtualChassisN) {
            $LocalVarQueryParameters['virtual_chassis__n'] = $VirtualChassisN
        }

        if ($VirtualChassisId) {
            $LocalVarQueryParameters['virtual_chassis_id'] = $VirtualChassisId
        }

        if ($VirtualChassisIdN) {
            $LocalVarQueryParameters['virtual_chassis_id__n'] = $VirtualChassisIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedFrontPortList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this front port.

.PARAMETER PatchedWritableFrontPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPort
#>
function Invoke-DcimFrontPortsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableFrontPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimFrontPortsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableFrontPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this front port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPort
#>
function Invoke-DcimFrontPortsPathsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortsPathsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/front-ports/{id}/paths/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimFrontPortsPathsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this front port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPort
#>
function Invoke-DcimFrontPortsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/front-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimFrontPortsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this front port.

.PARAMETER WritableFrontPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

FrontPort
#>
function Invoke-DcimFrontPortsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableFrontPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimFrontPortsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/front-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimFrontPortsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableFrontPortRequest) {
            throw "Error! The required parameter `WritableFrontPortRequest` missing when calling dcimFrontPortsUpdate."
        }

        $LocalVarBodyParameter = $WritableFrontPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "FrontPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InterfaceTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimInterfaceTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InterfaceTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfaceTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interface-templates/'

        if (!$InterfaceTemplateRequest) {
            throw "Error! The required parameter `InterfaceTemplateRequest` missing when calling dcimInterfaceTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $InterfaceTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InterfaceTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InterfaceTemplate[]
#>
function Invoke-DcimInterfaceTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InterfaceTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfaceTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interface-templates/'

        if (!$InterfaceTemplateRequest) {
            throw "Error! The required parameter `InterfaceTemplateRequest` missing when calling dcimInterfaceTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $InterfaceTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InterfaceTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InterfaceTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InterfaceTemplate[]
#>
function Invoke-DcimInterfaceTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InterfaceTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfaceTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interface-templates/'

        if (!$InterfaceTemplateRequest) {
            throw "Error! The required parameter `InterfaceTemplateRequest` missing when calling dcimInterfaceTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $InterfaceTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InterfaceTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableInterfaceTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InterfaceTemplate
#>
function Invoke-DcimInterfaceTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableInterfaceTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfaceTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interface-templates/'

        if (!$WritableInterfaceTemplateRequest) {
            throw "Error! The required parameter `WritableInterfaceTemplateRequest` missing when calling dcimInterfaceTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritableInterfaceTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InterfaceTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this interface template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimInterfaceTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfaceTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/interface-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInterfaceTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BridgeId
No description available.

.PARAMETER BridgeIdN
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DevicetypeId
Device type (ID)

.PARAMETER DevicetypeIdN
Device type (ID)

.PARAMETER Enabled
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER MgmtOnly
No description available.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuletypeId
Module type (ID)

.PARAMETER ModuletypeIdN
Module type (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER PoeMode
No description available.

.PARAMETER PoeModeN
No description available.

.PARAMETER PoeType
No description available.

.PARAMETER PoeTypeN
No description available.

.PARAMETER Q
Search

.PARAMETER RfRole
No description available.

.PARAMETER RfRoleN
No description available.

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedInterfaceTemplateList
#>
function Invoke-DcimInterfaceTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${BridgeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${BridgeIdN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeId},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeIdN},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${MgmtOnly},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeId},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeIdN},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PoeMode},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PoeModeN},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PoeType},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PoeTypeN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RfRole},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RfRoleN},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfaceTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/interface-templates/'

        if ($BridgeId) {
            $LocalVarQueryParameters['bridge_id'] = $BridgeId
        }

        if ($BridgeIdN) {
            $LocalVarQueryParameters['bridge_id__n'] = $BridgeIdN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DevicetypeId) {
            $LocalVarQueryParameters['devicetype_id'] = $DevicetypeId
        }

        if ($DevicetypeIdN) {
            $LocalVarQueryParameters['devicetype_id__n'] = $DevicetypeIdN
        }

        if ($Enabled) {
            $LocalVarQueryParameters['enabled'] = $Enabled
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($MgmtOnly) {
            $LocalVarQueryParameters['mgmt_only'] = $MgmtOnly
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuletypeId) {
            $LocalVarQueryParameters['moduletype_id'] = $ModuletypeId
        }

        if ($ModuletypeIdN) {
            $LocalVarQueryParameters['moduletype_id__n'] = $ModuletypeIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($PoeMode) {
            $LocalVarQueryParameters['poe_mode'] = $PoeMode
        }

        if ($PoeModeN) {
            $LocalVarQueryParameters['poe_mode__n'] = $PoeModeN
        }

        if ($PoeType) {
            $LocalVarQueryParameters['poe_type'] = $PoeType
        }

        if ($PoeTypeN) {
            $LocalVarQueryParameters['poe_type__n'] = $PoeTypeN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($RfRole) {
            $LocalVarQueryParameters['rf_role'] = $RfRole
        }

        if ($RfRoleN) {
            $LocalVarQueryParameters['rf_role__n'] = $RfRoleN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedInterfaceTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this interface template.

.PARAMETER PatchedWritableInterfaceTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InterfaceTemplate
#>
function Invoke-DcimInterfaceTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableInterfaceTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfaceTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interface-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInterfaceTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableInterfaceTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InterfaceTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this interface template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InterfaceTemplate
#>
function Invoke-DcimInterfaceTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfaceTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/interface-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInterfaceTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InterfaceTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this interface template.

.PARAMETER WritableInterfaceTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InterfaceTemplate
#>
function Invoke-DcimInterfaceTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableInterfaceTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfaceTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interface-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInterfaceTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableInterfaceTemplateRequest) {
            throw "Error! The required parameter `WritableInterfaceTemplateRequest` missing when calling dcimInterfaceTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritableInterfaceTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InterfaceTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InterfaceRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimInterfacesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InterfaceRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfacesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interfaces/'

        if (!$InterfaceRequest) {
            throw "Error! The required parameter `InterfaceRequest` missing when calling dcimInterfacesBulkDestroy."
        }

        $LocalVarBodyParameter = $InterfaceRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InterfaceRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Interface[]
#>
function Invoke-DcimInterfacesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InterfaceRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfacesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interfaces/'

        if (!$InterfaceRequest) {
            throw "Error! The required parameter `InterfaceRequest` missing when calling dcimInterfacesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $InterfaceRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Interface[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InterfaceRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Interface[]
#>
function Invoke-DcimInterfacesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InterfaceRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfacesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interfaces/'

        if (!$InterfaceRequest) {
            throw "Error! The required parameter `InterfaceRequest` missing when calling dcimInterfacesBulkUpdate."
        }

        $LocalVarBodyParameter = $InterfaceRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Interface[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableInterfaceRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Interface
#>
function Invoke-DcimInterfacesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableInterfaceRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfacesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interfaces/'

        if (!$WritableInterfaceRequest) {
            throw "Error! The required parameter `WritableInterfaceRequest` missing when calling dcimInterfacesCreate."
        }

        $LocalVarBodyParameter = $WritableInterfaceRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Interface" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this interface.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimInterfacesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfacesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/interfaces/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInterfacesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BridgeId
Bridged interface (ID)

.PARAMETER BridgeIdN
Bridged interface (ID)

.PARAMETER CableEnd
No description available.

.PARAMETER CableEndN
No description available.

.PARAMETER Cabled
No description available.

.PARAMETER Connected
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Device
Device (name)

.PARAMETER DeviceN
Device (name)

.PARAMETER DeviceId
Device (ID)

.PARAMETER DeviceIdN
Device (ID)

.PARAMETER DeviceRole
Device role (slug)

.PARAMETER DeviceRoleN
Device role (slug)

.PARAMETER DeviceRoleId
Device role (ID)

.PARAMETER DeviceRoleIdN
Device role (ID)

.PARAMETER DeviceType
Device type (model)

.PARAMETER DeviceTypeN
Device type (model)

.PARAMETER DeviceTypeId
Device type (ID)

.PARAMETER DeviceTypeIdN
Device type (ID)

.PARAMETER Duplex
No description available.

.PARAMETER DuplexN
No description available.

.PARAMETER Enabled
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Kind
Kind of interface

.PARAMETER L2vpn
L2VPN

.PARAMETER L2vpnN
L2VPN

.PARAMETER L2vpnId
L2VPN (ID)

.PARAMETER L2vpnIdN
L2VPN (ID)

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LagId
LAG interface (ID)

.PARAMETER LagIdN
LAG interface (ID)

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER MacAddress
No description available.

.PARAMETER MacAddressIc
No description available.

.PARAMETER MacAddressIe
No description available.

.PARAMETER MacAddressIew
No description available.

.PARAMETER MacAddressIsw
No description available.

.PARAMETER MacAddressN
No description available.

.PARAMETER MacAddressNic
No description available.

.PARAMETER MacAddressNie
No description available.

.PARAMETER MacAddressNiew
No description available.

.PARAMETER MacAddressNisw
No description available.

.PARAMETER MgmtOnly
No description available.

.PARAMETER Mode
IEEE 802.1Q tagging strategy

.PARAMETER ModeN
IEEE 802.1Q tagging strategy

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuleId
Module (ID)

.PARAMETER ModuleIdN
Module (ID)

.PARAMETER Mtu
No description available.

.PARAMETER MtuEmpty
No description available.

.PARAMETER MtuGt
No description available.

.PARAMETER MtuGte
No description available.

.PARAMETER MtuLt
No description available.

.PARAMETER MtuLte
No description available.

.PARAMETER MtuN
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Occupied
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER ParentId
Parent interface (ID)

.PARAMETER ParentIdN
Parent interface (ID)

.PARAMETER PoeMode
No description available.

.PARAMETER PoeModeN
No description available.

.PARAMETER PoeType
No description available.

.PARAMETER PoeTypeN
No description available.

.PARAMETER Q
Search

.PARAMETER Rack
Rack (name)

.PARAMETER RackN
Rack (name)

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER RfChannel
No description available.

.PARAMETER RfChannelN
No description available.

.PARAMETER RfChannelFrequency
No description available.

.PARAMETER RfChannelFrequencyEmpty
No description available.

.PARAMETER RfChannelFrequencyGt
No description available.

.PARAMETER RfChannelFrequencyGte
No description available.

.PARAMETER RfChannelFrequencyLt
No description available.

.PARAMETER RfChannelFrequencyLte
No description available.

.PARAMETER RfChannelFrequencyN
No description available.

.PARAMETER RfChannelWidth
No description available.

.PARAMETER RfChannelWidthEmpty
No description available.

.PARAMETER RfChannelWidthGt
No description available.

.PARAMETER RfChannelWidthGte
No description available.

.PARAMETER RfChannelWidthLt
No description available.

.PARAMETER RfChannelWidthLte
No description available.

.PARAMETER RfChannelWidthN
No description available.

.PARAMETER RfRole
No description available.

.PARAMETER RfRoleN
No description available.

.PARAMETER Role
Device role (slug)

.PARAMETER RoleN
Device role (slug)

.PARAMETER RoleId
Device role (ID)

.PARAMETER RoleIdN
Device role (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Speed
No description available.

.PARAMETER SpeedEmpty
No description available.

.PARAMETER SpeedGt
No description available.

.PARAMETER SpeedGte
No description available.

.PARAMETER SpeedLt
No description available.

.PARAMETER SpeedLte
No description available.

.PARAMETER SpeedN
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER TxPower
No description available.

.PARAMETER TxPowerEmpty
No description available.

.PARAMETER TxPowerGt
No description available.

.PARAMETER TxPowerGte
No description available.

.PARAMETER TxPowerLt
No description available.

.PARAMETER TxPowerLte
No description available.

.PARAMETER TxPowerN
No description available.

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER Vdc
Virtual Device Context

.PARAMETER VdcN
Virtual Device Context

.PARAMETER VdcId
Virtual Device Context

.PARAMETER VdcIdN
Virtual Device Context

.PARAMETER VdcIdentifier
Virtual Device Context (Identifier)

.PARAMETER VdcIdentifierN
Virtual Device Context (Identifier)

.PARAMETER VirtualChassis
Virtual Chassis

.PARAMETER VirtualChassisN
Virtual Chassis

.PARAMETER VirtualChassisId
Virtual Chassis (ID)

.PARAMETER VirtualChassisIdN
Virtual Chassis (ID)

.PARAMETER VirtualChassisMember
No description available.

.PARAMETER VirtualChassisMemberId
No description available.

.PARAMETER Vlan
Assigned VID

.PARAMETER VlanId
Assigned VLAN

.PARAMETER Vrf
VRF (RD)

.PARAMETER VrfN
VRF (RD)

.PARAMETER VrfId
VRF

.PARAMETER VrfIdN
VRF

.PARAMETER Wwn
No description available.

.PARAMETER WwnIc
No description available.

.PARAMETER WwnIe
No description available.

.PARAMETER WwnIew
No description available.

.PARAMETER WwnIsw
No description available.

.PARAMETER WwnN
No description available.

.PARAMETER WwnNic
No description available.

.PARAMETER WwnNie
No description available.

.PARAMETER WwnNiew
No description available.

.PARAMETER WwnNisw
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedInterfaceList
#>
function Invoke-DcimInterfacesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${BridgeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${BridgeIdN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEnd},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEndN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Cabled},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Connected},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Device},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceN},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRole},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRoleN},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleId},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleIdN},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceType},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceTypeN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Duplex},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DuplexN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Kind},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64][]]
        ${L2vpn},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64][]]
        ${L2vpnN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${L2vpnId},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${L2vpnIdN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LagId},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LagIdN},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LocationN},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddress},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressIc},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressIe},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressIew},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressIsw},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressN},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressNic},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressNie},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressNiew},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MacAddressNisw},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${MgmtOnly},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Mode},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModeN},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleId},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleIdN},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Mtu},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${MtuEmpty},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MtuGt},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MtuGte},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MtuLt},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MtuLte},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MtuN},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Occupied},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 113, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 114, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentId},
        [Parameter(Position = 115, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentIdN},
        [Parameter(Position = 116, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PoeMode},
        [Parameter(Position = 117, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PoeModeN},
        [Parameter(Position = 118, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PoeType},
        [Parameter(Position = 119, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PoeTypeN},
        [Parameter(Position = 120, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 121, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Rack},
        [Parameter(Position = 122, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RackN},
        [Parameter(Position = 123, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 124, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 125, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 126, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 127, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 128, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 129, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RfChannel},
        [Parameter(Position = 130, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RfChannelN},
        [Parameter(Position = 131, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelFrequency},
        [Parameter(Position = 132, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${RfChannelFrequencyEmpty},
        [Parameter(Position = 133, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelFrequencyGt},
        [Parameter(Position = 134, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelFrequencyGte},
        [Parameter(Position = 135, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelFrequencyLt},
        [Parameter(Position = 136, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelFrequencyLte},
        [Parameter(Position = 137, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelFrequencyN},
        [Parameter(Position = 138, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelWidth},
        [Parameter(Position = 139, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${RfChannelWidthEmpty},
        [Parameter(Position = 140, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelWidthGt},
        [Parameter(Position = 141, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelWidthGte},
        [Parameter(Position = 142, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelWidthLt},
        [Parameter(Position = 143, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelWidthLte},
        [Parameter(Position = 144, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${RfChannelWidthN},
        [Parameter(Position = 145, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RfRole},
        [Parameter(Position = 146, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RfRoleN},
        [Parameter(Position = 147, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 148, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 149, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 150, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 151, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 152, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 153, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 154, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 155, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 156, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 157, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 158, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 159, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Speed},
        [Parameter(Position = 160, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SpeedEmpty},
        [Parameter(Position = 161, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SpeedGt},
        [Parameter(Position = 162, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SpeedGte},
        [Parameter(Position = 163, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SpeedLt},
        [Parameter(Position = 164, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SpeedLte},
        [Parameter(Position = 165, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SpeedN},
        [Parameter(Position = 166, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 167, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 168, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TxPower},
        [Parameter(Position = 169, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${TxPowerEmpty},
        [Parameter(Position = 170, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TxPowerGt},
        [Parameter(Position = 171, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TxPowerGte},
        [Parameter(Position = 172, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TxPowerLt},
        [Parameter(Position = 173, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TxPowerLte},
        [Parameter(Position = 174, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TxPowerN},
        [Parameter(Position = 175, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 176, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 177, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 178, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Vdc},
        [Parameter(Position = 179, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VdcN},
        [Parameter(Position = 180, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VdcId},
        [Parameter(Position = 181, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VdcIdN},
        [Parameter(Position = 182, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VdcIdentifier},
        [Parameter(Position = 183, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VdcIdentifierN},
        [Parameter(Position = 184, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassis},
        [Parameter(Position = 185, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassisN},
        [Parameter(Position = 186, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisId},
        [Parameter(Position = 187, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisIdN},
        [Parameter(Position = 188, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassisMember},
        [Parameter(Position = 189, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisMemberId},
        [Parameter(Position = 190, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Vlan},
        [Parameter(Position = 191, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${VlanId},
        [Parameter(Position = 192, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Vrf},
        [Parameter(Position = 193, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VrfN},
        [Parameter(Position = 194, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VrfId},
        [Parameter(Position = 195, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VrfIdN},
        [Parameter(Position = 196, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Wwn},
        [Parameter(Position = 197, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${WwnIc},
        [Parameter(Position = 198, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${WwnIe},
        [Parameter(Position = 199, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${WwnIew},
        [Parameter(Position = 200, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${WwnIsw},
        [Parameter(Position = 201, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${WwnN},
        [Parameter(Position = 202, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${WwnNic},
        [Parameter(Position = 203, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${WwnNie},
        [Parameter(Position = 204, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${WwnNiew},
        [Parameter(Position = 205, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${WwnNisw},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfacesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/interfaces/'

        if ($BridgeId) {
            $LocalVarQueryParameters['bridge_id'] = $BridgeId
        }

        if ($BridgeIdN) {
            $LocalVarQueryParameters['bridge_id__n'] = $BridgeIdN
        }

        if ($CableEnd) {
            $LocalVarQueryParameters['cable_end'] = $CableEnd
        }

        if ($CableEndN) {
            $LocalVarQueryParameters['cable_end__n'] = $CableEndN
        }

        if ($Cabled) {
            $LocalVarQueryParameters['cabled'] = $Cabled
        }

        if ($Connected) {
            $LocalVarQueryParameters['connected'] = $Connected
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceN) {
            $LocalVarQueryParameters['device__n'] = $DeviceN
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($DeviceRole) {
            $LocalVarQueryParameters['device_role'] = $DeviceRole
        }

        if ($DeviceRoleN) {
            $LocalVarQueryParameters['device_role__n'] = $DeviceRoleN
        }

        if ($DeviceRoleId) {
            $LocalVarQueryParameters['device_role_id'] = $DeviceRoleId
        }

        if ($DeviceRoleIdN) {
            $LocalVarQueryParameters['device_role_id__n'] = $DeviceRoleIdN
        }

        if ($DeviceType) {
            $LocalVarQueryParameters['device_type'] = $DeviceType
        }

        if ($DeviceTypeN) {
            $LocalVarQueryParameters['device_type__n'] = $DeviceTypeN
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($Duplex) {
            $LocalVarQueryParameters['duplex'] = $Duplex
        }

        if ($DuplexN) {
            $LocalVarQueryParameters['duplex__n'] = $DuplexN
        }

        if ($Enabled) {
            $LocalVarQueryParameters['enabled'] = $Enabled
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Kind) {
            $LocalVarQueryParameters['kind'] = $Kind
        }

        if ($L2vpn) {
            $LocalVarQueryParameters['l2vpn'] = $L2vpn
        }

        if ($L2vpnN) {
            $LocalVarQueryParameters['l2vpn__n'] = $L2vpnN
        }

        if ($L2vpnId) {
            $LocalVarQueryParameters['l2vpn_id'] = $L2vpnId
        }

        if ($L2vpnIdN) {
            $LocalVarQueryParameters['l2vpn_id__n'] = $L2vpnIdN
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LagId) {
            $LocalVarQueryParameters['lag_id'] = $LagId
        }

        if ($LagIdN) {
            $LocalVarQueryParameters['lag_id__n'] = $LagIdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($MacAddress) {
            $LocalVarQueryParameters['mac_address'] = $MacAddress
        }

        if ($MacAddressIc) {
            $LocalVarQueryParameters['mac_address__ic'] = $MacAddressIc
        }

        if ($MacAddressIe) {
            $LocalVarQueryParameters['mac_address__ie'] = $MacAddressIe
        }

        if ($MacAddressIew) {
            $LocalVarQueryParameters['mac_address__iew'] = $MacAddressIew
        }

        if ($MacAddressIsw) {
            $LocalVarQueryParameters['mac_address__isw'] = $MacAddressIsw
        }

        if ($MacAddressN) {
            $LocalVarQueryParameters['mac_address__n'] = $MacAddressN
        }

        if ($MacAddressNic) {
            $LocalVarQueryParameters['mac_address__nic'] = $MacAddressNic
        }

        if ($MacAddressNie) {
            $LocalVarQueryParameters['mac_address__nie'] = $MacAddressNie
        }

        if ($MacAddressNiew) {
            $LocalVarQueryParameters['mac_address__niew'] = $MacAddressNiew
        }

        if ($MacAddressNisw) {
            $LocalVarQueryParameters['mac_address__nisw'] = $MacAddressNisw
        }

        if ($MgmtOnly) {
            $LocalVarQueryParameters['mgmt_only'] = $MgmtOnly
        }

        if ($Mode) {
            $LocalVarQueryParameters['mode'] = $Mode
        }

        if ($ModeN) {
            $LocalVarQueryParameters['mode__n'] = $ModeN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuleId) {
            $LocalVarQueryParameters['module_id'] = $ModuleId
        }

        if ($ModuleIdN) {
            $LocalVarQueryParameters['module_id__n'] = $ModuleIdN
        }

        if ($Mtu) {
            $LocalVarQueryParameters['mtu'] = $Mtu
        }

        if ($MtuEmpty) {
            $LocalVarQueryParameters['mtu__empty'] = $MtuEmpty
        }

        if ($MtuGt) {
            $LocalVarQueryParameters['mtu__gt'] = $MtuGt
        }

        if ($MtuGte) {
            $LocalVarQueryParameters['mtu__gte'] = $MtuGte
        }

        if ($MtuLt) {
            $LocalVarQueryParameters['mtu__lt'] = $MtuLt
        }

        if ($MtuLte) {
            $LocalVarQueryParameters['mtu__lte'] = $MtuLte
        }

        if ($MtuN) {
            $LocalVarQueryParameters['mtu__n'] = $MtuN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Occupied) {
            $LocalVarQueryParameters['occupied'] = $Occupied
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($ParentId) {
            $LocalVarQueryParameters['parent_id'] = $ParentId
        }

        if ($ParentIdN) {
            $LocalVarQueryParameters['parent_id__n'] = $ParentIdN
        }

        if ($PoeMode) {
            $LocalVarQueryParameters['poe_mode'] = $PoeMode
        }

        if ($PoeModeN) {
            $LocalVarQueryParameters['poe_mode__n'] = $PoeModeN
        }

        if ($PoeType) {
            $LocalVarQueryParameters['poe_type'] = $PoeType
        }

        if ($PoeTypeN) {
            $LocalVarQueryParameters['poe_type__n'] = $PoeTypeN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Rack) {
            $LocalVarQueryParameters['rack'] = $Rack
        }

        if ($RackN) {
            $LocalVarQueryParameters['rack__n'] = $RackN
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($RfChannel) {
            $LocalVarQueryParameters['rf_channel'] = $RfChannel
        }

        if ($RfChannelN) {
            $LocalVarQueryParameters['rf_channel__n'] = $RfChannelN
        }

        if ($RfChannelFrequency) {
            $LocalVarQueryParameters['rf_channel_frequency'] = $RfChannelFrequency
        }

        if ($RfChannelFrequencyEmpty) {
            $LocalVarQueryParameters['rf_channel_frequency__empty'] = $RfChannelFrequencyEmpty
        }

        if ($RfChannelFrequencyGt) {
            $LocalVarQueryParameters['rf_channel_frequency__gt'] = $RfChannelFrequencyGt
        }

        if ($RfChannelFrequencyGte) {
            $LocalVarQueryParameters['rf_channel_frequency__gte'] = $RfChannelFrequencyGte
        }

        if ($RfChannelFrequencyLt) {
            $LocalVarQueryParameters['rf_channel_frequency__lt'] = $RfChannelFrequencyLt
        }

        if ($RfChannelFrequencyLte) {
            $LocalVarQueryParameters['rf_channel_frequency__lte'] = $RfChannelFrequencyLte
        }

        if ($RfChannelFrequencyN) {
            $LocalVarQueryParameters['rf_channel_frequency__n'] = $RfChannelFrequencyN
        }

        if ($RfChannelWidth) {
            $LocalVarQueryParameters['rf_channel_width'] = $RfChannelWidth
        }

        if ($RfChannelWidthEmpty) {
            $LocalVarQueryParameters['rf_channel_width__empty'] = $RfChannelWidthEmpty
        }

        if ($RfChannelWidthGt) {
            $LocalVarQueryParameters['rf_channel_width__gt'] = $RfChannelWidthGt
        }

        if ($RfChannelWidthGte) {
            $LocalVarQueryParameters['rf_channel_width__gte'] = $RfChannelWidthGte
        }

        if ($RfChannelWidthLt) {
            $LocalVarQueryParameters['rf_channel_width__lt'] = $RfChannelWidthLt
        }

        if ($RfChannelWidthLte) {
            $LocalVarQueryParameters['rf_channel_width__lte'] = $RfChannelWidthLte
        }

        if ($RfChannelWidthN) {
            $LocalVarQueryParameters['rf_channel_width__n'] = $RfChannelWidthN
        }

        if ($RfRole) {
            $LocalVarQueryParameters['rf_role'] = $RfRole
        }

        if ($RfRoleN) {
            $LocalVarQueryParameters['rf_role__n'] = $RfRoleN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Speed) {
            $LocalVarQueryParameters['speed'] = $Speed
        }

        if ($SpeedEmpty) {
            $LocalVarQueryParameters['speed__empty'] = $SpeedEmpty
        }

        if ($SpeedGt) {
            $LocalVarQueryParameters['speed__gt'] = $SpeedGt
        }

        if ($SpeedGte) {
            $LocalVarQueryParameters['speed__gte'] = $SpeedGte
        }

        if ($SpeedLt) {
            $LocalVarQueryParameters['speed__lt'] = $SpeedLt
        }

        if ($SpeedLte) {
            $LocalVarQueryParameters['speed__lte'] = $SpeedLte
        }

        if ($SpeedN) {
            $LocalVarQueryParameters['speed__n'] = $SpeedN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($TxPower) {
            $LocalVarQueryParameters['tx_power'] = $TxPower
        }

        if ($TxPowerEmpty) {
            $LocalVarQueryParameters['tx_power__empty'] = $TxPowerEmpty
        }

        if ($TxPowerGt) {
            $LocalVarQueryParameters['tx_power__gt'] = $TxPowerGt
        }

        if ($TxPowerGte) {
            $LocalVarQueryParameters['tx_power__gte'] = $TxPowerGte
        }

        if ($TxPowerLt) {
            $LocalVarQueryParameters['tx_power__lt'] = $TxPowerLt
        }

        if ($TxPowerLte) {
            $LocalVarQueryParameters['tx_power__lte'] = $TxPowerLte
        }

        if ($TxPowerN) {
            $LocalVarQueryParameters['tx_power__n'] = $TxPowerN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Vdc) {
            $LocalVarQueryParameters['vdc'] = $Vdc
        }

        if ($VdcN) {
            $LocalVarQueryParameters['vdc__n'] = $VdcN
        }

        if ($VdcId) {
            $LocalVarQueryParameters['vdc_id'] = $VdcId
        }

        if ($VdcIdN) {
            $LocalVarQueryParameters['vdc_id__n'] = $VdcIdN
        }

        if ($VdcIdentifier) {
            $LocalVarQueryParameters['vdc_identifier'] = $VdcIdentifier
        }

        if ($VdcIdentifierN) {
            $LocalVarQueryParameters['vdc_identifier__n'] = $VdcIdentifierN
        }

        if ($VirtualChassis) {
            $LocalVarQueryParameters['virtual_chassis'] = $VirtualChassis
        }

        if ($VirtualChassisN) {
            $LocalVarQueryParameters['virtual_chassis__n'] = $VirtualChassisN
        }

        if ($VirtualChassisId) {
            $LocalVarQueryParameters['virtual_chassis_id'] = $VirtualChassisId
        }

        if ($VirtualChassisIdN) {
            $LocalVarQueryParameters['virtual_chassis_id__n'] = $VirtualChassisIdN
        }

        if ($VirtualChassisMember) {
            $LocalVarQueryParameters['virtual_chassis_member'] = $VirtualChassisMember
        }

        if ($VirtualChassisMemberId) {
            $LocalVarQueryParameters['virtual_chassis_member_id'] = $VirtualChassisMemberId
        }

        if ($Vlan) {
            $LocalVarQueryParameters['vlan'] = $Vlan
        }

        if ($VlanId) {
            $LocalVarQueryParameters['vlan_id'] = $VlanId
        }

        if ($Vrf) {
            $LocalVarQueryParameters['vrf'] = $Vrf
        }

        if ($VrfN) {
            $LocalVarQueryParameters['vrf__n'] = $VrfN
        }

        if ($VrfId) {
            $LocalVarQueryParameters['vrf_id'] = $VrfId
        }

        if ($VrfIdN) {
            $LocalVarQueryParameters['vrf_id__n'] = $VrfIdN
        }

        if ($Wwn) {
            $LocalVarQueryParameters['wwn'] = $Wwn
        }

        if ($WwnIc) {
            $LocalVarQueryParameters['wwn__ic'] = $WwnIc
        }

        if ($WwnIe) {
            $LocalVarQueryParameters['wwn__ie'] = $WwnIe
        }

        if ($WwnIew) {
            $LocalVarQueryParameters['wwn__iew'] = $WwnIew
        }

        if ($WwnIsw) {
            $LocalVarQueryParameters['wwn__isw'] = $WwnIsw
        }

        if ($WwnN) {
            $LocalVarQueryParameters['wwn__n'] = $WwnN
        }

        if ($WwnNic) {
            $LocalVarQueryParameters['wwn__nic'] = $WwnNic
        }

        if ($WwnNie) {
            $LocalVarQueryParameters['wwn__nie'] = $WwnNie
        }

        if ($WwnNiew) {
            $LocalVarQueryParameters['wwn__niew'] = $WwnNiew
        }

        if ($WwnNisw) {
            $LocalVarQueryParameters['wwn__nisw'] = $WwnNisw
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedInterfaceList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this interface.

.PARAMETER PatchedWritableInterfaceRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Interface
#>
function Invoke-DcimInterfacesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableInterfaceRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfacesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interfaces/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInterfacesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableInterfaceRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Interface" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this interface.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Interface
#>
function Invoke-DcimInterfacesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfacesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/interfaces/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInterfacesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Interface" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this interface.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Interface
#>
function Invoke-DcimInterfacesTraceRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfacesTraceRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/interfaces/{id}/trace/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInterfacesTraceRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Interface" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this interface.

.PARAMETER WritableInterfaceRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Interface
#>
function Invoke-DcimInterfacesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableInterfaceRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInterfacesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/interfaces/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInterfacesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableInterfaceRequest) {
            throw "Error! The required parameter `WritableInterfaceRequest` missing when calling dcimInterfacesUpdate."
        }

        $LocalVarBodyParameter = $WritableInterfaceRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Interface" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InventoryItemRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimInventoryItemRolesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InventoryItemRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemRolesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-roles/'

        if (!$InventoryItemRoleRequest) {
            throw "Error! The required parameter `InventoryItemRoleRequest` missing when calling dcimInventoryItemRolesBulkDestroy."
        }

        $LocalVarBodyParameter = $InventoryItemRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InventoryItemRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemRole[]
#>
function Invoke-DcimInventoryItemRolesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InventoryItemRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemRolesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-roles/'

        if (!$InventoryItemRoleRequest) {
            throw "Error! The required parameter `InventoryItemRoleRequest` missing when calling dcimInventoryItemRolesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $InventoryItemRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemRole[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InventoryItemRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemRole[]
#>
function Invoke-DcimInventoryItemRolesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InventoryItemRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemRolesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-roles/'

        if (!$InventoryItemRoleRequest) {
            throw "Error! The required parameter `InventoryItemRoleRequest` missing when calling dcimInventoryItemRolesBulkUpdate."
        }

        $LocalVarBodyParameter = $InventoryItemRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemRole[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InventoryItemRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemRole
#>
function Invoke-DcimInventoryItemRolesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${InventoryItemRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemRolesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-roles/'

        if (!$InventoryItemRoleRequest) {
            throw "Error! The required parameter `InventoryItemRoleRequest` missing when calling dcimInventoryItemRolesCreate."
        }

        $LocalVarBodyParameter = $InventoryItemRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item role.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimInventoryItemRolesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemRolesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/inventory-item-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemRolesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Color
No description available.

.PARAMETER ColorEmpty
No description available.

.PARAMETER ColorIc
No description available.

.PARAMETER ColorIe
No description available.

.PARAMETER ColorIew
No description available.

.PARAMETER ColorIsw
No description available.

.PARAMETER ColorN
No description available.

.PARAMETER ColorNic
No description available.

.PARAMETER ColorNie
No description available.

.PARAMETER ColorNiew
No description available.

.PARAMETER ColorNisw
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedInventoryItemRoleList
#>
function Invoke-DcimInventoryItemRolesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Color},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ColorEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIe},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIew},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIsw},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNie},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNiew},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNisw},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemRolesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/inventory-item-roles/'

        if ($Color) {
            $LocalVarQueryParameters['color'] = $Color
        }

        if ($ColorEmpty) {
            $LocalVarQueryParameters['color__empty'] = $ColorEmpty
        }

        if ($ColorIc) {
            $LocalVarQueryParameters['color__ic'] = $ColorIc
        }

        if ($ColorIe) {
            $LocalVarQueryParameters['color__ie'] = $ColorIe
        }

        if ($ColorIew) {
            $LocalVarQueryParameters['color__iew'] = $ColorIew
        }

        if ($ColorIsw) {
            $LocalVarQueryParameters['color__isw'] = $ColorIsw
        }

        if ($ColorN) {
            $LocalVarQueryParameters['color__n'] = $ColorN
        }

        if ($ColorNic) {
            $LocalVarQueryParameters['color__nic'] = $ColorNic
        }

        if ($ColorNie) {
            $LocalVarQueryParameters['color__nie'] = $ColorNie
        }

        if ($ColorNiew) {
            $LocalVarQueryParameters['color__niew'] = $ColorNiew
        }

        if ($ColorNisw) {
            $LocalVarQueryParameters['color__nisw'] = $ColorNisw
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedInventoryItemRoleList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item role.

.PARAMETER PatchedInventoryItemRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemRole
#>
function Invoke-DcimInventoryItemRolesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedInventoryItemRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemRolesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemRolesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedInventoryItemRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item role.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemRole
#>
function Invoke-DcimInventoryItemRolesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemRolesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/inventory-item-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemRolesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item role.

.PARAMETER InventoryItemRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemRole
#>
function Invoke-DcimInventoryItemRolesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${InventoryItemRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemRolesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemRolesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$InventoryItemRoleRequest) {
            throw "Error! The required parameter `InventoryItemRoleRequest` missing when calling dcimInventoryItemRolesUpdate."
        }

        $LocalVarBodyParameter = $InventoryItemRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InventoryItemTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimInventoryItemTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InventoryItemTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-templates/'

        if (!$InventoryItemTemplateRequest) {
            throw "Error! The required parameter `InventoryItemTemplateRequest` missing when calling dcimInventoryItemTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $InventoryItemTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InventoryItemTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemTemplate[]
#>
function Invoke-DcimInventoryItemTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InventoryItemTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-templates/'

        if (!$InventoryItemTemplateRequest) {
            throw "Error! The required parameter `InventoryItemTemplateRequest` missing when calling dcimInventoryItemTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $InventoryItemTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InventoryItemTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemTemplate[]
#>
function Invoke-DcimInventoryItemTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InventoryItemTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-templates/'

        if (!$InventoryItemTemplateRequest) {
            throw "Error! The required parameter `InventoryItemTemplateRequest` missing when calling dcimInventoryItemTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $InventoryItemTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableInventoryItemTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemTemplate
#>
function Invoke-DcimInventoryItemTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableInventoryItemTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-templates/'

        if (!$WritableInventoryItemTemplateRequest) {
            throw "Error! The required parameter `WritableInventoryItemTemplateRequest` missing when calling dcimInventoryItemTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritableInventoryItemTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimInventoryItemTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/inventory-item-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ComponentId
No description available.

.PARAMETER ComponentIdEmpty
No description available.

.PARAMETER ComponentIdGt
No description available.

.PARAMETER ComponentIdGte
No description available.

.PARAMETER ComponentIdLt
No description available.

.PARAMETER ComponentIdLte
No description available.

.PARAMETER ComponentIdN
No description available.

.PARAMETER ComponentType
No description available.

.PARAMETER ComponentTypeN
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DevicetypeId
Device type (ID)

.PARAMETER DevicetypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Manufacturer
Manufacturer (slug)

.PARAMETER ManufacturerN
Manufacturer (slug)

.PARAMETER ManufacturerId
Manufacturer (ID)

.PARAMETER ManufacturerIdN
Manufacturer (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER ParentId
Parent inventory item (ID)

.PARAMETER ParentIdN
Parent inventory item (ID)

.PARAMETER PartId
No description available.

.PARAMETER PartIdEmpty
No description available.

.PARAMETER PartIdIc
No description available.

.PARAMETER PartIdIe
No description available.

.PARAMETER PartIdIew
No description available.

.PARAMETER PartIdIsw
No description available.

.PARAMETER PartIdN
No description available.

.PARAMETER PartIdNic
No description available.

.PARAMETER PartIdNie
No description available.

.PARAMETER PartIdNiew
No description available.

.PARAMETER PartIdNisw
No description available.

.PARAMETER Q
Search

.PARAMETER Role
Role (slug)

.PARAMETER RoleN
Role (slug)

.PARAMETER RoleId
Role (ID)

.PARAMETER RoleIdN
Role (ID)

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedInventoryItemTemplateList
#>
function Invoke-DcimInventoryItemTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ComponentType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ComponentTypeN},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeId},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeIdN},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Manufacturer},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ManufacturerN},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerId},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerIdN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentId},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentIdN},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartId},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PartIdEmpty},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdIc},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdIe},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdIew},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdIsw},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdN},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdNic},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdNie},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdNiew},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdNisw},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/inventory-item-templates/'

        if ($ComponentId) {
            $LocalVarQueryParameters['component_id'] = $ComponentId
        }

        if ($ComponentIdEmpty) {
            $LocalVarQueryParameters['component_id__empty'] = $ComponentIdEmpty
        }

        if ($ComponentIdGt) {
            $LocalVarQueryParameters['component_id__gt'] = $ComponentIdGt
        }

        if ($ComponentIdGte) {
            $LocalVarQueryParameters['component_id__gte'] = $ComponentIdGte
        }

        if ($ComponentIdLt) {
            $LocalVarQueryParameters['component_id__lt'] = $ComponentIdLt
        }

        if ($ComponentIdLte) {
            $LocalVarQueryParameters['component_id__lte'] = $ComponentIdLte
        }

        if ($ComponentIdN) {
            $LocalVarQueryParameters['component_id__n'] = $ComponentIdN
        }

        if ($ComponentType) {
            $LocalVarQueryParameters['component_type'] = $ComponentType
        }

        if ($ComponentTypeN) {
            $LocalVarQueryParameters['component_type__n'] = $ComponentTypeN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DevicetypeId) {
            $LocalVarQueryParameters['devicetype_id'] = $DevicetypeId
        }

        if ($DevicetypeIdN) {
            $LocalVarQueryParameters['devicetype_id__n'] = $DevicetypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Manufacturer) {
            $LocalVarQueryParameters['manufacturer'] = $Manufacturer
        }

        if ($ManufacturerN) {
            $LocalVarQueryParameters['manufacturer__n'] = $ManufacturerN
        }

        if ($ManufacturerId) {
            $LocalVarQueryParameters['manufacturer_id'] = $ManufacturerId
        }

        if ($ManufacturerIdN) {
            $LocalVarQueryParameters['manufacturer_id__n'] = $ManufacturerIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($ParentId) {
            $LocalVarQueryParameters['parent_id'] = $ParentId
        }

        if ($ParentIdN) {
            $LocalVarQueryParameters['parent_id__n'] = $ParentIdN
        }

        if ($PartId) {
            $LocalVarQueryParameters['part_id'] = $PartId
        }

        if ($PartIdEmpty) {
            $LocalVarQueryParameters['part_id__empty'] = $PartIdEmpty
        }

        if ($PartIdIc) {
            $LocalVarQueryParameters['part_id__ic'] = $PartIdIc
        }

        if ($PartIdIe) {
            $LocalVarQueryParameters['part_id__ie'] = $PartIdIe
        }

        if ($PartIdIew) {
            $LocalVarQueryParameters['part_id__iew'] = $PartIdIew
        }

        if ($PartIdIsw) {
            $LocalVarQueryParameters['part_id__isw'] = $PartIdIsw
        }

        if ($PartIdN) {
            $LocalVarQueryParameters['part_id__n'] = $PartIdN
        }

        if ($PartIdNic) {
            $LocalVarQueryParameters['part_id__nic'] = $PartIdNic
        }

        if ($PartIdNie) {
            $LocalVarQueryParameters['part_id__nie'] = $PartIdNie
        }

        if ($PartIdNiew) {
            $LocalVarQueryParameters['part_id__niew'] = $PartIdNiew
        }

        if ($PartIdNisw) {
            $LocalVarQueryParameters['part_id__nisw'] = $PartIdNisw
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedInventoryItemTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item template.

.PARAMETER PatchedWritableInventoryItemTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemTemplate
#>
function Invoke-DcimInventoryItemTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableInventoryItemTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableInventoryItemTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemTemplate
#>
function Invoke-DcimInventoryItemTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/inventory-item-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item template.

.PARAMETER WritableInventoryItemTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItemTemplate
#>
function Invoke-DcimInventoryItemTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableInventoryItemTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-item-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableInventoryItemTemplateRequest) {
            throw "Error! The required parameter `WritableInventoryItemTemplateRequest` missing when calling dcimInventoryItemTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritableInventoryItemTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItemTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InventoryItemRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimInventoryItemsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InventoryItemRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-items/'

        if (!$InventoryItemRequest) {
            throw "Error! The required parameter `InventoryItemRequest` missing when calling dcimInventoryItemsBulkDestroy."
        }

        $LocalVarBodyParameter = $InventoryItemRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InventoryItemRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItem[]
#>
function Invoke-DcimInventoryItemsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InventoryItemRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-items/'

        if (!$InventoryItemRequest) {
            throw "Error! The required parameter `InventoryItemRequest` missing when calling dcimInventoryItemsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $InventoryItemRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItem[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER InventoryItemRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItem[]
#>
function Invoke-DcimInventoryItemsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${InventoryItemRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-items/'

        if (!$InventoryItemRequest) {
            throw "Error! The required parameter `InventoryItemRequest` missing when calling dcimInventoryItemsBulkUpdate."
        }

        $LocalVarBodyParameter = $InventoryItemRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItem[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableInventoryItemRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItem
#>
function Invoke-DcimInventoryItemsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableInventoryItemRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-items/'

        if (!$WritableInventoryItemRequest) {
            throw "Error! The required parameter `WritableInventoryItemRequest` missing when calling dcimInventoryItemsCreate."
        }

        $LocalVarBodyParameter = $WritableInventoryItemRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItem" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimInventoryItemsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/inventory-items/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssetTag
No description available.

.PARAMETER AssetTagEmpty
No description available.

.PARAMETER AssetTagIc
No description available.

.PARAMETER AssetTagIe
No description available.

.PARAMETER AssetTagIew
No description available.

.PARAMETER AssetTagIsw
No description available.

.PARAMETER AssetTagN
No description available.

.PARAMETER AssetTagNic
No description available.

.PARAMETER AssetTagNie
No description available.

.PARAMETER AssetTagNiew
No description available.

.PARAMETER AssetTagNisw
No description available.

.PARAMETER ComponentId
No description available.

.PARAMETER ComponentIdEmpty
No description available.

.PARAMETER ComponentIdGt
No description available.

.PARAMETER ComponentIdGte
No description available.

.PARAMETER ComponentIdLt
No description available.

.PARAMETER ComponentIdLte
No description available.

.PARAMETER ComponentIdN
No description available.

.PARAMETER ComponentType
No description available.

.PARAMETER ComponentTypeN
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Device
Device (name)

.PARAMETER DeviceN
Device (name)

.PARAMETER DeviceId
Device (ID)

.PARAMETER DeviceIdN
Device (ID)

.PARAMETER DeviceRole
Device role (slug)

.PARAMETER DeviceRoleN
Device role (slug)

.PARAMETER DeviceRoleId
Device role (ID)

.PARAMETER DeviceRoleIdN
Device role (ID)

.PARAMETER DeviceType
Device type (model)

.PARAMETER DeviceTypeN
Device type (model)

.PARAMETER DeviceTypeId
Device type (ID)

.PARAMETER DeviceTypeIdN
Device type (ID)

.PARAMETER Discovered
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER Manufacturer
Manufacturer (slug)

.PARAMETER ManufacturerN
Manufacturer (slug)

.PARAMETER ManufacturerId
Manufacturer (ID)

.PARAMETER ManufacturerIdN
Manufacturer (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER ParentId
Parent inventory item (ID)

.PARAMETER ParentIdN
Parent inventory item (ID)

.PARAMETER PartId
No description available.

.PARAMETER PartIdEmpty
No description available.

.PARAMETER PartIdIc
No description available.

.PARAMETER PartIdIe
No description available.

.PARAMETER PartIdIew
No description available.

.PARAMETER PartIdIsw
No description available.

.PARAMETER PartIdN
No description available.

.PARAMETER PartIdNic
No description available.

.PARAMETER PartIdNie
No description available.

.PARAMETER PartIdNiew
No description available.

.PARAMETER PartIdNisw
No description available.

.PARAMETER Q
Search

.PARAMETER Rack
Rack (name)

.PARAMETER RackN
Rack (name)

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Role
Role (slug)

.PARAMETER RoleN
Role (slug)

.PARAMETER RoleId
Role (ID)

.PARAMETER RoleIdN
Role (ID)

.PARAMETER Serial
No description available.

.PARAMETER SerialEmpty
No description available.

.PARAMETER SerialIc
No description available.

.PARAMETER SerialIe
No description available.

.PARAMETER SerialIew
No description available.

.PARAMETER SerialIsw
No description available.

.PARAMETER SerialN
No description available.

.PARAMETER SerialNic
No description available.

.PARAMETER SerialNie
No description available.

.PARAMETER SerialNiew
No description available.

.PARAMETER SerialNisw
No description available.

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VirtualChassis
Virtual Chassis

.PARAMETER VirtualChassisN
Virtual Chassis

.PARAMETER VirtualChassisId
Virtual Chassis (ID)

.PARAMETER VirtualChassisIdN
Virtual Chassis (ID)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedInventoryItemList
#>
function Invoke-DcimInventoryItemsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTag},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AssetTagEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIe},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIew},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIsw},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNie},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNiew},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNisw},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdGt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdGte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdLt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdLte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ComponentIdN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ComponentType},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ComponentTypeN},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Device},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceN},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRole},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRoleN},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleId},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleIdN},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceType},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceTypeN},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Discovered},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LocationN},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Manufacturer},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ManufacturerN},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerId},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerIdN},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentId},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentIdN},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartId},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PartIdEmpty},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdIc},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdIe},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdIew},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdIsw},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdN},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdNic},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdNie},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdNiew},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartIdNisw},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Rack},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RackN},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 113, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 114, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 115, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Serial},
        [Parameter(Position = 116, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SerialEmpty},
        [Parameter(Position = 117, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIc},
        [Parameter(Position = 118, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIe},
        [Parameter(Position = 119, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIew},
        [Parameter(Position = 120, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIsw},
        [Parameter(Position = 121, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialN},
        [Parameter(Position = 122, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNic},
        [Parameter(Position = 123, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNie},
        [Parameter(Position = 124, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNiew},
        [Parameter(Position = 125, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNisw},
        [Parameter(Position = 126, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 127, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 128, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 129, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 130, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 131, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 132, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 133, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 134, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 135, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 136, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 137, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassis},
        [Parameter(Position = 138, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassisN},
        [Parameter(Position = 139, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisId},
        [Parameter(Position = 140, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/inventory-items/'

        if ($AssetTag) {
            $LocalVarQueryParameters['asset_tag'] = $AssetTag
        }

        if ($AssetTagEmpty) {
            $LocalVarQueryParameters['asset_tag__empty'] = $AssetTagEmpty
        }

        if ($AssetTagIc) {
            $LocalVarQueryParameters['asset_tag__ic'] = $AssetTagIc
        }

        if ($AssetTagIe) {
            $LocalVarQueryParameters['asset_tag__ie'] = $AssetTagIe
        }

        if ($AssetTagIew) {
            $LocalVarQueryParameters['asset_tag__iew'] = $AssetTagIew
        }

        if ($AssetTagIsw) {
            $LocalVarQueryParameters['asset_tag__isw'] = $AssetTagIsw
        }

        if ($AssetTagN) {
            $LocalVarQueryParameters['asset_tag__n'] = $AssetTagN
        }

        if ($AssetTagNic) {
            $LocalVarQueryParameters['asset_tag__nic'] = $AssetTagNic
        }

        if ($AssetTagNie) {
            $LocalVarQueryParameters['asset_tag__nie'] = $AssetTagNie
        }

        if ($AssetTagNiew) {
            $LocalVarQueryParameters['asset_tag__niew'] = $AssetTagNiew
        }

        if ($AssetTagNisw) {
            $LocalVarQueryParameters['asset_tag__nisw'] = $AssetTagNisw
        }

        if ($ComponentId) {
            $LocalVarQueryParameters['component_id'] = $ComponentId
        }

        if ($ComponentIdEmpty) {
            $LocalVarQueryParameters['component_id__empty'] = $ComponentIdEmpty
        }

        if ($ComponentIdGt) {
            $LocalVarQueryParameters['component_id__gt'] = $ComponentIdGt
        }

        if ($ComponentIdGte) {
            $LocalVarQueryParameters['component_id__gte'] = $ComponentIdGte
        }

        if ($ComponentIdLt) {
            $LocalVarQueryParameters['component_id__lt'] = $ComponentIdLt
        }

        if ($ComponentIdLte) {
            $LocalVarQueryParameters['component_id__lte'] = $ComponentIdLte
        }

        if ($ComponentIdN) {
            $LocalVarQueryParameters['component_id__n'] = $ComponentIdN
        }

        if ($ComponentType) {
            $LocalVarQueryParameters['component_type'] = $ComponentType
        }

        if ($ComponentTypeN) {
            $LocalVarQueryParameters['component_type__n'] = $ComponentTypeN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceN) {
            $LocalVarQueryParameters['device__n'] = $DeviceN
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($DeviceRole) {
            $LocalVarQueryParameters['device_role'] = $DeviceRole
        }

        if ($DeviceRoleN) {
            $LocalVarQueryParameters['device_role__n'] = $DeviceRoleN
        }

        if ($DeviceRoleId) {
            $LocalVarQueryParameters['device_role_id'] = $DeviceRoleId
        }

        if ($DeviceRoleIdN) {
            $LocalVarQueryParameters['device_role_id__n'] = $DeviceRoleIdN
        }

        if ($DeviceType) {
            $LocalVarQueryParameters['device_type'] = $DeviceType
        }

        if ($DeviceTypeN) {
            $LocalVarQueryParameters['device_type__n'] = $DeviceTypeN
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($Discovered) {
            $LocalVarQueryParameters['discovered'] = $Discovered
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($Manufacturer) {
            $LocalVarQueryParameters['manufacturer'] = $Manufacturer
        }

        if ($ManufacturerN) {
            $LocalVarQueryParameters['manufacturer__n'] = $ManufacturerN
        }

        if ($ManufacturerId) {
            $LocalVarQueryParameters['manufacturer_id'] = $ManufacturerId
        }

        if ($ManufacturerIdN) {
            $LocalVarQueryParameters['manufacturer_id__n'] = $ManufacturerIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($ParentId) {
            $LocalVarQueryParameters['parent_id'] = $ParentId
        }

        if ($ParentIdN) {
            $LocalVarQueryParameters['parent_id__n'] = $ParentIdN
        }

        if ($PartId) {
            $LocalVarQueryParameters['part_id'] = $PartId
        }

        if ($PartIdEmpty) {
            $LocalVarQueryParameters['part_id__empty'] = $PartIdEmpty
        }

        if ($PartIdIc) {
            $LocalVarQueryParameters['part_id__ic'] = $PartIdIc
        }

        if ($PartIdIe) {
            $LocalVarQueryParameters['part_id__ie'] = $PartIdIe
        }

        if ($PartIdIew) {
            $LocalVarQueryParameters['part_id__iew'] = $PartIdIew
        }

        if ($PartIdIsw) {
            $LocalVarQueryParameters['part_id__isw'] = $PartIdIsw
        }

        if ($PartIdN) {
            $LocalVarQueryParameters['part_id__n'] = $PartIdN
        }

        if ($PartIdNic) {
            $LocalVarQueryParameters['part_id__nic'] = $PartIdNic
        }

        if ($PartIdNie) {
            $LocalVarQueryParameters['part_id__nie'] = $PartIdNie
        }

        if ($PartIdNiew) {
            $LocalVarQueryParameters['part_id__niew'] = $PartIdNiew
        }

        if ($PartIdNisw) {
            $LocalVarQueryParameters['part_id__nisw'] = $PartIdNisw
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Rack) {
            $LocalVarQueryParameters['rack'] = $Rack
        }

        if ($RackN) {
            $LocalVarQueryParameters['rack__n'] = $RackN
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Serial) {
            $LocalVarQueryParameters['serial'] = $Serial
        }

        if ($SerialEmpty) {
            $LocalVarQueryParameters['serial__empty'] = $SerialEmpty
        }

        if ($SerialIc) {
            $LocalVarQueryParameters['serial__ic'] = $SerialIc
        }

        if ($SerialIe) {
            $LocalVarQueryParameters['serial__ie'] = $SerialIe
        }

        if ($SerialIew) {
            $LocalVarQueryParameters['serial__iew'] = $SerialIew
        }

        if ($SerialIsw) {
            $LocalVarQueryParameters['serial__isw'] = $SerialIsw
        }

        if ($SerialN) {
            $LocalVarQueryParameters['serial__n'] = $SerialN
        }

        if ($SerialNic) {
            $LocalVarQueryParameters['serial__nic'] = $SerialNic
        }

        if ($SerialNie) {
            $LocalVarQueryParameters['serial__nie'] = $SerialNie
        }

        if ($SerialNiew) {
            $LocalVarQueryParameters['serial__niew'] = $SerialNiew
        }

        if ($SerialNisw) {
            $LocalVarQueryParameters['serial__nisw'] = $SerialNisw
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VirtualChassis) {
            $LocalVarQueryParameters['virtual_chassis'] = $VirtualChassis
        }

        if ($VirtualChassisN) {
            $LocalVarQueryParameters['virtual_chassis__n'] = $VirtualChassisN
        }

        if ($VirtualChassisId) {
            $LocalVarQueryParameters['virtual_chassis_id'] = $VirtualChassisId
        }

        if ($VirtualChassisIdN) {
            $LocalVarQueryParameters['virtual_chassis_id__n'] = $VirtualChassisIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedInventoryItemList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item.

.PARAMETER PatchedWritableInventoryItemRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItem
#>
function Invoke-DcimInventoryItemsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableInventoryItemRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-items/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableInventoryItemRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItem" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItem
#>
function Invoke-DcimInventoryItemsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/inventory-items/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItem" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this inventory item.

.PARAMETER WritableInventoryItemRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

InventoryItem
#>
function Invoke-DcimInventoryItemsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableInventoryItemRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimInventoryItemsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/inventory-items/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimInventoryItemsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableInventoryItemRequest) {
            throw "Error! The required parameter `WritableInventoryItemRequest` missing when calling dcimInventoryItemsUpdate."
        }

        $LocalVarBodyParameter = $WritableInventoryItemRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "InventoryItem" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER LocationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimLocationsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${LocationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimLocationsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/locations/'

        if (!$LocationRequest) {
            throw "Error! The required parameter `LocationRequest` missing when calling dcimLocationsBulkDestroy."
        }

        $LocalVarBodyParameter = $LocationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER LocationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Location[]
#>
function Invoke-DcimLocationsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${LocationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimLocationsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/locations/'

        if (!$LocationRequest) {
            throw "Error! The required parameter `LocationRequest` missing when calling dcimLocationsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $LocationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Location[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER LocationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Location[]
#>
function Invoke-DcimLocationsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${LocationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimLocationsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/locations/'

        if (!$LocationRequest) {
            throw "Error! The required parameter `LocationRequest` missing when calling dcimLocationsBulkUpdate."
        }

        $LocalVarBodyParameter = $LocationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Location[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableLocationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Location
#>
function Invoke-DcimLocationsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableLocationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimLocationsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/locations/'

        if (!$WritableLocationRequest) {
            throw "Error! The required parameter `WritableLocationRequest` missing when calling dcimLocationsCreate."
        }

        $LocalVarBodyParameter = $WritableLocationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Location" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this location.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimLocationsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimLocationsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/locations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimLocationsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Contact
Contact

.PARAMETER ContactN
Contact

.PARAMETER ContactGroup
Contact group

.PARAMETER ContactGroupN
Contact group

.PARAMETER ContactRole
Contact Role

.PARAMETER ContactRoleN
Contact Role

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Parent
Location (slug)

.PARAMETER ParentN
Location (slug)

.PARAMETER ParentId
Location (ID)

.PARAMETER ParentIdN
Location (ID)

.PARAMETER Q
Search

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Site
Site (slug)

.PARAMETER SiteN
Site (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Status
No description available.

.PARAMETER StatusN
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantGroup
Tenant Group (slug)

.PARAMETER TenantGroupN
Tenant Group (slug)

.PARAMETER TenantGroupId
Tenant Group (ID)

.PARAMETER TenantGroupIdN
Tenant Group (ID)

.PARAMETER TenantId
Tenant (ID)

.PARAMETER TenantIdN
Tenant (ID)

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedLocationList
#>
function Invoke-DcimLocationsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Contact},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroup},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroupN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRole},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRoleN},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Parent},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentN},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentId},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentIdN},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Status},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${StatusN},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroup},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupN},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupId},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupIdN},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimLocationsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/locations/'

        if ($Contact) {
            $LocalVarQueryParameters['contact'] = $Contact
        }

        if ($ContactN) {
            $LocalVarQueryParameters['contact__n'] = $ContactN
        }

        if ($ContactGroup) {
            $LocalVarQueryParameters['contact_group'] = $ContactGroup
        }

        if ($ContactGroupN) {
            $LocalVarQueryParameters['contact_group__n'] = $ContactGroupN
        }

        if ($ContactRole) {
            $LocalVarQueryParameters['contact_role'] = $ContactRole
        }

        if ($ContactRoleN) {
            $LocalVarQueryParameters['contact_role__n'] = $ContactRoleN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Parent) {
            $LocalVarQueryParameters['parent'] = $Parent
        }

        if ($ParentN) {
            $LocalVarQueryParameters['parent__n'] = $ParentN
        }

        if ($ParentId) {
            $LocalVarQueryParameters['parent_id'] = $ParentId
        }

        if ($ParentIdN) {
            $LocalVarQueryParameters['parent_id__n'] = $ParentIdN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($StatusN) {
            $LocalVarQueryParameters['status__n'] = $StatusN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantGroup) {
            $LocalVarQueryParameters['tenant_group'] = $TenantGroup
        }

        if ($TenantGroupN) {
            $LocalVarQueryParameters['tenant_group__n'] = $TenantGroupN
        }

        if ($TenantGroupId) {
            $LocalVarQueryParameters['tenant_group_id'] = $TenantGroupId
        }

        if ($TenantGroupIdN) {
            $LocalVarQueryParameters['tenant_group_id__n'] = $TenantGroupIdN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedLocationList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this location.

.PARAMETER PatchedWritableLocationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Location
#>
function Invoke-DcimLocationsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableLocationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimLocationsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/locations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimLocationsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableLocationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Location" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this location.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Location
#>
function Invoke-DcimLocationsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimLocationsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/locations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimLocationsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Location" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this location.

.PARAMETER WritableLocationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Location
#>
function Invoke-DcimLocationsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableLocationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimLocationsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/locations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimLocationsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableLocationRequest) {
            throw "Error! The required parameter `WritableLocationRequest` missing when calling dcimLocationsUpdate."
        }

        $LocalVarBodyParameter = $WritableLocationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Location" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ManufacturerRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimManufacturersBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ManufacturerRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimManufacturersBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/manufacturers/'

        if (!$ManufacturerRequest) {
            throw "Error! The required parameter `ManufacturerRequest` missing when calling dcimManufacturersBulkDestroy."
        }

        $LocalVarBodyParameter = $ManufacturerRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ManufacturerRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Manufacturer[]
#>
function Invoke-DcimManufacturersBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ManufacturerRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimManufacturersBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/manufacturers/'

        if (!$ManufacturerRequest) {
            throw "Error! The required parameter `ManufacturerRequest` missing when calling dcimManufacturersBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ManufacturerRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Manufacturer[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ManufacturerRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Manufacturer[]
#>
function Invoke-DcimManufacturersBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ManufacturerRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimManufacturersBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/manufacturers/'

        if (!$ManufacturerRequest) {
            throw "Error! The required parameter `ManufacturerRequest` missing when calling dcimManufacturersBulkUpdate."
        }

        $LocalVarBodyParameter = $ManufacturerRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Manufacturer[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ManufacturerRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Manufacturer
#>
function Invoke-DcimManufacturersCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${ManufacturerRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimManufacturersCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/manufacturers/'

        if (!$ManufacturerRequest) {
            throw "Error! The required parameter `ManufacturerRequest` missing when calling dcimManufacturersCreate."
        }

        $LocalVarBodyParameter = $ManufacturerRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Manufacturer" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this manufacturer.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimManufacturersDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimManufacturersDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/manufacturers/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimManufacturersDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Contact
Contact

.PARAMETER ContactN
Contact

.PARAMETER ContactGroup
Contact group

.PARAMETER ContactGroupN
Contact group

.PARAMETER ContactRole
Contact Role

.PARAMETER ContactRoleN
Contact Role

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedManufacturerList
#>
function Invoke-DcimManufacturersList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Contact},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroup},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroupN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRole},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRoleN},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimManufacturersList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/manufacturers/'

        if ($Contact) {
            $LocalVarQueryParameters['contact'] = $Contact
        }

        if ($ContactN) {
            $LocalVarQueryParameters['contact__n'] = $ContactN
        }

        if ($ContactGroup) {
            $LocalVarQueryParameters['contact_group'] = $ContactGroup
        }

        if ($ContactGroupN) {
            $LocalVarQueryParameters['contact_group__n'] = $ContactGroupN
        }

        if ($ContactRole) {
            $LocalVarQueryParameters['contact_role'] = $ContactRole
        }

        if ($ContactRoleN) {
            $LocalVarQueryParameters['contact_role__n'] = $ContactRoleN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedManufacturerList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this manufacturer.

.PARAMETER PatchedManufacturerRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Manufacturer
#>
function Invoke-DcimManufacturersPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedManufacturerRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimManufacturersPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/manufacturers/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimManufacturersPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedManufacturerRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Manufacturer" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this manufacturer.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Manufacturer
#>
function Invoke-DcimManufacturersRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimManufacturersRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/manufacturers/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimManufacturersRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Manufacturer" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this manufacturer.

.PARAMETER ManufacturerRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Manufacturer
#>
function Invoke-DcimManufacturersUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${ManufacturerRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimManufacturersUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/manufacturers/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimManufacturersUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$ManufacturerRequest) {
            throw "Error! The required parameter `ManufacturerRequest` missing when calling dcimManufacturersUpdate."
        }

        $LocalVarBodyParameter = $ManufacturerRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Manufacturer" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimModuleBayTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBayTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bay-templates/'

        if (!$ModuleBayTemplateRequest) {
            throw "Error! The required parameter `ModuleBayTemplateRequest` missing when calling dcimModuleBayTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $ModuleBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBayTemplate[]
#>
function Invoke-DcimModuleBayTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBayTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bay-templates/'

        if (!$ModuleBayTemplateRequest) {
            throw "Error! The required parameter `ModuleBayTemplateRequest` missing when calling dcimModuleBayTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ModuleBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBayTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBayTemplate[]
#>
function Invoke-DcimModuleBayTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBayTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bay-templates/'

        if (!$ModuleBayTemplateRequest) {
            throw "Error! The required parameter `ModuleBayTemplateRequest` missing when calling dcimModuleBayTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $ModuleBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBayTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableModuleBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBayTemplate
#>
function Invoke-DcimModuleBayTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableModuleBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBayTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bay-templates/'

        if (!$WritableModuleBayTemplateRequest) {
            throw "Error! The required parameter `WritableModuleBayTemplateRequest` missing when calling dcimModuleBayTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritableModuleBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBayTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module bay template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimModuleBayTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBayTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/module-bay-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleBayTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DevicetypeId
Device type (ID)

.PARAMETER DevicetypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedModuleBayTemplateList
#>
function Invoke-DcimModuleBayTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeIdN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBayTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/module-bay-templates/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DevicetypeId) {
            $LocalVarQueryParameters['devicetype_id'] = $DevicetypeId
        }

        if ($DevicetypeIdN) {
            $LocalVarQueryParameters['devicetype_id__n'] = $DevicetypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedModuleBayTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module bay template.

.PARAMETER PatchedWritableModuleBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBayTemplate
#>
function Invoke-DcimModuleBayTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableModuleBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBayTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bay-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleBayTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableModuleBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBayTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module bay template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBayTemplate
#>
function Invoke-DcimModuleBayTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBayTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/module-bay-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleBayTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBayTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module bay template.

.PARAMETER WritableModuleBayTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBayTemplate
#>
function Invoke-DcimModuleBayTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableModuleBayTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBayTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bay-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleBayTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableModuleBayTemplateRequest) {
            throw "Error! The required parameter `WritableModuleBayTemplateRequest` missing when calling dcimModuleBayTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritableModuleBayTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBayTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimModuleBaysBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBaysBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bays/'

        if (!$ModuleBayRequest) {
            throw "Error! The required parameter `ModuleBayRequest` missing when calling dcimModuleBaysBulkDestroy."
        }

        $LocalVarBodyParameter = $ModuleBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBay[]
#>
function Invoke-DcimModuleBaysBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBaysBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bays/'

        if (!$ModuleBayRequest) {
            throw "Error! The required parameter `ModuleBayRequest` missing when calling dcimModuleBaysBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ModuleBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBay[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBay[]
#>
function Invoke-DcimModuleBaysBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBaysBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bays/'

        if (!$ModuleBayRequest) {
            throw "Error! The required parameter `ModuleBayRequest` missing when calling dcimModuleBaysBulkUpdate."
        }

        $LocalVarBodyParameter = $ModuleBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBay[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableModuleBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBay
#>
function Invoke-DcimModuleBaysCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableModuleBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBaysCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bays/'

        if (!$WritableModuleBayRequest) {
            throw "Error! The required parameter `WritableModuleBayRequest` missing when calling dcimModuleBaysCreate."
        }

        $LocalVarBodyParameter = $WritableModuleBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBay" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module bay.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimModuleBaysDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBaysDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/module-bays/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleBaysDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Device
Device (name)

.PARAMETER DeviceN
Device (name)

.PARAMETER DeviceId
Device (ID)

.PARAMETER DeviceIdN
Device (ID)

.PARAMETER DeviceRole
Device role (slug)

.PARAMETER DeviceRoleN
Device role (slug)

.PARAMETER DeviceRoleId
Device role (ID)

.PARAMETER DeviceRoleIdN
Device role (ID)

.PARAMETER DeviceType
Device type (model)

.PARAMETER DeviceTypeN
Device type (model)

.PARAMETER DeviceTypeId
Device type (ID)

.PARAMETER DeviceTypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Rack
Rack (name)

.PARAMETER RackN
Rack (name)

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Role
Device role (slug)

.PARAMETER RoleN
Device role (slug)

.PARAMETER RoleId
Device role (ID)

.PARAMETER RoleIdN
Device role (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VirtualChassis
Virtual Chassis

.PARAMETER VirtualChassisN
Virtual Chassis

.PARAMETER VirtualChassisId
Virtual Chassis (ID)

.PARAMETER VirtualChassisIdN
Virtual Chassis (ID)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedModuleBayList
#>
function Invoke-DcimModuleBaysList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Device},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRole},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRoleN},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleId},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleIdN},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceType},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceTypeN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LocationN},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Rack},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RackN},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassis},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassisN},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisId},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBaysList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/module-bays/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceN) {
            $LocalVarQueryParameters['device__n'] = $DeviceN
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($DeviceRole) {
            $LocalVarQueryParameters['device_role'] = $DeviceRole
        }

        if ($DeviceRoleN) {
            $LocalVarQueryParameters['device_role__n'] = $DeviceRoleN
        }

        if ($DeviceRoleId) {
            $LocalVarQueryParameters['device_role_id'] = $DeviceRoleId
        }

        if ($DeviceRoleIdN) {
            $LocalVarQueryParameters['device_role_id__n'] = $DeviceRoleIdN
        }

        if ($DeviceType) {
            $LocalVarQueryParameters['device_type'] = $DeviceType
        }

        if ($DeviceTypeN) {
            $LocalVarQueryParameters['device_type__n'] = $DeviceTypeN
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Rack) {
            $LocalVarQueryParameters['rack'] = $Rack
        }

        if ($RackN) {
            $LocalVarQueryParameters['rack__n'] = $RackN
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VirtualChassis) {
            $LocalVarQueryParameters['virtual_chassis'] = $VirtualChassis
        }

        if ($VirtualChassisN) {
            $LocalVarQueryParameters['virtual_chassis__n'] = $VirtualChassisN
        }

        if ($VirtualChassisId) {
            $LocalVarQueryParameters['virtual_chassis_id'] = $VirtualChassisId
        }

        if ($VirtualChassisIdN) {
            $LocalVarQueryParameters['virtual_chassis_id__n'] = $VirtualChassisIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedModuleBayList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module bay.

.PARAMETER PatchedWritableModuleBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBay
#>
function Invoke-DcimModuleBaysPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableModuleBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBaysPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bays/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleBaysPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableModuleBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBay" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module bay.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBay
#>
function Invoke-DcimModuleBaysRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBaysRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/module-bays/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleBaysRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBay" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module bay.

.PARAMETER WritableModuleBayRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleBay
#>
function Invoke-DcimModuleBaysUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableModuleBayRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleBaysUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-bays/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleBaysUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableModuleBayRequest) {
            throw "Error! The required parameter `WritableModuleBayRequest` missing when calling dcimModuleBaysUpdate."
        }

        $LocalVarBodyParameter = $WritableModuleBayRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleBay" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimModuleTypesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleTypesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-types/'

        if (!$ModuleTypeRequest) {
            throw "Error! The required parameter `ModuleTypeRequest` missing when calling dcimModuleTypesBulkDestroy."
        }

        $LocalVarBodyParameter = $ModuleTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleType[]
#>
function Invoke-DcimModuleTypesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleTypesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-types/'

        if (!$ModuleTypeRequest) {
            throw "Error! The required parameter `ModuleTypeRequest` missing when calling dcimModuleTypesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ModuleTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleType[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleType[]
#>
function Invoke-DcimModuleTypesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleTypesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-types/'

        if (!$ModuleTypeRequest) {
            throw "Error! The required parameter `ModuleTypeRequest` missing when calling dcimModuleTypesBulkUpdate."
        }

        $LocalVarBodyParameter = $ModuleTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleType[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableModuleTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleType
#>
function Invoke-DcimModuleTypesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableModuleTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleTypesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-types/'

        if (!$WritableModuleTypeRequest) {
            throw "Error! The required parameter `WritableModuleTypeRequest` missing when calling dcimModuleTypesCreate."
        }

        $LocalVarBodyParameter = $WritableModuleTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleType" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module type.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimModuleTypesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleTypesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/module-types/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleTypesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConsolePorts
Has console ports

.PARAMETER ConsoleServerPorts
Has console server ports

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Interfaces
Has interfaces

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Manufacturer
Manufacturer (slug)

.PARAMETER ManufacturerN
Manufacturer (slug)

.PARAMETER ManufacturerId
Manufacturer (ID)

.PARAMETER ManufacturerIdN
Manufacturer (ID)

.PARAMETER Model
No description available.

.PARAMETER ModelEmpty
No description available.

.PARAMETER ModelIc
No description available.

.PARAMETER ModelIe
No description available.

.PARAMETER ModelIew
No description available.

.PARAMETER ModelIsw
No description available.

.PARAMETER ModelN
No description available.

.PARAMETER ModelNic
No description available.

.PARAMETER ModelNie
No description available.

.PARAMETER ModelNiew
No description available.

.PARAMETER ModelNisw
No description available.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER PartNumber
No description available.

.PARAMETER PartNumberEmpty
No description available.

.PARAMETER PartNumberIc
No description available.

.PARAMETER PartNumberIe
No description available.

.PARAMETER PartNumberIew
No description available.

.PARAMETER PartNumberIsw
No description available.

.PARAMETER PartNumberN
No description available.

.PARAMETER PartNumberNic
No description available.

.PARAMETER PartNumberNie
No description available.

.PARAMETER PartNumberNiew
No description available.

.PARAMETER PartNumberNisw
No description available.

.PARAMETER PassThroughPorts
Has pass-through ports

.PARAMETER PowerOutlets
Has power outlets

.PARAMETER PowerPorts
Has power ports

.PARAMETER Q
Search

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER Weight
No description available.

.PARAMETER WeightEmpty
No description available.

.PARAMETER WeightGt
No description available.

.PARAMETER WeightGte
No description available.

.PARAMETER WeightLt
No description available.

.PARAMETER WeightLte
No description available.

.PARAMETER WeightN
No description available.

.PARAMETER WeightUnit
No description available.

.PARAMETER WeightUnitN
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedModuleTypeList
#>
function Invoke-DcimModuleTypesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ConsolePorts},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ConsoleServerPorts},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Interfaces},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Manufacturer},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ManufacturerN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerId},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerIdN},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Model},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ModelEmpty},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelIc},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelIe},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelIew},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelIsw},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelN},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelNic},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelNie},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelNiew},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModelNisw},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumber},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PartNumberEmpty},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberIc},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberIe},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberIew},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberIsw},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberNic},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberNie},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberNiew},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PartNumberNisw},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PassThroughPorts},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PowerOutlets},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PowerPorts},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${Weight},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${WeightEmpty},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightGt},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightGte},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightLt},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightLte},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightN},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WeightUnit},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WeightUnitN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleTypesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/module-types/'

        if ($ConsolePorts) {
            $LocalVarQueryParameters['console_ports'] = $ConsolePorts
        }

        if ($ConsoleServerPorts) {
            $LocalVarQueryParameters['console_server_ports'] = $ConsoleServerPorts
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Interfaces) {
            $LocalVarQueryParameters['interfaces'] = $Interfaces
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Manufacturer) {
            $LocalVarQueryParameters['manufacturer'] = $Manufacturer
        }

        if ($ManufacturerN) {
            $LocalVarQueryParameters['manufacturer__n'] = $ManufacturerN
        }

        if ($ManufacturerId) {
            $LocalVarQueryParameters['manufacturer_id'] = $ManufacturerId
        }

        if ($ManufacturerIdN) {
            $LocalVarQueryParameters['manufacturer_id__n'] = $ManufacturerIdN
        }

        if ($Model) {
            $LocalVarQueryParameters['model'] = $Model
        }

        if ($ModelEmpty) {
            $LocalVarQueryParameters['model__empty'] = $ModelEmpty
        }

        if ($ModelIc) {
            $LocalVarQueryParameters['model__ic'] = $ModelIc
        }

        if ($ModelIe) {
            $LocalVarQueryParameters['model__ie'] = $ModelIe
        }

        if ($ModelIew) {
            $LocalVarQueryParameters['model__iew'] = $ModelIew
        }

        if ($ModelIsw) {
            $LocalVarQueryParameters['model__isw'] = $ModelIsw
        }

        if ($ModelN) {
            $LocalVarQueryParameters['model__n'] = $ModelN
        }

        if ($ModelNic) {
            $LocalVarQueryParameters['model__nic'] = $ModelNic
        }

        if ($ModelNie) {
            $LocalVarQueryParameters['model__nie'] = $ModelNie
        }

        if ($ModelNiew) {
            $LocalVarQueryParameters['model__niew'] = $ModelNiew
        }

        if ($ModelNisw) {
            $LocalVarQueryParameters['model__nisw'] = $ModelNisw
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($PartNumber) {
            $LocalVarQueryParameters['part_number'] = $PartNumber
        }

        if ($PartNumberEmpty) {
            $LocalVarQueryParameters['part_number__empty'] = $PartNumberEmpty
        }

        if ($PartNumberIc) {
            $LocalVarQueryParameters['part_number__ic'] = $PartNumberIc
        }

        if ($PartNumberIe) {
            $LocalVarQueryParameters['part_number__ie'] = $PartNumberIe
        }

        if ($PartNumberIew) {
            $LocalVarQueryParameters['part_number__iew'] = $PartNumberIew
        }

        if ($PartNumberIsw) {
            $LocalVarQueryParameters['part_number__isw'] = $PartNumberIsw
        }

        if ($PartNumberN) {
            $LocalVarQueryParameters['part_number__n'] = $PartNumberN
        }

        if ($PartNumberNic) {
            $LocalVarQueryParameters['part_number__nic'] = $PartNumberNic
        }

        if ($PartNumberNie) {
            $LocalVarQueryParameters['part_number__nie'] = $PartNumberNie
        }

        if ($PartNumberNiew) {
            $LocalVarQueryParameters['part_number__niew'] = $PartNumberNiew
        }

        if ($PartNumberNisw) {
            $LocalVarQueryParameters['part_number__nisw'] = $PartNumberNisw
        }

        if ($PassThroughPorts) {
            $LocalVarQueryParameters['pass_through_ports'] = $PassThroughPorts
        }

        if ($PowerOutlets) {
            $LocalVarQueryParameters['power_outlets'] = $PowerOutlets
        }

        if ($PowerPorts) {
            $LocalVarQueryParameters['power_ports'] = $PowerPorts
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Weight) {
            $LocalVarQueryParameters['weight'] = $Weight
        }

        if ($WeightEmpty) {
            $LocalVarQueryParameters['weight__empty'] = $WeightEmpty
        }

        if ($WeightGt) {
            $LocalVarQueryParameters['weight__gt'] = $WeightGt
        }

        if ($WeightGte) {
            $LocalVarQueryParameters['weight__gte'] = $WeightGte
        }

        if ($WeightLt) {
            $LocalVarQueryParameters['weight__lt'] = $WeightLt
        }

        if ($WeightLte) {
            $LocalVarQueryParameters['weight__lte'] = $WeightLte
        }

        if ($WeightN) {
            $LocalVarQueryParameters['weight__n'] = $WeightN
        }

        if ($WeightUnit) {
            $LocalVarQueryParameters['weight_unit'] = $WeightUnit
        }

        if ($WeightUnitN) {
            $LocalVarQueryParameters['weight_unit__n'] = $WeightUnitN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedModuleTypeList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module type.

.PARAMETER PatchedWritableModuleTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleType
#>
function Invoke-DcimModuleTypesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableModuleTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleTypesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-types/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleTypesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableModuleTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleType" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module type.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleType
#>
function Invoke-DcimModuleTypesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleTypesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/module-types/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleTypesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleType" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module type.

.PARAMETER WritableModuleTypeRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ModuleType
#>
function Invoke-DcimModuleTypesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableModuleTypeRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModuleTypesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/module-types/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModuleTypesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableModuleTypeRequest) {
            throw "Error! The required parameter `WritableModuleTypeRequest` missing when calling dcimModuleTypesUpdate."
        }

        $LocalVarBodyParameter = $WritableModuleTypeRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ModuleType" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimModulesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModulesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/modules/'

        if (!$ModuleRequest) {
            throw "Error! The required parameter `ModuleRequest` missing when calling dcimModulesBulkDestroy."
        }

        $LocalVarBodyParameter = $ModuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Module[]
#>
function Invoke-DcimModulesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModulesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/modules/'

        if (!$ModuleRequest) {
            throw "Error! The required parameter `ModuleRequest` missing when calling dcimModulesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ModuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Module[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ModuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Module[]
#>
function Invoke-DcimModulesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ModuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModulesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/modules/'

        if (!$ModuleRequest) {
            throw "Error! The required parameter `ModuleRequest` missing when calling dcimModulesBulkUpdate."
        }

        $LocalVarBodyParameter = $ModuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Module[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableModuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Module
#>
function Invoke-DcimModulesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableModuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModulesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/modules/'

        if (!$WritableModuleRequest) {
            throw "Error! The required parameter `WritableModuleRequest` missing when calling dcimModulesCreate."
        }

        $LocalVarBodyParameter = $WritableModuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Module" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimModulesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModulesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/modules/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModulesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssetTag
No description available.

.PARAMETER AssetTagEmpty
No description available.

.PARAMETER AssetTagIc
No description available.

.PARAMETER AssetTagIe
No description available.

.PARAMETER AssetTagIew
No description available.

.PARAMETER AssetTagIsw
No description available.

.PARAMETER AssetTagN
No description available.

.PARAMETER AssetTagNic
No description available.

.PARAMETER AssetTagNie
No description available.

.PARAMETER AssetTagNiew
No description available.

.PARAMETER AssetTagNisw
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DeviceId
Device (ID)

.PARAMETER DeviceIdN
Device (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Manufacturer
Manufacturer (slug)

.PARAMETER ManufacturerN
Manufacturer (slug)

.PARAMETER ManufacturerId
Manufacturer (ID)

.PARAMETER ManufacturerIdN
Manufacturer (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuleBayId
Module Bay (ID)

.PARAMETER ModuleBayIdN
Module Bay (ID)

.PARAMETER ModuleType
Module type (model)

.PARAMETER ModuleTypeN
Module type (model)

.PARAMETER ModuleTypeId
Module type (ID)

.PARAMETER ModuleTypeIdN
Module type (ID)

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Serial
No description available.

.PARAMETER SerialEmpty
No description available.

.PARAMETER SerialIc
No description available.

.PARAMETER SerialIe
No description available.

.PARAMETER SerialIew
No description available.

.PARAMETER SerialIsw
No description available.

.PARAMETER SerialN
No description available.

.PARAMETER SerialNic
No description available.

.PARAMETER SerialNie
No description available.

.PARAMETER SerialNiew
No description available.

.PARAMETER SerialNisw
No description available.

.PARAMETER Status
No description available.

.PARAMETER StatusN
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedModuleList
#>
function Invoke-DcimModulesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTag},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AssetTagEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIe},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIew},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIsw},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNie},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNiew},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNisw},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Manufacturer},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ManufacturerN},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerId},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerIdN},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleBayId},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleBayIdN},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModuleType},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ModuleTypeN},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleTypeId},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleTypeIdN},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Serial},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SerialEmpty},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIc},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIe},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIew},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIsw},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialN},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNic},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNie},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNiew},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNisw},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Status},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${StatusN},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModulesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/modules/'

        if ($AssetTag) {
            $LocalVarQueryParameters['asset_tag'] = $AssetTag
        }

        if ($AssetTagEmpty) {
            $LocalVarQueryParameters['asset_tag__empty'] = $AssetTagEmpty
        }

        if ($AssetTagIc) {
            $LocalVarQueryParameters['asset_tag__ic'] = $AssetTagIc
        }

        if ($AssetTagIe) {
            $LocalVarQueryParameters['asset_tag__ie'] = $AssetTagIe
        }

        if ($AssetTagIew) {
            $LocalVarQueryParameters['asset_tag__iew'] = $AssetTagIew
        }

        if ($AssetTagIsw) {
            $LocalVarQueryParameters['asset_tag__isw'] = $AssetTagIsw
        }

        if ($AssetTagN) {
            $LocalVarQueryParameters['asset_tag__n'] = $AssetTagN
        }

        if ($AssetTagNic) {
            $LocalVarQueryParameters['asset_tag__nic'] = $AssetTagNic
        }

        if ($AssetTagNie) {
            $LocalVarQueryParameters['asset_tag__nie'] = $AssetTagNie
        }

        if ($AssetTagNiew) {
            $LocalVarQueryParameters['asset_tag__niew'] = $AssetTagNiew
        }

        if ($AssetTagNisw) {
            $LocalVarQueryParameters['asset_tag__nisw'] = $AssetTagNisw
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Manufacturer) {
            $LocalVarQueryParameters['manufacturer'] = $Manufacturer
        }

        if ($ManufacturerN) {
            $LocalVarQueryParameters['manufacturer__n'] = $ManufacturerN
        }

        if ($ManufacturerId) {
            $LocalVarQueryParameters['manufacturer_id'] = $ManufacturerId
        }

        if ($ManufacturerIdN) {
            $LocalVarQueryParameters['manufacturer_id__n'] = $ManufacturerIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuleBayId) {
            $LocalVarQueryParameters['module_bay_id'] = $ModuleBayId
        }

        if ($ModuleBayIdN) {
            $LocalVarQueryParameters['module_bay_id__n'] = $ModuleBayIdN
        }

        if ($ModuleType) {
            $LocalVarQueryParameters['module_type'] = $ModuleType
        }

        if ($ModuleTypeN) {
            $LocalVarQueryParameters['module_type__n'] = $ModuleTypeN
        }

        if ($ModuleTypeId) {
            $LocalVarQueryParameters['module_type_id'] = $ModuleTypeId
        }

        if ($ModuleTypeIdN) {
            $LocalVarQueryParameters['module_type_id__n'] = $ModuleTypeIdN
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Serial) {
            $LocalVarQueryParameters['serial'] = $Serial
        }

        if ($SerialEmpty) {
            $LocalVarQueryParameters['serial__empty'] = $SerialEmpty
        }

        if ($SerialIc) {
            $LocalVarQueryParameters['serial__ic'] = $SerialIc
        }

        if ($SerialIe) {
            $LocalVarQueryParameters['serial__ie'] = $SerialIe
        }

        if ($SerialIew) {
            $LocalVarQueryParameters['serial__iew'] = $SerialIew
        }

        if ($SerialIsw) {
            $LocalVarQueryParameters['serial__isw'] = $SerialIsw
        }

        if ($SerialN) {
            $LocalVarQueryParameters['serial__n'] = $SerialN
        }

        if ($SerialNic) {
            $LocalVarQueryParameters['serial__nic'] = $SerialNic
        }

        if ($SerialNie) {
            $LocalVarQueryParameters['serial__nie'] = $SerialNie
        }

        if ($SerialNiew) {
            $LocalVarQueryParameters['serial__niew'] = $SerialNiew
        }

        if ($SerialNisw) {
            $LocalVarQueryParameters['serial__nisw'] = $SerialNisw
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($StatusN) {
            $LocalVarQueryParameters['status__n'] = $StatusN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedModuleList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module.

.PARAMETER PatchedWritableModuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Module
#>
function Invoke-DcimModulesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableModuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModulesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/modules/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModulesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableModuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Module" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Module
#>
function Invoke-DcimModulesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModulesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/modules/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModulesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Module" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this module.

.PARAMETER WritableModuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Module
#>
function Invoke-DcimModulesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableModuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimModulesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/modules/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimModulesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableModuleRequest) {
            throw "Error! The required parameter `WritableModuleRequest` missing when calling dcimModulesUpdate."
        }

        $LocalVarBodyParameter = $WritableModuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Module" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PlatformRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPlatformsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PlatformRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPlatformsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/platforms/'

        if (!$PlatformRequest) {
            throw "Error! The required parameter `PlatformRequest` missing when calling dcimPlatformsBulkDestroy."
        }

        $LocalVarBodyParameter = $PlatformRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PlatformRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Platform[]
#>
function Invoke-DcimPlatformsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PlatformRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPlatformsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/platforms/'

        if (!$PlatformRequest) {
            throw "Error! The required parameter `PlatformRequest` missing when calling dcimPlatformsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $PlatformRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Platform[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PlatformRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Platform[]
#>
function Invoke-DcimPlatformsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PlatformRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPlatformsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/platforms/'

        if (!$PlatformRequest) {
            throw "Error! The required parameter `PlatformRequest` missing when calling dcimPlatformsBulkUpdate."
        }

        $LocalVarBodyParameter = $PlatformRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Platform[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritablePlatformRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Platform
#>
function Invoke-DcimPlatformsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePlatformRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPlatformsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/platforms/'

        if (!$WritablePlatformRequest) {
            throw "Error! The required parameter `WritablePlatformRequest` missing when calling dcimPlatformsCreate."
        }

        $LocalVarBodyParameter = $WritablePlatformRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Platform" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this platform.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPlatformsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPlatformsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/platforms/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPlatformsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AvailableForDeviceType
No description available.

.PARAMETER ConfigTemplateId
Config template (ID)

.PARAMETER ConfigTemplateIdN
Config template (ID)

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Manufacturer
Manufacturer (slug)

.PARAMETER ManufacturerN
Manufacturer (slug)

.PARAMETER ManufacturerId
Manufacturer (ID)

.PARAMETER ManufacturerIdN
Manufacturer (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedPlatformList
#>
function Invoke-DcimPlatformsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AvailableForDeviceType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ConfigTemplateId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ConfigTemplateIdN},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Manufacturer},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ManufacturerN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerId},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ManufacturerIdN},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPlatformsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/platforms/'

        if ($AvailableForDeviceType) {
            $LocalVarQueryParameters['available_for_device_type'] = $AvailableForDeviceType
        }

        if ($ConfigTemplateId) {
            $LocalVarQueryParameters['config_template_id'] = $ConfigTemplateId
        }

        if ($ConfigTemplateIdN) {
            $LocalVarQueryParameters['config_template_id__n'] = $ConfigTemplateIdN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Manufacturer) {
            $LocalVarQueryParameters['manufacturer'] = $Manufacturer
        }

        if ($ManufacturerN) {
            $LocalVarQueryParameters['manufacturer__n'] = $ManufacturerN
        }

        if ($ManufacturerId) {
            $LocalVarQueryParameters['manufacturer_id'] = $ManufacturerId
        }

        if ($ManufacturerIdN) {
            $LocalVarQueryParameters['manufacturer_id__n'] = $ManufacturerIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedPlatformList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this platform.

.PARAMETER PatchedWritablePlatformRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Platform
#>
function Invoke-DcimPlatformsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritablePlatformRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPlatformsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/platforms/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPlatformsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritablePlatformRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Platform" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this platform.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Platform
#>
function Invoke-DcimPlatformsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPlatformsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/platforms/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPlatformsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Platform" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this platform.

.PARAMETER WritablePlatformRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Platform
#>
function Invoke-DcimPlatformsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePlatformRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPlatformsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/platforms/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPlatformsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritablePlatformRequest) {
            throw "Error! The required parameter `WritablePlatformRequest` missing when calling dcimPlatformsUpdate."
        }

        $LocalVarBodyParameter = $WritablePlatformRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Platform" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerFeedRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerFeedsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerFeedRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerFeedsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-feeds/'

        if (!$PowerFeedRequest) {
            throw "Error! The required parameter `PowerFeedRequest` missing when calling dcimPowerFeedsBulkDestroy."
        }

        $LocalVarBodyParameter = $PowerFeedRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerFeedRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerFeed[]
#>
function Invoke-DcimPowerFeedsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerFeedRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerFeedsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-feeds/'

        if (!$PowerFeedRequest) {
            throw "Error! The required parameter `PowerFeedRequest` missing when calling dcimPowerFeedsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $PowerFeedRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerFeed[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerFeedRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerFeed[]
#>
function Invoke-DcimPowerFeedsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerFeedRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerFeedsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-feeds/'

        if (!$PowerFeedRequest) {
            throw "Error! The required parameter `PowerFeedRequest` missing when calling dcimPowerFeedsBulkUpdate."
        }

        $LocalVarBodyParameter = $PowerFeedRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerFeed[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritablePowerFeedRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerFeed
#>
function Invoke-DcimPowerFeedsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerFeedRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerFeedsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-feeds/'

        if (!$WritablePowerFeedRequest) {
            throw "Error! The required parameter `WritablePowerFeedRequest` missing when calling dcimPowerFeedsCreate."
        }

        $LocalVarBodyParameter = $WritablePowerFeedRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerFeed" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power feed.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerFeedsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerFeedsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/power-feeds/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerFeedsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Amperage
No description available.

.PARAMETER AmperageEmpty
No description available.

.PARAMETER AmperageGt
No description available.

.PARAMETER AmperageGte
No description available.

.PARAMETER AmperageLt
No description available.

.PARAMETER AmperageLte
No description available.

.PARAMETER AmperageN
No description available.

.PARAMETER CableEnd
No description available.

.PARAMETER CableEndN
No description available.

.PARAMETER Cabled
No description available.

.PARAMETER Connected
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER MaxUtilization
No description available.

.PARAMETER MaxUtilizationEmpty
No description available.

.PARAMETER MaxUtilizationGt
No description available.

.PARAMETER MaxUtilizationGte
No description available.

.PARAMETER MaxUtilizationLt
No description available.

.PARAMETER MaxUtilizationLte
No description available.

.PARAMETER MaxUtilizationN
No description available.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Occupied
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Phase
No description available.

.PARAMETER PhaseN
No description available.

.PARAMETER PowerPanelId
Power panel (ID)

.PARAMETER PowerPanelIdN
Power panel (ID)

.PARAMETER Q
Search

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Status
No description available.

.PARAMETER StatusN
No description available.

.PARAMETER Supply
No description available.

.PARAMETER SupplyN
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantGroup
Tenant Group (slug)

.PARAMETER TenantGroupN
Tenant Group (slug)

.PARAMETER TenantGroupId
Tenant Group (ID)

.PARAMETER TenantGroupIdN
Tenant Group (ID)

.PARAMETER TenantId
Tenant (ID)

.PARAMETER TenantIdN
Tenant (ID)

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER Voltage
No description available.

.PARAMETER VoltageEmpty
No description available.

.PARAMETER VoltageGt
No description available.

.PARAMETER VoltageGte
No description available.

.PARAMETER VoltageLt
No description available.

.PARAMETER VoltageLte
No description available.

.PARAMETER VoltageN
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedPowerFeedList
#>
function Invoke-DcimPowerFeedsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Amperage},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AmperageEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AmperageGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AmperageGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AmperageLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AmperageLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AmperageN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEnd},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEndN},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Cabled},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Connected},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxUtilization},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${MaxUtilizationEmpty},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxUtilizationGt},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxUtilizationGte},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxUtilizationLt},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxUtilizationLte},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxUtilizationN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Occupied},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Phase},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${PhaseN},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PowerPanelId},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PowerPanelIdN},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Status},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${StatusN},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Supply},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${SupplyN},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroup},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupN},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupId},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupIdN},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TypeN},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Voltage},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${VoltageEmpty},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VoltageGt},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VoltageGte},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VoltageLt},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VoltageLte},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VoltageN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerFeedsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-feeds/'

        if ($Amperage) {
            $LocalVarQueryParameters['amperage'] = $Amperage
        }

        if ($AmperageEmpty) {
            $LocalVarQueryParameters['amperage__empty'] = $AmperageEmpty
        }

        if ($AmperageGt) {
            $LocalVarQueryParameters['amperage__gt'] = $AmperageGt
        }

        if ($AmperageGte) {
            $LocalVarQueryParameters['amperage__gte'] = $AmperageGte
        }

        if ($AmperageLt) {
            $LocalVarQueryParameters['amperage__lt'] = $AmperageLt
        }

        if ($AmperageLte) {
            $LocalVarQueryParameters['amperage__lte'] = $AmperageLte
        }

        if ($AmperageN) {
            $LocalVarQueryParameters['amperage__n'] = $AmperageN
        }

        if ($CableEnd) {
            $LocalVarQueryParameters['cable_end'] = $CableEnd
        }

        if ($CableEndN) {
            $LocalVarQueryParameters['cable_end__n'] = $CableEndN
        }

        if ($Cabled) {
            $LocalVarQueryParameters['cabled'] = $Cabled
        }

        if ($Connected) {
            $LocalVarQueryParameters['connected'] = $Connected
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($MaxUtilization) {
            $LocalVarQueryParameters['max_utilization'] = $MaxUtilization
        }

        if ($MaxUtilizationEmpty) {
            $LocalVarQueryParameters['max_utilization__empty'] = $MaxUtilizationEmpty
        }

        if ($MaxUtilizationGt) {
            $LocalVarQueryParameters['max_utilization__gt'] = $MaxUtilizationGt
        }

        if ($MaxUtilizationGte) {
            $LocalVarQueryParameters['max_utilization__gte'] = $MaxUtilizationGte
        }

        if ($MaxUtilizationLt) {
            $LocalVarQueryParameters['max_utilization__lt'] = $MaxUtilizationLt
        }

        if ($MaxUtilizationLte) {
            $LocalVarQueryParameters['max_utilization__lte'] = $MaxUtilizationLte
        }

        if ($MaxUtilizationN) {
            $LocalVarQueryParameters['max_utilization__n'] = $MaxUtilizationN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Occupied) {
            $LocalVarQueryParameters['occupied'] = $Occupied
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Phase) {
            $LocalVarQueryParameters['phase'] = $Phase
        }

        if ($PhaseN) {
            $LocalVarQueryParameters['phase__n'] = $PhaseN
        }

        if ($PowerPanelId) {
            $LocalVarQueryParameters['power_panel_id'] = $PowerPanelId
        }

        if ($PowerPanelIdN) {
            $LocalVarQueryParameters['power_panel_id__n'] = $PowerPanelIdN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($StatusN) {
            $LocalVarQueryParameters['status__n'] = $StatusN
        }

        if ($Supply) {
            $LocalVarQueryParameters['supply'] = $Supply
        }

        if ($SupplyN) {
            $LocalVarQueryParameters['supply__n'] = $SupplyN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantGroup) {
            $LocalVarQueryParameters['tenant_group'] = $TenantGroup
        }

        if ($TenantGroupN) {
            $LocalVarQueryParameters['tenant_group__n'] = $TenantGroupN
        }

        if ($TenantGroupId) {
            $LocalVarQueryParameters['tenant_group_id'] = $TenantGroupId
        }

        if ($TenantGroupIdN) {
            $LocalVarQueryParameters['tenant_group_id__n'] = $TenantGroupIdN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Voltage) {
            $LocalVarQueryParameters['voltage'] = $Voltage
        }

        if ($VoltageEmpty) {
            $LocalVarQueryParameters['voltage__empty'] = $VoltageEmpty
        }

        if ($VoltageGt) {
            $LocalVarQueryParameters['voltage__gt'] = $VoltageGt
        }

        if ($VoltageGte) {
            $LocalVarQueryParameters['voltage__gte'] = $VoltageGte
        }

        if ($VoltageLt) {
            $LocalVarQueryParameters['voltage__lt'] = $VoltageLt
        }

        if ($VoltageLte) {
            $LocalVarQueryParameters['voltage__lte'] = $VoltageLte
        }

        if ($VoltageN) {
            $LocalVarQueryParameters['voltage__n'] = $VoltageN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedPowerFeedList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power feed.

.PARAMETER PatchedWritablePowerFeedRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerFeed
#>
function Invoke-DcimPowerFeedsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritablePowerFeedRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerFeedsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-feeds/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerFeedsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritablePowerFeedRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerFeed" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power feed.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerFeed
#>
function Invoke-DcimPowerFeedsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerFeedsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-feeds/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerFeedsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerFeed" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power feed.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerFeed
#>
function Invoke-DcimPowerFeedsTraceRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerFeedsTraceRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-feeds/{id}/trace/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerFeedsTraceRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerFeed" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power feed.

.PARAMETER WritablePowerFeedRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerFeed
#>
function Invoke-DcimPowerFeedsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerFeedRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerFeedsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-feeds/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerFeedsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritablePowerFeedRequest) {
            throw "Error! The required parameter `WritablePowerFeedRequest` missing when calling dcimPowerFeedsUpdate."
        }

        $LocalVarBodyParameter = $WritablePowerFeedRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerFeed" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerOutletTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerOutletTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerOutletTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlet-templates/'

        if (!$PowerOutletTemplateRequest) {
            throw "Error! The required parameter `PowerOutletTemplateRequest` missing when calling dcimPowerOutletTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $PowerOutletTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerOutletTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutletTemplate[]
#>
function Invoke-DcimPowerOutletTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerOutletTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlet-templates/'

        if (!$PowerOutletTemplateRequest) {
            throw "Error! The required parameter `PowerOutletTemplateRequest` missing when calling dcimPowerOutletTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $PowerOutletTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutletTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerOutletTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutletTemplate[]
#>
function Invoke-DcimPowerOutletTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerOutletTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlet-templates/'

        if (!$PowerOutletTemplateRequest) {
            throw "Error! The required parameter `PowerOutletTemplateRequest` missing when calling dcimPowerOutletTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $PowerOutletTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutletTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritablePowerOutletTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutletTemplate
#>
function Invoke-DcimPowerOutletTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerOutletTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlet-templates/'

        if (!$WritablePowerOutletTemplateRequest) {
            throw "Error! The required parameter `WritablePowerOutletTemplateRequest` missing when calling dcimPowerOutletTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritablePowerOutletTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutletTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power outlet template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerOutletTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/power-outlet-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerOutletTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DevicetypeId
Device type (ID)

.PARAMETER DevicetypeIdN
Device type (ID)

.PARAMETER FeedLeg
Phase (for three-phase feeds)

.PARAMETER FeedLegN
Phase (for three-phase feeds)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuletypeId
Module type (ID)

.PARAMETER ModuletypeIdN
Module type (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedPowerOutletTemplateList
#>
function Invoke-DcimPowerOutletTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeIdN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FeedLeg},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FeedLegN},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeId},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeIdN},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TypeN},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-outlet-templates/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DevicetypeId) {
            $LocalVarQueryParameters['devicetype_id'] = $DevicetypeId
        }

        if ($DevicetypeIdN) {
            $LocalVarQueryParameters['devicetype_id__n'] = $DevicetypeIdN
        }

        if ($FeedLeg) {
            $LocalVarQueryParameters['feed_leg'] = $FeedLeg
        }

        if ($FeedLegN) {
            $LocalVarQueryParameters['feed_leg__n'] = $FeedLegN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuletypeId) {
            $LocalVarQueryParameters['moduletype_id'] = $ModuletypeId
        }

        if ($ModuletypeIdN) {
            $LocalVarQueryParameters['moduletype_id__n'] = $ModuletypeIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedPowerOutletTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power outlet template.

.PARAMETER PatchedWritablePowerOutletTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutletTemplate
#>
function Invoke-DcimPowerOutletTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritablePowerOutletTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlet-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerOutletTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritablePowerOutletTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutletTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power outlet template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutletTemplate
#>
function Invoke-DcimPowerOutletTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-outlet-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerOutletTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutletTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power outlet template.

.PARAMETER WritablePowerOutletTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutletTemplate
#>
function Invoke-DcimPowerOutletTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerOutletTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlet-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerOutletTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritablePowerOutletTemplateRequest) {
            throw "Error! The required parameter `WritablePowerOutletTemplateRequest` missing when calling dcimPowerOutletTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritablePowerOutletTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutletTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerOutletRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerOutletsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerOutletRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlets/'

        if (!$PowerOutletRequest) {
            throw "Error! The required parameter `PowerOutletRequest` missing when calling dcimPowerOutletsBulkDestroy."
        }

        $LocalVarBodyParameter = $PowerOutletRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerOutletRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutlet[]
#>
function Invoke-DcimPowerOutletsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerOutletRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlets/'

        if (!$PowerOutletRequest) {
            throw "Error! The required parameter `PowerOutletRequest` missing when calling dcimPowerOutletsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $PowerOutletRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutlet[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerOutletRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutlet[]
#>
function Invoke-DcimPowerOutletsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerOutletRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlets/'

        if (!$PowerOutletRequest) {
            throw "Error! The required parameter `PowerOutletRequest` missing when calling dcimPowerOutletsBulkUpdate."
        }

        $LocalVarBodyParameter = $PowerOutletRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutlet[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritablePowerOutletRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutlet
#>
function Invoke-DcimPowerOutletsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerOutletRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlets/'

        if (!$WritablePowerOutletRequest) {
            throw "Error! The required parameter `WritablePowerOutletRequest` missing when calling dcimPowerOutletsCreate."
        }

        $LocalVarBodyParameter = $WritablePowerOutletRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutlet" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power outlet.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerOutletsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/power-outlets/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerOutletsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableEnd
No description available.

.PARAMETER CableEndN
No description available.

.PARAMETER Cabled
No description available.

.PARAMETER Connected
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Device
Device (name)

.PARAMETER DeviceN
Device (name)

.PARAMETER DeviceId
Device (ID)

.PARAMETER DeviceIdN
Device (ID)

.PARAMETER DeviceRole
Device role (slug)

.PARAMETER DeviceRoleN
Device role (slug)

.PARAMETER DeviceRoleId
Device role (ID)

.PARAMETER DeviceRoleIdN
Device role (ID)

.PARAMETER DeviceType
Device type (model)

.PARAMETER DeviceTypeN
Device type (model)

.PARAMETER DeviceTypeId
Device type (ID)

.PARAMETER DeviceTypeIdN
Device type (ID)

.PARAMETER FeedLeg
Phase (for three-phase feeds)

.PARAMETER FeedLegN
Phase (for three-phase feeds)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuleId
Module (ID)

.PARAMETER ModuleIdN
Module (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Occupied
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Rack
Rack (name)

.PARAMETER RackN
Rack (name)

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Role
Device role (slug)

.PARAMETER RoleN
Device role (slug)

.PARAMETER RoleId
Device role (ID)

.PARAMETER RoleIdN
Device role (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Type
Physical port type

.PARAMETER TypeN
Physical port type

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VirtualChassis
Virtual Chassis

.PARAMETER VirtualChassisN
Virtual Chassis

.PARAMETER VirtualChassisId
Virtual Chassis (ID)

.PARAMETER VirtualChassisIdN
Virtual Chassis (ID)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedPowerOutletList
#>
function Invoke-DcimPowerOutletsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEnd},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEndN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Cabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Connected},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Device},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceN},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRole},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRoleN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleId},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleIdN},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceType},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceTypeN},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FeedLeg},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FeedLegN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LocationN},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleId},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleIdN},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Occupied},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Rack},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RackN},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassis},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassisN},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisId},
        [Parameter(Position = 113, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-outlets/'

        if ($CableEnd) {
            $LocalVarQueryParameters['cable_end'] = $CableEnd
        }

        if ($CableEndN) {
            $LocalVarQueryParameters['cable_end__n'] = $CableEndN
        }

        if ($Cabled) {
            $LocalVarQueryParameters['cabled'] = $Cabled
        }

        if ($Connected) {
            $LocalVarQueryParameters['connected'] = $Connected
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceN) {
            $LocalVarQueryParameters['device__n'] = $DeviceN
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($DeviceRole) {
            $LocalVarQueryParameters['device_role'] = $DeviceRole
        }

        if ($DeviceRoleN) {
            $LocalVarQueryParameters['device_role__n'] = $DeviceRoleN
        }

        if ($DeviceRoleId) {
            $LocalVarQueryParameters['device_role_id'] = $DeviceRoleId
        }

        if ($DeviceRoleIdN) {
            $LocalVarQueryParameters['device_role_id__n'] = $DeviceRoleIdN
        }

        if ($DeviceType) {
            $LocalVarQueryParameters['device_type'] = $DeviceType
        }

        if ($DeviceTypeN) {
            $LocalVarQueryParameters['device_type__n'] = $DeviceTypeN
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($FeedLeg) {
            $LocalVarQueryParameters['feed_leg'] = $FeedLeg
        }

        if ($FeedLegN) {
            $LocalVarQueryParameters['feed_leg__n'] = $FeedLegN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuleId) {
            $LocalVarQueryParameters['module_id'] = $ModuleId
        }

        if ($ModuleIdN) {
            $LocalVarQueryParameters['module_id__n'] = $ModuleIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Occupied) {
            $LocalVarQueryParameters['occupied'] = $Occupied
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Rack) {
            $LocalVarQueryParameters['rack'] = $Rack
        }

        if ($RackN) {
            $LocalVarQueryParameters['rack__n'] = $RackN
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VirtualChassis) {
            $LocalVarQueryParameters['virtual_chassis'] = $VirtualChassis
        }

        if ($VirtualChassisN) {
            $LocalVarQueryParameters['virtual_chassis__n'] = $VirtualChassisN
        }

        if ($VirtualChassisId) {
            $LocalVarQueryParameters['virtual_chassis_id'] = $VirtualChassisId
        }

        if ($VirtualChassisIdN) {
            $LocalVarQueryParameters['virtual_chassis_id__n'] = $VirtualChassisIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedPowerOutletList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power outlet.

.PARAMETER PatchedWritablePowerOutletRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutlet
#>
function Invoke-DcimPowerOutletsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritablePowerOutletRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlets/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerOutletsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritablePowerOutletRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutlet" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power outlet.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutlet
#>
function Invoke-DcimPowerOutletsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-outlets/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerOutletsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutlet" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power outlet.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutlet
#>
function Invoke-DcimPowerOutletsTraceRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletsTraceRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-outlets/{id}/trace/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerOutletsTraceRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutlet" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power outlet.

.PARAMETER WritablePowerOutletRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerOutlet
#>
function Invoke-DcimPowerOutletsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerOutletRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerOutletsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-outlets/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerOutletsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritablePowerOutletRequest) {
            throw "Error! The required parameter `WritablePowerOutletRequest` missing when calling dcimPowerOutletsUpdate."
        }

        $LocalVarBodyParameter = $WritablePowerOutletRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerOutlet" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerPanelRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerPanelsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerPanelRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPanelsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-panels/'

        if (!$PowerPanelRequest) {
            throw "Error! The required parameter `PowerPanelRequest` missing when calling dcimPowerPanelsBulkDestroy."
        }

        $LocalVarBodyParameter = $PowerPanelRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerPanelRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPanel[]
#>
function Invoke-DcimPowerPanelsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerPanelRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPanelsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-panels/'

        if (!$PowerPanelRequest) {
            throw "Error! The required parameter `PowerPanelRequest` missing when calling dcimPowerPanelsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $PowerPanelRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPanel[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerPanelRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPanel[]
#>
function Invoke-DcimPowerPanelsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerPanelRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPanelsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-panels/'

        if (!$PowerPanelRequest) {
            throw "Error! The required parameter `PowerPanelRequest` missing when calling dcimPowerPanelsBulkUpdate."
        }

        $LocalVarBodyParameter = $PowerPanelRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPanel[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritablePowerPanelRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPanel
#>
function Invoke-DcimPowerPanelsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerPanelRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPanelsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-panels/'

        if (!$WritablePowerPanelRequest) {
            throw "Error! The required parameter `WritablePowerPanelRequest` missing when calling dcimPowerPanelsCreate."
        }

        $LocalVarBodyParameter = $WritablePowerPanelRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPanel" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power panel.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerPanelsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPanelsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/power-panels/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPanelsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Contact
Contact

.PARAMETER ContactN
Contact

.PARAMETER ContactGroup
Contact group

.PARAMETER ContactGroupN
Contact group

.PARAMETER ContactRole
Contact Role

.PARAMETER ContactRoleN
Contact Role

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedPowerPanelList
#>
function Invoke-DcimPowerPanelsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Contact},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroup},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroupN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRole},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRoleN},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPanelsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-panels/'

        if ($Contact) {
            $LocalVarQueryParameters['contact'] = $Contact
        }

        if ($ContactN) {
            $LocalVarQueryParameters['contact__n'] = $ContactN
        }

        if ($ContactGroup) {
            $LocalVarQueryParameters['contact_group'] = $ContactGroup
        }

        if ($ContactGroupN) {
            $LocalVarQueryParameters['contact_group__n'] = $ContactGroupN
        }

        if ($ContactRole) {
            $LocalVarQueryParameters['contact_role'] = $ContactRole
        }

        if ($ContactRoleN) {
            $LocalVarQueryParameters['contact_role__n'] = $ContactRoleN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedPowerPanelList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power panel.

.PARAMETER PatchedWritablePowerPanelRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPanel
#>
function Invoke-DcimPowerPanelsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritablePowerPanelRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPanelsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-panels/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPanelsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritablePowerPanelRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPanel" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power panel.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPanel
#>
function Invoke-DcimPowerPanelsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPanelsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-panels/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPanelsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPanel" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power panel.

.PARAMETER WritablePowerPanelRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPanel
#>
function Invoke-DcimPowerPanelsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerPanelRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPanelsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-panels/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPanelsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritablePowerPanelRequest) {
            throw "Error! The required parameter `WritablePowerPanelRequest` missing when calling dcimPowerPanelsUpdate."
        }

        $LocalVarBodyParameter = $WritablePowerPanelRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPanel" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerPortTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-port-templates/'

        if (!$PowerPortTemplateRequest) {
            throw "Error! The required parameter `PowerPortTemplateRequest` missing when calling dcimPowerPortTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $PowerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPortTemplate[]
#>
function Invoke-DcimPowerPortTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-port-templates/'

        if (!$PowerPortTemplateRequest) {
            throw "Error! The required parameter `PowerPortTemplateRequest` missing when calling dcimPowerPortTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $PowerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPortTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPortTemplate[]
#>
function Invoke-DcimPowerPortTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-port-templates/'

        if (!$PowerPortTemplateRequest) {
            throw "Error! The required parameter `PowerPortTemplateRequest` missing when calling dcimPowerPortTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $PowerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPortTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritablePowerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPortTemplate
#>
function Invoke-DcimPowerPortTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-port-templates/'

        if (!$WritablePowerPortTemplateRequest) {
            throw "Error! The required parameter `WritablePowerPortTemplateRequest` missing when calling dcimPowerPortTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritablePowerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power port template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerPortTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/power-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPortTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AllocatedDraw
No description available.

.PARAMETER AllocatedDrawEmpty
No description available.

.PARAMETER AllocatedDrawGt
No description available.

.PARAMETER AllocatedDrawGte
No description available.

.PARAMETER AllocatedDrawLt
No description available.

.PARAMETER AllocatedDrawLte
No description available.

.PARAMETER AllocatedDrawN
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DevicetypeId
Device type (ID)

.PARAMETER DevicetypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER MaximumDraw
No description available.

.PARAMETER MaximumDrawEmpty
No description available.

.PARAMETER MaximumDrawGt
No description available.

.PARAMETER MaximumDrawGte
No description available.

.PARAMETER MaximumDrawLt
No description available.

.PARAMETER MaximumDrawLte
No description available.

.PARAMETER MaximumDrawN
No description available.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuletypeId
Module type (ID)

.PARAMETER ModuletypeIdN
Module type (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedPowerPortTemplateList
#>
function Invoke-DcimPowerPortTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDraw},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AllocatedDrawEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDrawGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDrawGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDrawLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDrawLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDrawN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeId},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeIdN},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDraw},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${MaximumDrawEmpty},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDrawGt},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDrawGte},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDrawLt},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDrawLte},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDrawN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeId},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeIdN},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Type},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${TypeN},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-port-templates/'

        if ($AllocatedDraw) {
            $LocalVarQueryParameters['allocated_draw'] = $AllocatedDraw
        }

        if ($AllocatedDrawEmpty) {
            $LocalVarQueryParameters['allocated_draw__empty'] = $AllocatedDrawEmpty
        }

        if ($AllocatedDrawGt) {
            $LocalVarQueryParameters['allocated_draw__gt'] = $AllocatedDrawGt
        }

        if ($AllocatedDrawGte) {
            $LocalVarQueryParameters['allocated_draw__gte'] = $AllocatedDrawGte
        }

        if ($AllocatedDrawLt) {
            $LocalVarQueryParameters['allocated_draw__lt'] = $AllocatedDrawLt
        }

        if ($AllocatedDrawLte) {
            $LocalVarQueryParameters['allocated_draw__lte'] = $AllocatedDrawLte
        }

        if ($AllocatedDrawN) {
            $LocalVarQueryParameters['allocated_draw__n'] = $AllocatedDrawN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DevicetypeId) {
            $LocalVarQueryParameters['devicetype_id'] = $DevicetypeId
        }

        if ($DevicetypeIdN) {
            $LocalVarQueryParameters['devicetype_id__n'] = $DevicetypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($MaximumDraw) {
            $LocalVarQueryParameters['maximum_draw'] = $MaximumDraw
        }

        if ($MaximumDrawEmpty) {
            $LocalVarQueryParameters['maximum_draw__empty'] = $MaximumDrawEmpty
        }

        if ($MaximumDrawGt) {
            $LocalVarQueryParameters['maximum_draw__gt'] = $MaximumDrawGt
        }

        if ($MaximumDrawGte) {
            $LocalVarQueryParameters['maximum_draw__gte'] = $MaximumDrawGte
        }

        if ($MaximumDrawLt) {
            $LocalVarQueryParameters['maximum_draw__lt'] = $MaximumDrawLt
        }

        if ($MaximumDrawLte) {
            $LocalVarQueryParameters['maximum_draw__lte'] = $MaximumDrawLte
        }

        if ($MaximumDrawN) {
            $LocalVarQueryParameters['maximum_draw__n'] = $MaximumDrawN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuletypeId) {
            $LocalVarQueryParameters['moduletype_id'] = $ModuletypeId
        }

        if ($ModuletypeIdN) {
            $LocalVarQueryParameters['moduletype_id__n'] = $ModuletypeIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedPowerPortTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power port template.

.PARAMETER PatchedWritablePowerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPortTemplate
#>
function Invoke-DcimPowerPortTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritablePowerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPortTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritablePowerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power port template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPortTemplate
#>
function Invoke-DcimPowerPortTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPortTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power port template.

.PARAMETER WritablePowerPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPortTemplate
#>
function Invoke-DcimPowerPortTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPortTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritablePowerPortTemplateRequest) {
            throw "Error! The required parameter `WritablePowerPortTemplateRequest` missing when calling dcimPowerPortTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritablePowerPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerPortsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-ports/'

        if (!$PowerPortRequest) {
            throw "Error! The required parameter `PowerPortRequest` missing when calling dcimPowerPortsBulkDestroy."
        }

        $LocalVarBodyParameter = $PowerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPort[]
#>
function Invoke-DcimPowerPortsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-ports/'

        if (!$PowerPortRequest) {
            throw "Error! The required parameter `PowerPortRequest` missing when calling dcimPowerPortsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $PowerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPort[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PowerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPort[]
#>
function Invoke-DcimPowerPortsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${PowerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-ports/'

        if (!$PowerPortRequest) {
            throw "Error! The required parameter `PowerPortRequest` missing when calling dcimPowerPortsBulkUpdate."
        }

        $LocalVarBodyParameter = $PowerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPort[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritablePowerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPort
#>
function Invoke-DcimPowerPortsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-ports/'

        if (!$WritablePowerPortRequest) {
            throw "Error! The required parameter `WritablePowerPortRequest` missing when calling dcimPowerPortsCreate."
        }

        $LocalVarBodyParameter = $WritablePowerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimPowerPortsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/power-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPortsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AllocatedDraw
No description available.

.PARAMETER AllocatedDrawEmpty
No description available.

.PARAMETER AllocatedDrawGt
No description available.

.PARAMETER AllocatedDrawGte
No description available.

.PARAMETER AllocatedDrawLt
No description available.

.PARAMETER AllocatedDrawLte
No description available.

.PARAMETER AllocatedDrawN
No description available.

.PARAMETER CableEnd
No description available.

.PARAMETER CableEndN
No description available.

.PARAMETER Cabled
No description available.

.PARAMETER Connected
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Device
Device (name)

.PARAMETER DeviceN
Device (name)

.PARAMETER DeviceId
Device (ID)

.PARAMETER DeviceIdN
Device (ID)

.PARAMETER DeviceRole
Device role (slug)

.PARAMETER DeviceRoleN
Device role (slug)

.PARAMETER DeviceRoleId
Device role (ID)

.PARAMETER DeviceRoleIdN
Device role (ID)

.PARAMETER DeviceType
Device type (model)

.PARAMETER DeviceTypeN
Device type (model)

.PARAMETER DeviceTypeId
Device type (ID)

.PARAMETER DeviceTypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER MaximumDraw
No description available.

.PARAMETER MaximumDrawEmpty
No description available.

.PARAMETER MaximumDrawGt
No description available.

.PARAMETER MaximumDrawGte
No description available.

.PARAMETER MaximumDrawLt
No description available.

.PARAMETER MaximumDrawLte
No description available.

.PARAMETER MaximumDrawN
No description available.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuleId
Module (ID)

.PARAMETER ModuleIdN
Module (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Occupied
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Rack
Rack (name)

.PARAMETER RackN
Rack (name)

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Role
Device role (slug)

.PARAMETER RoleN
Device role (slug)

.PARAMETER RoleId
Device role (ID)

.PARAMETER RoleIdN
Device role (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Type
Physical port type

.PARAMETER TypeN
Physical port type

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VirtualChassis
Virtual Chassis

.PARAMETER VirtualChassisN
Virtual Chassis

.PARAMETER VirtualChassisId
Virtual Chassis (ID)

.PARAMETER VirtualChassisIdN
Virtual Chassis (ID)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedPowerPortList
#>
function Invoke-DcimPowerPortsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDraw},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AllocatedDrawEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDrawGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDrawGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDrawLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDrawLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AllocatedDrawN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEnd},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEndN},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Cabled},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Connected},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Device},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRole},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRoleN},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleId},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleIdN},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceType},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceTypeN},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LocationN},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDraw},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${MaximumDrawEmpty},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDrawGt},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDrawGte},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDrawLt},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDrawLte},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaximumDrawN},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleId},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleIdN},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Occupied},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Rack},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RackN},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 113, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 114, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 115, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 116, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 117, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 118, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 119, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 120, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 121, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 122, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassis},
        [Parameter(Position = 123, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassisN},
        [Parameter(Position = 124, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisId},
        [Parameter(Position = 125, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-ports/'

        if ($AllocatedDraw) {
            $LocalVarQueryParameters['allocated_draw'] = $AllocatedDraw
        }

        if ($AllocatedDrawEmpty) {
            $LocalVarQueryParameters['allocated_draw__empty'] = $AllocatedDrawEmpty
        }

        if ($AllocatedDrawGt) {
            $LocalVarQueryParameters['allocated_draw__gt'] = $AllocatedDrawGt
        }

        if ($AllocatedDrawGte) {
            $LocalVarQueryParameters['allocated_draw__gte'] = $AllocatedDrawGte
        }

        if ($AllocatedDrawLt) {
            $LocalVarQueryParameters['allocated_draw__lt'] = $AllocatedDrawLt
        }

        if ($AllocatedDrawLte) {
            $LocalVarQueryParameters['allocated_draw__lte'] = $AllocatedDrawLte
        }

        if ($AllocatedDrawN) {
            $LocalVarQueryParameters['allocated_draw__n'] = $AllocatedDrawN
        }

        if ($CableEnd) {
            $LocalVarQueryParameters['cable_end'] = $CableEnd
        }

        if ($CableEndN) {
            $LocalVarQueryParameters['cable_end__n'] = $CableEndN
        }

        if ($Cabled) {
            $LocalVarQueryParameters['cabled'] = $Cabled
        }

        if ($Connected) {
            $LocalVarQueryParameters['connected'] = $Connected
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceN) {
            $LocalVarQueryParameters['device__n'] = $DeviceN
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($DeviceRole) {
            $LocalVarQueryParameters['device_role'] = $DeviceRole
        }

        if ($DeviceRoleN) {
            $LocalVarQueryParameters['device_role__n'] = $DeviceRoleN
        }

        if ($DeviceRoleId) {
            $LocalVarQueryParameters['device_role_id'] = $DeviceRoleId
        }

        if ($DeviceRoleIdN) {
            $LocalVarQueryParameters['device_role_id__n'] = $DeviceRoleIdN
        }

        if ($DeviceType) {
            $LocalVarQueryParameters['device_type'] = $DeviceType
        }

        if ($DeviceTypeN) {
            $LocalVarQueryParameters['device_type__n'] = $DeviceTypeN
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($MaximumDraw) {
            $LocalVarQueryParameters['maximum_draw'] = $MaximumDraw
        }

        if ($MaximumDrawEmpty) {
            $LocalVarQueryParameters['maximum_draw__empty'] = $MaximumDrawEmpty
        }

        if ($MaximumDrawGt) {
            $LocalVarQueryParameters['maximum_draw__gt'] = $MaximumDrawGt
        }

        if ($MaximumDrawGte) {
            $LocalVarQueryParameters['maximum_draw__gte'] = $MaximumDrawGte
        }

        if ($MaximumDrawLt) {
            $LocalVarQueryParameters['maximum_draw__lt'] = $MaximumDrawLt
        }

        if ($MaximumDrawLte) {
            $LocalVarQueryParameters['maximum_draw__lte'] = $MaximumDrawLte
        }

        if ($MaximumDrawN) {
            $LocalVarQueryParameters['maximum_draw__n'] = $MaximumDrawN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuleId) {
            $LocalVarQueryParameters['module_id'] = $ModuleId
        }

        if ($ModuleIdN) {
            $LocalVarQueryParameters['module_id__n'] = $ModuleIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Occupied) {
            $LocalVarQueryParameters['occupied'] = $Occupied
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Rack) {
            $LocalVarQueryParameters['rack'] = $Rack
        }

        if ($RackN) {
            $LocalVarQueryParameters['rack__n'] = $RackN
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VirtualChassis) {
            $LocalVarQueryParameters['virtual_chassis'] = $VirtualChassis
        }

        if ($VirtualChassisN) {
            $LocalVarQueryParameters['virtual_chassis__n'] = $VirtualChassisN
        }

        if ($VirtualChassisId) {
            $LocalVarQueryParameters['virtual_chassis_id'] = $VirtualChassisId
        }

        if ($VirtualChassisIdN) {
            $LocalVarQueryParameters['virtual_chassis_id__n'] = $VirtualChassisIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedPowerPortList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power port.

.PARAMETER PatchedWritablePowerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPort
#>
function Invoke-DcimPowerPortsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritablePowerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPortsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritablePowerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPort
#>
function Invoke-DcimPowerPortsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPortsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPort
#>
function Invoke-DcimPowerPortsTraceRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortsTraceRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/power-ports/{id}/trace/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPortsTraceRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this power port.

.PARAMETER WritablePowerPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PowerPort
#>
function Invoke-DcimPowerPortsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritablePowerPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimPowerPortsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/power-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimPowerPortsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritablePowerPortRequest) {
            throw "Error! The required parameter `WritablePowerPortRequest` missing when calling dcimPowerPortsUpdate."
        }

        $LocalVarBodyParameter = $WritablePowerPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PowerPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RackReservationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRackReservationsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RackReservationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackReservationsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-reservations/'

        if (!$RackReservationRequest) {
            throw "Error! The required parameter `RackReservationRequest` missing when calling dcimRackReservationsBulkDestroy."
        }

        $LocalVarBodyParameter = $RackReservationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RackReservationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackReservation[]
#>
function Invoke-DcimRackReservationsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RackReservationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackReservationsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-reservations/'

        if (!$RackReservationRequest) {
            throw "Error! The required parameter `RackReservationRequest` missing when calling dcimRackReservationsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $RackReservationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackReservation[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RackReservationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackReservation[]
#>
function Invoke-DcimRackReservationsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RackReservationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackReservationsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-reservations/'

        if (!$RackReservationRequest) {
            throw "Error! The required parameter `RackReservationRequest` missing when calling dcimRackReservationsBulkUpdate."
        }

        $LocalVarBodyParameter = $RackReservationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackReservation[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableRackReservationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackReservation
#>
function Invoke-DcimRackReservationsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableRackReservationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackReservationsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-reservations/'

        if (!$WritableRackReservationRequest) {
            throw "Error! The required parameter `WritableRackReservationRequest` missing when calling dcimRackReservationsCreate."
        }

        $LocalVarBodyParameter = $WritableRackReservationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackReservation" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack reservation.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRackReservationsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackReservationsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/rack-reservations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRackReservationsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Site
Site (slug)

.PARAMETER SiteN
Site (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantGroup
Tenant Group (slug)

.PARAMETER TenantGroupN
Tenant Group (slug)

.PARAMETER TenantGroupId
Tenant Group (ID)

.PARAMETER TenantGroupIdN
Tenant Group (ID)

.PARAMETER TenantId
Tenant (ID)

.PARAMETER TenantIdN
Tenant (ID)

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER User
User (name)

.PARAMETER UserN
User (name)

.PARAMETER UserId
User (ID)

.PARAMETER UserIdN
User (ID)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedRackReservationList
#>
function Invoke-DcimRackReservationsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Location},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationN},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroup},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupId},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupIdN},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${User},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserN},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UserId},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UserIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackReservationsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/rack-reservations/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantGroup) {
            $LocalVarQueryParameters['tenant_group'] = $TenantGroup
        }

        if ($TenantGroupN) {
            $LocalVarQueryParameters['tenant_group__n'] = $TenantGroupN
        }

        if ($TenantGroupId) {
            $LocalVarQueryParameters['tenant_group_id'] = $TenantGroupId
        }

        if ($TenantGroupIdN) {
            $LocalVarQueryParameters['tenant_group_id__n'] = $TenantGroupIdN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($User) {
            $LocalVarQueryParameters['user'] = $User
        }

        if ($UserN) {
            $LocalVarQueryParameters['user__n'] = $UserN
        }

        if ($UserId) {
            $LocalVarQueryParameters['user_id'] = $UserId
        }

        if ($UserIdN) {
            $LocalVarQueryParameters['user_id__n'] = $UserIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedRackReservationList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack reservation.

.PARAMETER PatchedWritableRackReservationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackReservation
#>
function Invoke-DcimRackReservationsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableRackReservationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackReservationsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-reservations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRackReservationsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableRackReservationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackReservation" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack reservation.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackReservation
#>
function Invoke-DcimRackReservationsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackReservationsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/rack-reservations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRackReservationsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackReservation" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack reservation.

.PARAMETER WritableRackReservationRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackReservation
#>
function Invoke-DcimRackReservationsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableRackReservationRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackReservationsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-reservations/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRackReservationsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableRackReservationRequest) {
            throw "Error! The required parameter `WritableRackReservationRequest` missing when calling dcimRackReservationsUpdate."
        }

        $LocalVarBodyParameter = $WritableRackReservationRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackReservation" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RackRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRackRolesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RackRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackRolesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-roles/'

        if (!$RackRoleRequest) {
            throw "Error! The required parameter `RackRoleRequest` missing when calling dcimRackRolesBulkDestroy."
        }

        $LocalVarBodyParameter = $RackRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RackRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackRole[]
#>
function Invoke-DcimRackRolesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RackRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackRolesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-roles/'

        if (!$RackRoleRequest) {
            throw "Error! The required parameter `RackRoleRequest` missing when calling dcimRackRolesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $RackRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackRole[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RackRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackRole[]
#>
function Invoke-DcimRackRolesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RackRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackRolesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-roles/'

        if (!$RackRoleRequest) {
            throw "Error! The required parameter `RackRoleRequest` missing when calling dcimRackRolesBulkUpdate."
        }

        $LocalVarBodyParameter = $RackRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackRole[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RackRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackRole
#>
function Invoke-DcimRackRolesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${RackRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackRolesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-roles/'

        if (!$RackRoleRequest) {
            throw "Error! The required parameter `RackRoleRequest` missing when calling dcimRackRolesCreate."
        }

        $LocalVarBodyParameter = $RackRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack role.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRackRolesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackRolesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/rack-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRackRolesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Color
No description available.

.PARAMETER ColorEmpty
No description available.

.PARAMETER ColorIc
No description available.

.PARAMETER ColorIe
No description available.

.PARAMETER ColorIew
No description available.

.PARAMETER ColorIsw
No description available.

.PARAMETER ColorN
No description available.

.PARAMETER ColorNic
No description available.

.PARAMETER ColorNie
No description available.

.PARAMETER ColorNiew
No description available.

.PARAMETER ColorNisw
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedRackRoleList
#>
function Invoke-DcimRackRolesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Color},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ColorEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIe},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIew},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIsw},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNie},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNiew},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNisw},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackRolesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/rack-roles/'

        if ($Color) {
            $LocalVarQueryParameters['color'] = $Color
        }

        if ($ColorEmpty) {
            $LocalVarQueryParameters['color__empty'] = $ColorEmpty
        }

        if ($ColorIc) {
            $LocalVarQueryParameters['color__ic'] = $ColorIc
        }

        if ($ColorIe) {
            $LocalVarQueryParameters['color__ie'] = $ColorIe
        }

        if ($ColorIew) {
            $LocalVarQueryParameters['color__iew'] = $ColorIew
        }

        if ($ColorIsw) {
            $LocalVarQueryParameters['color__isw'] = $ColorIsw
        }

        if ($ColorN) {
            $LocalVarQueryParameters['color__n'] = $ColorN
        }

        if ($ColorNic) {
            $LocalVarQueryParameters['color__nic'] = $ColorNic
        }

        if ($ColorNie) {
            $LocalVarQueryParameters['color__nie'] = $ColorNie
        }

        if ($ColorNiew) {
            $LocalVarQueryParameters['color__niew'] = $ColorNiew
        }

        if ($ColorNisw) {
            $LocalVarQueryParameters['color__nisw'] = $ColorNisw
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedRackRoleList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack role.

.PARAMETER PatchedRackRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackRole
#>
function Invoke-DcimRackRolesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedRackRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackRolesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRackRolesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedRackRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack role.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackRole
#>
function Invoke-DcimRackRolesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackRolesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/rack-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRackRolesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack role.

.PARAMETER RackRoleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RackRole
#>
function Invoke-DcimRackRolesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${RackRoleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRackRolesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rack-roles/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRackRolesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$RackRoleRequest) {
            throw "Error! The required parameter `RackRoleRequest` missing when calling dcimRackRolesUpdate."
        }

        $LocalVarBodyParameter = $RackRoleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RackRole" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RackRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRacksBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RackRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRacksBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/racks/'

        if (!$RackRequest) {
            throw "Error! The required parameter `RackRequest` missing when calling dcimRacksBulkDestroy."
        }

        $LocalVarBodyParameter = $RackRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RackRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Rack[]
#>
function Invoke-DcimRacksBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RackRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRacksBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/racks/'

        if (!$RackRequest) {
            throw "Error! The required parameter `RackRequest` missing when calling dcimRacksBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $RackRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Rack[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RackRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Rack[]
#>
function Invoke-DcimRacksBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RackRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRacksBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/racks/'

        if (!$RackRequest) {
            throw "Error! The required parameter `RackRequest` missing when calling dcimRacksBulkUpdate."
        }

        $LocalVarBodyParameter = $RackRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Rack[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableRackRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Rack
#>
function Invoke-DcimRacksCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableRackRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRacksCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/racks/'

        if (!$WritableRackRequest) {
            throw "Error! The required parameter `WritableRackRequest` missing when calling dcimRacksCreate."
        }

        $LocalVarBodyParameter = $WritableRackRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Rack" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRacksDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRacksDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/racks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRacksDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack.

.PARAMETER Exclude
No description available.

.PARAMETER ExpandDevices
No description available.

.PARAMETER Face
* `front` - Front * `rear` - Rear

.PARAMETER IncludeImages
No description available.

.PARAMETER LegendWidth
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER MarginWidth
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Q
No description available.

.PARAMETER Render
* `json` - json * `svg` - svg

.PARAMETER UnitHeight
No description available.

.PARAMETER UnitWidth
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedRackUnitList
#>
function Invoke-DcimRacksElevationRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Exclude},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ExpandDevices},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("front", "rear")]
        [String]
        ${Face},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IncludeImages},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${LegendWidth},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${MarginWidth},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("json", "svg")]
        [String]
        ${Render},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${UnitHeight},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${UnitWidth},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRacksElevationRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/racks/{id}/elevation/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRacksElevationRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Exclude) {
            $LocalVarQueryParameters['exclude'] = $Exclude
        }

        if ($ExpandDevices) {
            $LocalVarQueryParameters['expand_devices'] = $ExpandDevices
        }

        if ($Face) {
            $LocalVarQueryParameters['face'] = $Face
        }

        if ($IncludeImages) {
            $LocalVarQueryParameters['include_images'] = $IncludeImages
        }

        if ($LegendWidth) {
            $LocalVarQueryParameters['legend_width'] = $LegendWidth
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($MarginWidth) {
            $LocalVarQueryParameters['margin_width'] = $MarginWidth
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Render) {
            $LocalVarQueryParameters['render'] = $Render
        }

        if ($UnitHeight) {
            $LocalVarQueryParameters['unit_height'] = $UnitHeight
        }

        if ($UnitWidth) {
            $LocalVarQueryParameters['unit_width'] = $UnitWidth
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedRackUnitList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssetTag
No description available.

.PARAMETER AssetTagEmpty
No description available.

.PARAMETER AssetTagIc
No description available.

.PARAMETER AssetTagIe
No description available.

.PARAMETER AssetTagIew
No description available.

.PARAMETER AssetTagIsw
No description available.

.PARAMETER AssetTagN
No description available.

.PARAMETER AssetTagNic
No description available.

.PARAMETER AssetTagNie
No description available.

.PARAMETER AssetTagNiew
No description available.

.PARAMETER AssetTagNisw
No description available.

.PARAMETER Contact
Contact

.PARAMETER ContactN
Contact

.PARAMETER ContactGroup
Contact group

.PARAMETER ContactGroupN
Contact group

.PARAMETER ContactRole
Contact Role

.PARAMETER ContactRoleN
Contact Role

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER DescUnits
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER FacilityId
No description available.

.PARAMETER FacilityIdEmpty
No description available.

.PARAMETER FacilityIdIc
No description available.

.PARAMETER FacilityIdIe
No description available.

.PARAMETER FacilityIdIew
No description available.

.PARAMETER FacilityIdIsw
No description available.

.PARAMETER FacilityIdN
No description available.

.PARAMETER FacilityIdNic
No description available.

.PARAMETER FacilityIdNie
No description available.

.PARAMETER FacilityIdNiew
No description available.

.PARAMETER FacilityIdNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER MaxWeight
No description available.

.PARAMETER MaxWeightEmpty
No description available.

.PARAMETER MaxWeightGt
No description available.

.PARAMETER MaxWeightGte
No description available.

.PARAMETER MaxWeightLt
No description available.

.PARAMETER MaxWeightLte
No description available.

.PARAMETER MaxWeightN
No description available.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER MountingDepth
No description available.

.PARAMETER MountingDepthEmpty
No description available.

.PARAMETER MountingDepthGt
No description available.

.PARAMETER MountingDepthGte
No description available.

.PARAMETER MountingDepthLt
No description available.

.PARAMETER MountingDepthLte
No description available.

.PARAMETER MountingDepthN
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER OuterDepth
No description available.

.PARAMETER OuterDepthEmpty
No description available.

.PARAMETER OuterDepthGt
No description available.

.PARAMETER OuterDepthGte
No description available.

.PARAMETER OuterDepthLt
No description available.

.PARAMETER OuterDepthLte
No description available.

.PARAMETER OuterDepthN
No description available.

.PARAMETER OuterUnit
No description available.

.PARAMETER OuterUnitN
No description available.

.PARAMETER OuterWidth
No description available.

.PARAMETER OuterWidthEmpty
No description available.

.PARAMETER OuterWidthGt
No description available.

.PARAMETER OuterWidthGte
No description available.

.PARAMETER OuterWidthLt
No description available.

.PARAMETER OuterWidthLte
No description available.

.PARAMETER OuterWidthN
No description available.

.PARAMETER Q
Search

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Role
Role (slug)

.PARAMETER RoleN
Role (slug)

.PARAMETER RoleId
Role (ID)

.PARAMETER RoleIdN
Role (ID)

.PARAMETER Serial
No description available.

.PARAMETER SerialEmpty
No description available.

.PARAMETER SerialIc
No description available.

.PARAMETER SerialIe
No description available.

.PARAMETER SerialIew
No description available.

.PARAMETER SerialIsw
No description available.

.PARAMETER SerialN
No description available.

.PARAMETER SerialNic
No description available.

.PARAMETER SerialNie
No description available.

.PARAMETER SerialNiew
No description available.

.PARAMETER SerialNisw
No description available.

.PARAMETER Site
Site (slug)

.PARAMETER SiteN
Site (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER StartingUnit
No description available.

.PARAMETER StartingUnitEmpty
No description available.

.PARAMETER StartingUnitGt
No description available.

.PARAMETER StartingUnitGte
No description available.

.PARAMETER StartingUnitLt
No description available.

.PARAMETER StartingUnitLte
No description available.

.PARAMETER StartingUnitN
No description available.

.PARAMETER Status
No description available.

.PARAMETER StatusN
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantGroup
Tenant Group (slug)

.PARAMETER TenantGroupN
Tenant Group (slug)

.PARAMETER TenantGroupId
Tenant Group (ID)

.PARAMETER TenantGroupIdN
Tenant Group (ID)

.PARAMETER TenantId
Tenant (ID)

.PARAMETER TenantIdN
Tenant (ID)

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UHeight
No description available.

.PARAMETER UHeightEmpty
No description available.

.PARAMETER UHeightGt
No description available.

.PARAMETER UHeightGte
No description available.

.PARAMETER UHeightLt
No description available.

.PARAMETER UHeightLte
No description available.

.PARAMETER UHeightN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER Weight
No description available.

.PARAMETER WeightEmpty
No description available.

.PARAMETER WeightGt
No description available.

.PARAMETER WeightGte
No description available.

.PARAMETER WeightLt
No description available.

.PARAMETER WeightLte
No description available.

.PARAMETER WeightN
No description available.

.PARAMETER WeightUnit
No description available.

.PARAMETER WeightUnitN
No description available.

.PARAMETER Width
Rail-to-rail width

.PARAMETER WidthN
Rail-to-rail width

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedRackList
#>
function Invoke-DcimRacksList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTag},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AssetTagEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIe},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIew},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagIsw},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNie},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNiew},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${AssetTagNisw},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Contact},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroup},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroupN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRole},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRoleN},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescUnits},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityId},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${FacilityIdEmpty},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIdIc},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIdIe},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIdIew},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIdIsw},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIdN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIdNic},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIdNie},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIdNiew},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIdNisw},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Location},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationN},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxWeight},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${MaxWeightEmpty},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxWeightGt},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxWeightGte},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxWeightLt},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxWeightLte},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MaxWeightN},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MountingDepth},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${MountingDepthEmpty},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MountingDepthGt},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MountingDepthGte},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MountingDepthLt},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MountingDepthLte},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MountingDepthN},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterDepth},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${OuterDepthEmpty},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterDepthGt},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterDepthGte},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterDepthLt},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterDepthLte},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterDepthN},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OuterUnit},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${OuterUnitN},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterWidth},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${OuterWidthEmpty},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterWidthGt},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterWidthGte},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterWidthLt},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterWidthLte},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${OuterWidthN},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 113, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 114, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 115, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 116, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 117, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 118, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 119, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 120, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Serial},
        [Parameter(Position = 121, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SerialEmpty},
        [Parameter(Position = 122, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIc},
        [Parameter(Position = 123, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIe},
        [Parameter(Position = 124, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIew},
        [Parameter(Position = 125, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialIsw},
        [Parameter(Position = 126, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialN},
        [Parameter(Position = 127, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNic},
        [Parameter(Position = 128, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNie},
        [Parameter(Position = 129, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNiew},
        [Parameter(Position = 130, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SerialNisw},
        [Parameter(Position = 131, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 132, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 133, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 134, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 135, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 136, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 137, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 138, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 139, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${StartingUnit},
        [Parameter(Position = 140, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${StartingUnitEmpty},
        [Parameter(Position = 141, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${StartingUnitGt},
        [Parameter(Position = 142, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${StartingUnitGte},
        [Parameter(Position = 143, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${StartingUnitLt},
        [Parameter(Position = 144, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${StartingUnitLte},
        [Parameter(Position = 145, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${StartingUnitN},
        [Parameter(Position = 146, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Status},
        [Parameter(Position = 147, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${StatusN},
        [Parameter(Position = 148, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 149, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 150, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 151, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 152, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroup},
        [Parameter(Position = 153, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupN},
        [Parameter(Position = 154, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupId},
        [Parameter(Position = 155, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupIdN},
        [Parameter(Position = 156, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 157, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 158, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 159, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 160, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UHeight},
        [Parameter(Position = 161, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${UHeightEmpty},
        [Parameter(Position = 162, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UHeightGt},
        [Parameter(Position = 163, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UHeightGte},
        [Parameter(Position = 164, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UHeightLt},
        [Parameter(Position = 165, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UHeightLte},
        [Parameter(Position = 166, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UHeightN},
        [Parameter(Position = 167, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 168, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${Weight},
        [Parameter(Position = 169, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${WeightEmpty},
        [Parameter(Position = 170, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightGt},
        [Parameter(Position = 171, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightGte},
        [Parameter(Position = 172, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightLt},
        [Parameter(Position = 173, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightLte},
        [Parameter(Position = 174, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${WeightN},
        [Parameter(Position = 175, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WeightUnit},
        [Parameter(Position = 176, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${WeightUnitN},
        [Parameter(Position = 177, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Width},
        [Parameter(Position = 178, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WidthN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRacksList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/racks/'

        if ($AssetTag) {
            $LocalVarQueryParameters['asset_tag'] = $AssetTag
        }

        if ($AssetTagEmpty) {
            $LocalVarQueryParameters['asset_tag__empty'] = $AssetTagEmpty
        }

        if ($AssetTagIc) {
            $LocalVarQueryParameters['asset_tag__ic'] = $AssetTagIc
        }

        if ($AssetTagIe) {
            $LocalVarQueryParameters['asset_tag__ie'] = $AssetTagIe
        }

        if ($AssetTagIew) {
            $LocalVarQueryParameters['asset_tag__iew'] = $AssetTagIew
        }

        if ($AssetTagIsw) {
            $LocalVarQueryParameters['asset_tag__isw'] = $AssetTagIsw
        }

        if ($AssetTagN) {
            $LocalVarQueryParameters['asset_tag__n'] = $AssetTagN
        }

        if ($AssetTagNic) {
            $LocalVarQueryParameters['asset_tag__nic'] = $AssetTagNic
        }

        if ($AssetTagNie) {
            $LocalVarQueryParameters['asset_tag__nie'] = $AssetTagNie
        }

        if ($AssetTagNiew) {
            $LocalVarQueryParameters['asset_tag__niew'] = $AssetTagNiew
        }

        if ($AssetTagNisw) {
            $LocalVarQueryParameters['asset_tag__nisw'] = $AssetTagNisw
        }

        if ($Contact) {
            $LocalVarQueryParameters['contact'] = $Contact
        }

        if ($ContactN) {
            $LocalVarQueryParameters['contact__n'] = $ContactN
        }

        if ($ContactGroup) {
            $LocalVarQueryParameters['contact_group'] = $ContactGroup
        }

        if ($ContactGroupN) {
            $LocalVarQueryParameters['contact_group__n'] = $ContactGroupN
        }

        if ($ContactRole) {
            $LocalVarQueryParameters['contact_role'] = $ContactRole
        }

        if ($ContactRoleN) {
            $LocalVarQueryParameters['contact_role__n'] = $ContactRoleN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($DescUnits) {
            $LocalVarQueryParameters['desc_units'] = $DescUnits
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($FacilityId) {
            $LocalVarQueryParameters['facility_id'] = $FacilityId
        }

        if ($FacilityIdEmpty) {
            $LocalVarQueryParameters['facility_id__empty'] = $FacilityIdEmpty
        }

        if ($FacilityIdIc) {
            $LocalVarQueryParameters['facility_id__ic'] = $FacilityIdIc
        }

        if ($FacilityIdIe) {
            $LocalVarQueryParameters['facility_id__ie'] = $FacilityIdIe
        }

        if ($FacilityIdIew) {
            $LocalVarQueryParameters['facility_id__iew'] = $FacilityIdIew
        }

        if ($FacilityIdIsw) {
            $LocalVarQueryParameters['facility_id__isw'] = $FacilityIdIsw
        }

        if ($FacilityIdN) {
            $LocalVarQueryParameters['facility_id__n'] = $FacilityIdN
        }

        if ($FacilityIdNic) {
            $LocalVarQueryParameters['facility_id__nic'] = $FacilityIdNic
        }

        if ($FacilityIdNie) {
            $LocalVarQueryParameters['facility_id__nie'] = $FacilityIdNie
        }

        if ($FacilityIdNiew) {
            $LocalVarQueryParameters['facility_id__niew'] = $FacilityIdNiew
        }

        if ($FacilityIdNisw) {
            $LocalVarQueryParameters['facility_id__nisw'] = $FacilityIdNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($MaxWeight) {
            $LocalVarQueryParameters['max_weight'] = $MaxWeight
        }

        if ($MaxWeightEmpty) {
            $LocalVarQueryParameters['max_weight__empty'] = $MaxWeightEmpty
        }

        if ($MaxWeightGt) {
            $LocalVarQueryParameters['max_weight__gt'] = $MaxWeightGt
        }

        if ($MaxWeightGte) {
            $LocalVarQueryParameters['max_weight__gte'] = $MaxWeightGte
        }

        if ($MaxWeightLt) {
            $LocalVarQueryParameters['max_weight__lt'] = $MaxWeightLt
        }

        if ($MaxWeightLte) {
            $LocalVarQueryParameters['max_weight__lte'] = $MaxWeightLte
        }

        if ($MaxWeightN) {
            $LocalVarQueryParameters['max_weight__n'] = $MaxWeightN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($MountingDepth) {
            $LocalVarQueryParameters['mounting_depth'] = $MountingDepth
        }

        if ($MountingDepthEmpty) {
            $LocalVarQueryParameters['mounting_depth__empty'] = $MountingDepthEmpty
        }

        if ($MountingDepthGt) {
            $LocalVarQueryParameters['mounting_depth__gt'] = $MountingDepthGt
        }

        if ($MountingDepthGte) {
            $LocalVarQueryParameters['mounting_depth__gte'] = $MountingDepthGte
        }

        if ($MountingDepthLt) {
            $LocalVarQueryParameters['mounting_depth__lt'] = $MountingDepthLt
        }

        if ($MountingDepthLte) {
            $LocalVarQueryParameters['mounting_depth__lte'] = $MountingDepthLte
        }

        if ($MountingDepthN) {
            $LocalVarQueryParameters['mounting_depth__n'] = $MountingDepthN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($OuterDepth) {
            $LocalVarQueryParameters['outer_depth'] = $OuterDepth
        }

        if ($OuterDepthEmpty) {
            $LocalVarQueryParameters['outer_depth__empty'] = $OuterDepthEmpty
        }

        if ($OuterDepthGt) {
            $LocalVarQueryParameters['outer_depth__gt'] = $OuterDepthGt
        }

        if ($OuterDepthGte) {
            $LocalVarQueryParameters['outer_depth__gte'] = $OuterDepthGte
        }

        if ($OuterDepthLt) {
            $LocalVarQueryParameters['outer_depth__lt'] = $OuterDepthLt
        }

        if ($OuterDepthLte) {
            $LocalVarQueryParameters['outer_depth__lte'] = $OuterDepthLte
        }

        if ($OuterDepthN) {
            $LocalVarQueryParameters['outer_depth__n'] = $OuterDepthN
        }

        if ($OuterUnit) {
            $LocalVarQueryParameters['outer_unit'] = $OuterUnit
        }

        if ($OuterUnitN) {
            $LocalVarQueryParameters['outer_unit__n'] = $OuterUnitN
        }

        if ($OuterWidth) {
            $LocalVarQueryParameters['outer_width'] = $OuterWidth
        }

        if ($OuterWidthEmpty) {
            $LocalVarQueryParameters['outer_width__empty'] = $OuterWidthEmpty
        }

        if ($OuterWidthGt) {
            $LocalVarQueryParameters['outer_width__gt'] = $OuterWidthGt
        }

        if ($OuterWidthGte) {
            $LocalVarQueryParameters['outer_width__gte'] = $OuterWidthGte
        }

        if ($OuterWidthLt) {
            $LocalVarQueryParameters['outer_width__lt'] = $OuterWidthLt
        }

        if ($OuterWidthLte) {
            $LocalVarQueryParameters['outer_width__lte'] = $OuterWidthLte
        }

        if ($OuterWidthN) {
            $LocalVarQueryParameters['outer_width__n'] = $OuterWidthN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Serial) {
            $LocalVarQueryParameters['serial'] = $Serial
        }

        if ($SerialEmpty) {
            $LocalVarQueryParameters['serial__empty'] = $SerialEmpty
        }

        if ($SerialIc) {
            $LocalVarQueryParameters['serial__ic'] = $SerialIc
        }

        if ($SerialIe) {
            $LocalVarQueryParameters['serial__ie'] = $SerialIe
        }

        if ($SerialIew) {
            $LocalVarQueryParameters['serial__iew'] = $SerialIew
        }

        if ($SerialIsw) {
            $LocalVarQueryParameters['serial__isw'] = $SerialIsw
        }

        if ($SerialN) {
            $LocalVarQueryParameters['serial__n'] = $SerialN
        }

        if ($SerialNic) {
            $LocalVarQueryParameters['serial__nic'] = $SerialNic
        }

        if ($SerialNie) {
            $LocalVarQueryParameters['serial__nie'] = $SerialNie
        }

        if ($SerialNiew) {
            $LocalVarQueryParameters['serial__niew'] = $SerialNiew
        }

        if ($SerialNisw) {
            $LocalVarQueryParameters['serial__nisw'] = $SerialNisw
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($StartingUnit) {
            $LocalVarQueryParameters['starting_unit'] = $StartingUnit
        }

        if ($StartingUnitEmpty) {
            $LocalVarQueryParameters['starting_unit__empty'] = $StartingUnitEmpty
        }

        if ($StartingUnitGt) {
            $LocalVarQueryParameters['starting_unit__gt'] = $StartingUnitGt
        }

        if ($StartingUnitGte) {
            $LocalVarQueryParameters['starting_unit__gte'] = $StartingUnitGte
        }

        if ($StartingUnitLt) {
            $LocalVarQueryParameters['starting_unit__lt'] = $StartingUnitLt
        }

        if ($StartingUnitLte) {
            $LocalVarQueryParameters['starting_unit__lte'] = $StartingUnitLte
        }

        if ($StartingUnitN) {
            $LocalVarQueryParameters['starting_unit__n'] = $StartingUnitN
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($StatusN) {
            $LocalVarQueryParameters['status__n'] = $StatusN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantGroup) {
            $LocalVarQueryParameters['tenant_group'] = $TenantGroup
        }

        if ($TenantGroupN) {
            $LocalVarQueryParameters['tenant_group__n'] = $TenantGroupN
        }

        if ($TenantGroupId) {
            $LocalVarQueryParameters['tenant_group_id'] = $TenantGroupId
        }

        if ($TenantGroupIdN) {
            $LocalVarQueryParameters['tenant_group_id__n'] = $TenantGroupIdN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UHeight) {
            $LocalVarQueryParameters['u_height'] = $UHeight
        }

        if ($UHeightEmpty) {
            $LocalVarQueryParameters['u_height__empty'] = $UHeightEmpty
        }

        if ($UHeightGt) {
            $LocalVarQueryParameters['u_height__gt'] = $UHeightGt
        }

        if ($UHeightGte) {
            $LocalVarQueryParameters['u_height__gte'] = $UHeightGte
        }

        if ($UHeightLt) {
            $LocalVarQueryParameters['u_height__lt'] = $UHeightLt
        }

        if ($UHeightLte) {
            $LocalVarQueryParameters['u_height__lte'] = $UHeightLte
        }

        if ($UHeightN) {
            $LocalVarQueryParameters['u_height__n'] = $UHeightN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Weight) {
            $LocalVarQueryParameters['weight'] = $Weight
        }

        if ($WeightEmpty) {
            $LocalVarQueryParameters['weight__empty'] = $WeightEmpty
        }

        if ($WeightGt) {
            $LocalVarQueryParameters['weight__gt'] = $WeightGt
        }

        if ($WeightGte) {
            $LocalVarQueryParameters['weight__gte'] = $WeightGte
        }

        if ($WeightLt) {
            $LocalVarQueryParameters['weight__lt'] = $WeightLt
        }

        if ($WeightLte) {
            $LocalVarQueryParameters['weight__lte'] = $WeightLte
        }

        if ($WeightN) {
            $LocalVarQueryParameters['weight__n'] = $WeightN
        }

        if ($WeightUnit) {
            $LocalVarQueryParameters['weight_unit'] = $WeightUnit
        }

        if ($WeightUnitN) {
            $LocalVarQueryParameters['weight_unit__n'] = $WeightUnitN
        }

        if ($Width) {
            $LocalVarQueryParameters['width'] = $Width
        }

        if ($WidthN) {
            $LocalVarQueryParameters['width__n'] = $WidthN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedRackList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack.

.PARAMETER PatchedWritableRackRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Rack
#>
function Invoke-DcimRacksPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableRackRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRacksPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/racks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRacksPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableRackRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Rack" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Rack
#>
function Invoke-DcimRacksRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRacksRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/racks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRacksRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Rack" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rack.

.PARAMETER WritableRackRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Rack
#>
function Invoke-DcimRacksUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableRackRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRacksUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/racks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRacksUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableRackRequest) {
            throw "Error! The required parameter `WritableRackRequest` missing when calling dcimRacksUpdate."
        }

        $LocalVarBodyParameter = $WritableRackRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Rack" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RearPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRearPortTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RearPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-port-templates/'

        if (!$RearPortTemplateRequest) {
            throw "Error! The required parameter `RearPortTemplateRequest` missing when calling dcimRearPortTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $RearPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RearPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPortTemplate[]
#>
function Invoke-DcimRearPortTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RearPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-port-templates/'

        if (!$RearPortTemplateRequest) {
            throw "Error! The required parameter `RearPortTemplateRequest` missing when calling dcimRearPortTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $RearPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPortTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RearPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPortTemplate[]
#>
function Invoke-DcimRearPortTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RearPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-port-templates/'

        if (!$RearPortTemplateRequest) {
            throw "Error! The required parameter `RearPortTemplateRequest` missing when calling dcimRearPortTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $RearPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPortTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableRearPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPortTemplate
#>
function Invoke-DcimRearPortTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableRearPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-port-templates/'

        if (!$WritableRearPortTemplateRequest) {
            throw "Error! The required parameter `WritableRearPortTemplateRequest` missing when calling dcimRearPortTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritableRearPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rear port template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRearPortTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/rear-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRearPortTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Color
No description available.

.PARAMETER ColorEmpty
No description available.

.PARAMETER ColorIc
No description available.

.PARAMETER ColorIe
No description available.

.PARAMETER ColorIew
No description available.

.PARAMETER ColorIsw
No description available.

.PARAMETER ColorN
No description available.

.PARAMETER ColorNic
No description available.

.PARAMETER ColorNie
No description available.

.PARAMETER ColorNiew
No description available.

.PARAMETER ColorNisw
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DevicetypeId
Device type (ID)

.PARAMETER DevicetypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuletypeId
Module type (ID)

.PARAMETER ModuletypeIdN
Module type (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Positions
No description available.

.PARAMETER PositionsEmpty
No description available.

.PARAMETER PositionsGt
No description available.

.PARAMETER PositionsGte
No description available.

.PARAMETER PositionsLt
No description available.

.PARAMETER PositionsLte
No description available.

.PARAMETER PositionsN
No description available.

.PARAMETER Q
Search

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedRearPortTemplateList
#>
function Invoke-DcimRearPortTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Color},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ColorEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIe},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIew},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIsw},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNie},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNiew},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNisw},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeId},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DevicetypeIdN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeId},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuletypeIdN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Positions},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PositionsEmpty},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PositionsGt},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PositionsGte},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PositionsLt},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PositionsLte},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PositionsN},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/rear-port-templates/'

        if ($Color) {
            $LocalVarQueryParameters['color'] = $Color
        }

        if ($ColorEmpty) {
            $LocalVarQueryParameters['color__empty'] = $ColorEmpty
        }

        if ($ColorIc) {
            $LocalVarQueryParameters['color__ic'] = $ColorIc
        }

        if ($ColorIe) {
            $LocalVarQueryParameters['color__ie'] = $ColorIe
        }

        if ($ColorIew) {
            $LocalVarQueryParameters['color__iew'] = $ColorIew
        }

        if ($ColorIsw) {
            $LocalVarQueryParameters['color__isw'] = $ColorIsw
        }

        if ($ColorN) {
            $LocalVarQueryParameters['color__n'] = $ColorN
        }

        if ($ColorNic) {
            $LocalVarQueryParameters['color__nic'] = $ColorNic
        }

        if ($ColorNie) {
            $LocalVarQueryParameters['color__nie'] = $ColorNie
        }

        if ($ColorNiew) {
            $LocalVarQueryParameters['color__niew'] = $ColorNiew
        }

        if ($ColorNisw) {
            $LocalVarQueryParameters['color__nisw'] = $ColorNisw
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DevicetypeId) {
            $LocalVarQueryParameters['devicetype_id'] = $DevicetypeId
        }

        if ($DevicetypeIdN) {
            $LocalVarQueryParameters['devicetype_id__n'] = $DevicetypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuletypeId) {
            $LocalVarQueryParameters['moduletype_id'] = $ModuletypeId
        }

        if ($ModuletypeIdN) {
            $LocalVarQueryParameters['moduletype_id__n'] = $ModuletypeIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Positions) {
            $LocalVarQueryParameters['positions'] = $Positions
        }

        if ($PositionsEmpty) {
            $LocalVarQueryParameters['positions__empty'] = $PositionsEmpty
        }

        if ($PositionsGt) {
            $LocalVarQueryParameters['positions__gt'] = $PositionsGt
        }

        if ($PositionsGte) {
            $LocalVarQueryParameters['positions__gte'] = $PositionsGte
        }

        if ($PositionsLt) {
            $LocalVarQueryParameters['positions__lt'] = $PositionsLt
        }

        if ($PositionsLte) {
            $LocalVarQueryParameters['positions__lte'] = $PositionsLte
        }

        if ($PositionsN) {
            $LocalVarQueryParameters['positions__n'] = $PositionsN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedRearPortTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rear port template.

.PARAMETER PatchedWritableRearPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPortTemplate
#>
function Invoke-DcimRearPortTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableRearPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRearPortTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableRearPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rear port template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPortTemplate
#>
function Invoke-DcimRearPortTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/rear-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRearPortTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rear port template.

.PARAMETER WritableRearPortTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPortTemplate
#>
function Invoke-DcimRearPortTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableRearPortTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-port-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRearPortTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableRearPortTemplateRequest) {
            throw "Error! The required parameter `WritableRearPortTemplateRequest` missing when calling dcimRearPortTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritableRearPortTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPortTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RearPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRearPortsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RearPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-ports/'

        if (!$RearPortRequest) {
            throw "Error! The required parameter `RearPortRequest` missing when calling dcimRearPortsBulkDestroy."
        }

        $LocalVarBodyParameter = $RearPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RearPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPort[]
#>
function Invoke-DcimRearPortsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RearPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-ports/'

        if (!$RearPortRequest) {
            throw "Error! The required parameter `RearPortRequest` missing when calling dcimRearPortsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $RearPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPort[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RearPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPort[]
#>
function Invoke-DcimRearPortsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RearPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-ports/'

        if (!$RearPortRequest) {
            throw "Error! The required parameter `RearPortRequest` missing when calling dcimRearPortsBulkUpdate."
        }

        $LocalVarBodyParameter = $RearPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPort[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableRearPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPort
#>
function Invoke-DcimRearPortsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableRearPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-ports/'

        if (!$WritableRearPortRequest) {
            throw "Error! The required parameter `WritableRearPortRequest` missing when calling dcimRearPortsCreate."
        }

        $LocalVarBodyParameter = $WritableRearPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rear port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRearPortsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/rear-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRearPortsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CableEnd
No description available.

.PARAMETER CableEndN
No description available.

.PARAMETER Cabled
No description available.

.PARAMETER Color
No description available.

.PARAMETER ColorEmpty
No description available.

.PARAMETER ColorIc
No description available.

.PARAMETER ColorIe
No description available.

.PARAMETER ColorIew
No description available.

.PARAMETER ColorIsw
No description available.

.PARAMETER ColorN
No description available.

.PARAMETER ColorNic
No description available.

.PARAMETER ColorNie
No description available.

.PARAMETER ColorNiew
No description available.

.PARAMETER ColorNisw
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Device
Device (name)

.PARAMETER DeviceN
Device (name)

.PARAMETER DeviceId
Device (ID)

.PARAMETER DeviceIdN
Device (ID)

.PARAMETER DeviceRole
Device role (slug)

.PARAMETER DeviceRoleN
Device role (slug)

.PARAMETER DeviceRoleId
Device role (ID)

.PARAMETER DeviceRoleIdN
Device role (ID)

.PARAMETER DeviceType
Device type (model)

.PARAMETER DeviceTypeN
Device type (model)

.PARAMETER DeviceTypeId
Device type (ID)

.PARAMETER DeviceTypeIdN
Device type (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Label
No description available.

.PARAMETER LabelEmpty
No description available.

.PARAMETER LabelIc
No description available.

.PARAMETER LabelIe
No description available.

.PARAMETER LabelIew
No description available.

.PARAMETER LabelIsw
No description available.

.PARAMETER LabelN
No description available.

.PARAMETER LabelNic
No description available.

.PARAMETER LabelNie
No description available.

.PARAMETER LabelNiew
No description available.

.PARAMETER LabelNisw
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location (ID)

.PARAMETER LocationIdN
Location (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER ModuleId
Module (ID)

.PARAMETER ModuleIdN
Module (ID)

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Occupied
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Positions
No description available.

.PARAMETER PositionsEmpty
No description available.

.PARAMETER PositionsGt
No description available.

.PARAMETER PositionsGte
No description available.

.PARAMETER PositionsLt
No description available.

.PARAMETER PositionsLte
No description available.

.PARAMETER PositionsN
No description available.

.PARAMETER Q
Search

.PARAMETER Rack
Rack (name)

.PARAMETER RackN
Rack (name)

.PARAMETER RackId
Rack (ID)

.PARAMETER RackIdN
Rack (ID)

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Role
Device role (slug)

.PARAMETER RoleN
Device role (slug)

.PARAMETER RoleId
Device role (ID)

.PARAMETER RoleIdN
Device role (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Type
No description available.

.PARAMETER TypeN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER VirtualChassis
Virtual Chassis

.PARAMETER VirtualChassisN
Virtual Chassis

.PARAMETER VirtualChassisId
Virtual Chassis (ID)

.PARAMETER VirtualChassisIdN
Virtual Chassis (ID)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedRearPortList
#>
function Invoke-DcimRearPortsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEnd},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CableEndN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Cabled},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Color},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ColorEmpty},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIc},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIe},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIew},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIsw},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorN},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNic},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNie},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNiew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNisw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Device},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRole},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceRoleN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleId},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceRoleIdN},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceType},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DeviceTypeN},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Label},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LabelEmpty},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIc},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIe},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIew},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelIsw},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelN},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNic},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNie},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNiew},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LabelNisw},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LocationN},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleId},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ModuleIdN},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Occupied},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Positions},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${PositionsEmpty},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PositionsGt},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PositionsGte},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PositionsLt},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PositionsLte},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PositionsN},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Rack},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RackN},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackId},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RackIdN},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 113, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 114, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 115, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 116, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 117, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 118, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 119, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 120, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 121, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 122, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 123, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 124, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Parameter(Position = 125, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassis},
        [Parameter(Position = 126, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${VirtualChassisN},
        [Parameter(Position = 127, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisId},
        [Parameter(Position = 128, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${VirtualChassisIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/rear-ports/'

        if ($CableEnd) {
            $LocalVarQueryParameters['cable_end'] = $CableEnd
        }

        if ($CableEndN) {
            $LocalVarQueryParameters['cable_end__n'] = $CableEndN
        }

        if ($Cabled) {
            $LocalVarQueryParameters['cabled'] = $Cabled
        }

        if ($Color) {
            $LocalVarQueryParameters['color'] = $Color
        }

        if ($ColorEmpty) {
            $LocalVarQueryParameters['color__empty'] = $ColorEmpty
        }

        if ($ColorIc) {
            $LocalVarQueryParameters['color__ic'] = $ColorIc
        }

        if ($ColorIe) {
            $LocalVarQueryParameters['color__ie'] = $ColorIe
        }

        if ($ColorIew) {
            $LocalVarQueryParameters['color__iew'] = $ColorIew
        }

        if ($ColorIsw) {
            $LocalVarQueryParameters['color__isw'] = $ColorIsw
        }

        if ($ColorN) {
            $LocalVarQueryParameters['color__n'] = $ColorN
        }

        if ($ColorNic) {
            $LocalVarQueryParameters['color__nic'] = $ColorNic
        }

        if ($ColorNie) {
            $LocalVarQueryParameters['color__nie'] = $ColorNie
        }

        if ($ColorNiew) {
            $LocalVarQueryParameters['color__niew'] = $ColorNiew
        }

        if ($ColorNisw) {
            $LocalVarQueryParameters['color__nisw'] = $ColorNisw
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceN) {
            $LocalVarQueryParameters['device__n'] = $DeviceN
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($DeviceRole) {
            $LocalVarQueryParameters['device_role'] = $DeviceRole
        }

        if ($DeviceRoleN) {
            $LocalVarQueryParameters['device_role__n'] = $DeviceRoleN
        }

        if ($DeviceRoleId) {
            $LocalVarQueryParameters['device_role_id'] = $DeviceRoleId
        }

        if ($DeviceRoleIdN) {
            $LocalVarQueryParameters['device_role_id__n'] = $DeviceRoleIdN
        }

        if ($DeviceType) {
            $LocalVarQueryParameters['device_type'] = $DeviceType
        }

        if ($DeviceTypeN) {
            $LocalVarQueryParameters['device_type__n'] = $DeviceTypeN
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Label) {
            $LocalVarQueryParameters['label'] = $Label
        }

        if ($LabelEmpty) {
            $LocalVarQueryParameters['label__empty'] = $LabelEmpty
        }

        if ($LabelIc) {
            $LocalVarQueryParameters['label__ic'] = $LabelIc
        }

        if ($LabelIe) {
            $LocalVarQueryParameters['label__ie'] = $LabelIe
        }

        if ($LabelIew) {
            $LocalVarQueryParameters['label__iew'] = $LabelIew
        }

        if ($LabelIsw) {
            $LocalVarQueryParameters['label__isw'] = $LabelIsw
        }

        if ($LabelN) {
            $LocalVarQueryParameters['label__n'] = $LabelN
        }

        if ($LabelNic) {
            $LocalVarQueryParameters['label__nic'] = $LabelNic
        }

        if ($LabelNie) {
            $LocalVarQueryParameters['label__nie'] = $LabelNie
        }

        if ($LabelNiew) {
            $LocalVarQueryParameters['label__niew'] = $LabelNiew
        }

        if ($LabelNisw) {
            $LocalVarQueryParameters['label__nisw'] = $LabelNisw
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($ModuleId) {
            $LocalVarQueryParameters['module_id'] = $ModuleId
        }

        if ($ModuleIdN) {
            $LocalVarQueryParameters['module_id__n'] = $ModuleIdN
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Occupied) {
            $LocalVarQueryParameters['occupied'] = $Occupied
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Positions) {
            $LocalVarQueryParameters['positions'] = $Positions
        }

        if ($PositionsEmpty) {
            $LocalVarQueryParameters['positions__empty'] = $PositionsEmpty
        }

        if ($PositionsGt) {
            $LocalVarQueryParameters['positions__gt'] = $PositionsGt
        }

        if ($PositionsGte) {
            $LocalVarQueryParameters['positions__gte'] = $PositionsGte
        }

        if ($PositionsLt) {
            $LocalVarQueryParameters['positions__lt'] = $PositionsLt
        }

        if ($PositionsLte) {
            $LocalVarQueryParameters['positions__lte'] = $PositionsLte
        }

        if ($PositionsN) {
            $LocalVarQueryParameters['positions__n'] = $PositionsN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Rack) {
            $LocalVarQueryParameters['rack'] = $Rack
        }

        if ($RackN) {
            $LocalVarQueryParameters['rack__n'] = $RackN
        }

        if ($RackId) {
            $LocalVarQueryParameters['rack_id'] = $RackId
        }

        if ($RackIdN) {
            $LocalVarQueryParameters['rack_id__n'] = $RackIdN
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($VirtualChassis) {
            $LocalVarQueryParameters['virtual_chassis'] = $VirtualChassis
        }

        if ($VirtualChassisN) {
            $LocalVarQueryParameters['virtual_chassis__n'] = $VirtualChassisN
        }

        if ($VirtualChassisId) {
            $LocalVarQueryParameters['virtual_chassis_id'] = $VirtualChassisId
        }

        if ($VirtualChassisIdN) {
            $LocalVarQueryParameters['virtual_chassis_id__n'] = $VirtualChassisIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedRearPortList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rear port.

.PARAMETER PatchedWritableRearPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPort
#>
function Invoke-DcimRearPortsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableRearPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRearPortsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableRearPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rear port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPort
#>
function Invoke-DcimRearPortsPathsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortsPathsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/rear-ports/{id}/paths/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRearPortsPathsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rear port.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPort
#>
function Invoke-DcimRearPortsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/rear-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRearPortsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this rear port.

.PARAMETER WritableRearPortRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RearPort
#>
function Invoke-DcimRearPortsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableRearPortRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRearPortsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/rear-ports/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRearPortsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableRearPortRequest) {
            throw "Error! The required parameter `WritableRearPortRequest` missing when calling dcimRearPortsUpdate."
        }

        $LocalVarBodyParameter = $WritableRearPortRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RearPort" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RegionRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRegionsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RegionRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRegionsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/regions/'

        if (!$RegionRequest) {
            throw "Error! The required parameter `RegionRequest` missing when calling dcimRegionsBulkDestroy."
        }

        $LocalVarBodyParameter = $RegionRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RegionRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Region[]
#>
function Invoke-DcimRegionsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RegionRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRegionsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/regions/'

        if (!$RegionRequest) {
            throw "Error! The required parameter `RegionRequest` missing when calling dcimRegionsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $RegionRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Region[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER RegionRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Region[]
#>
function Invoke-DcimRegionsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${RegionRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRegionsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/regions/'

        if (!$RegionRequest) {
            throw "Error! The required parameter `RegionRequest` missing when calling dcimRegionsBulkUpdate."
        }

        $LocalVarBodyParameter = $RegionRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Region[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableRegionRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Region
#>
function Invoke-DcimRegionsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableRegionRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRegionsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/regions/'

        if (!$WritableRegionRequest) {
            throw "Error! The required parameter `WritableRegionRequest` missing when calling dcimRegionsCreate."
        }

        $LocalVarBodyParameter = $WritableRegionRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Region" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this region.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimRegionsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRegionsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/regions/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRegionsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Contact
Contact

.PARAMETER ContactN
Contact

.PARAMETER ContactGroup
Contact group

.PARAMETER ContactGroupN
Contact group

.PARAMETER ContactRole
Contact Role

.PARAMETER ContactRoleN
Contact Role

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Parent
Parent region (slug)

.PARAMETER ParentN
Parent region (slug)

.PARAMETER ParentId
Parent region (ID)

.PARAMETER ParentIdN
Parent region (ID)

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedRegionList
#>
function Invoke-DcimRegionsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Contact},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroup},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroupN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRole},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRoleN},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Parent},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ParentN},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentId},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentIdN},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRegionsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/regions/'

        if ($Contact) {
            $LocalVarQueryParameters['contact'] = $Contact
        }

        if ($ContactN) {
            $LocalVarQueryParameters['contact__n'] = $ContactN
        }

        if ($ContactGroup) {
            $LocalVarQueryParameters['contact_group'] = $ContactGroup
        }

        if ($ContactGroupN) {
            $LocalVarQueryParameters['contact_group__n'] = $ContactGroupN
        }

        if ($ContactRole) {
            $LocalVarQueryParameters['contact_role'] = $ContactRole
        }

        if ($ContactRoleN) {
            $LocalVarQueryParameters['contact_role__n'] = $ContactRoleN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Parent) {
            $LocalVarQueryParameters['parent'] = $Parent
        }

        if ($ParentN) {
            $LocalVarQueryParameters['parent__n'] = $ParentN
        }

        if ($ParentId) {
            $LocalVarQueryParameters['parent_id'] = $ParentId
        }

        if ($ParentIdN) {
            $LocalVarQueryParameters['parent_id__n'] = $ParentIdN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedRegionList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this region.

.PARAMETER PatchedWritableRegionRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Region
#>
function Invoke-DcimRegionsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableRegionRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRegionsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/regions/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRegionsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableRegionRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Region" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this region.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Region
#>
function Invoke-DcimRegionsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRegionsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/regions/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRegionsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Region" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this region.

.PARAMETER WritableRegionRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Region
#>
function Invoke-DcimRegionsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableRegionRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimRegionsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/regions/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimRegionsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableRegionRequest) {
            throw "Error! The required parameter `WritableRegionRequest` missing when calling dcimRegionsUpdate."
        }

        $LocalVarBodyParameter = $WritableRegionRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Region" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SiteGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimSiteGroupsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${SiteGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSiteGroupsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/site-groups/'

        if (!$SiteGroupRequest) {
            throw "Error! The required parameter `SiteGroupRequest` missing when calling dcimSiteGroupsBulkDestroy."
        }

        $LocalVarBodyParameter = $SiteGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SiteGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SiteGroup[]
#>
function Invoke-DcimSiteGroupsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${SiteGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSiteGroupsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/site-groups/'

        if (!$SiteGroupRequest) {
            throw "Error! The required parameter `SiteGroupRequest` missing when calling dcimSiteGroupsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $SiteGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SiteGroup[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SiteGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SiteGroup[]
#>
function Invoke-DcimSiteGroupsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${SiteGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSiteGroupsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/site-groups/'

        if (!$SiteGroupRequest) {
            throw "Error! The required parameter `SiteGroupRequest` missing when calling dcimSiteGroupsBulkUpdate."
        }

        $LocalVarBodyParameter = $SiteGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SiteGroup[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableSiteGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SiteGroup
#>
function Invoke-DcimSiteGroupsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableSiteGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSiteGroupsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/site-groups/'

        if (!$WritableSiteGroupRequest) {
            throw "Error! The required parameter `WritableSiteGroupRequest` missing when calling dcimSiteGroupsCreate."
        }

        $LocalVarBodyParameter = $WritableSiteGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SiteGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this site group.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimSiteGroupsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSiteGroupsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/site-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimSiteGroupsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Contact
Contact

.PARAMETER ContactN
Contact

.PARAMETER ContactGroup
Contact group

.PARAMETER ContactGroupN
Contact group

.PARAMETER ContactRole
Contact Role

.PARAMETER ContactRoleN
Contact Role

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Parent
Parent site group (slug)

.PARAMETER ParentN
Parent site group (slug)

.PARAMETER ParentId
Parent site group (ID)

.PARAMETER ParentIdN
Parent site group (ID)

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedSiteGroupList
#>
function Invoke-DcimSiteGroupsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Contact},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroup},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroupN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRole},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRoleN},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Parent},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ParentN},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentId},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ParentIdN},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSiteGroupsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/site-groups/'

        if ($Contact) {
            $LocalVarQueryParameters['contact'] = $Contact
        }

        if ($ContactN) {
            $LocalVarQueryParameters['contact__n'] = $ContactN
        }

        if ($ContactGroup) {
            $LocalVarQueryParameters['contact_group'] = $ContactGroup
        }

        if ($ContactGroupN) {
            $LocalVarQueryParameters['contact_group__n'] = $ContactGroupN
        }

        if ($ContactRole) {
            $LocalVarQueryParameters['contact_role'] = $ContactRole
        }

        if ($ContactRoleN) {
            $LocalVarQueryParameters['contact_role__n'] = $ContactRoleN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Parent) {
            $LocalVarQueryParameters['parent'] = $Parent
        }

        if ($ParentN) {
            $LocalVarQueryParameters['parent__n'] = $ParentN
        }

        if ($ParentId) {
            $LocalVarQueryParameters['parent_id'] = $ParentId
        }

        if ($ParentIdN) {
            $LocalVarQueryParameters['parent_id__n'] = $ParentIdN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedSiteGroupList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this site group.

.PARAMETER PatchedWritableSiteGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SiteGroup
#>
function Invoke-DcimSiteGroupsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableSiteGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSiteGroupsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/site-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimSiteGroupsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableSiteGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SiteGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this site group.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SiteGroup
#>
function Invoke-DcimSiteGroupsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSiteGroupsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/site-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimSiteGroupsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SiteGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this site group.

.PARAMETER WritableSiteGroupRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SiteGroup
#>
function Invoke-DcimSiteGroupsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableSiteGroupRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSiteGroupsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/site-groups/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimSiteGroupsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableSiteGroupRequest) {
            throw "Error! The required parameter `WritableSiteGroupRequest` missing when calling dcimSiteGroupsUpdate."
        }

        $LocalVarBodyParameter = $WritableSiteGroupRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SiteGroup" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SiteRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimSitesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${SiteRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSitesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/sites/'

        if (!$SiteRequest) {
            throw "Error! The required parameter `SiteRequest` missing when calling dcimSitesBulkDestroy."
        }

        $LocalVarBodyParameter = $SiteRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SiteRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Site[]
#>
function Invoke-DcimSitesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${SiteRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSitesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/sites/'

        if (!$SiteRequest) {
            throw "Error! The required parameter `SiteRequest` missing when calling dcimSitesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $SiteRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Site[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SiteRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Site[]
#>
function Invoke-DcimSitesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${SiteRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSitesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/sites/'

        if (!$SiteRequest) {
            throw "Error! The required parameter `SiteRequest` missing when calling dcimSitesBulkUpdate."
        }

        $LocalVarBodyParameter = $SiteRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Site[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableSiteRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Site
#>
function Invoke-DcimSitesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableSiteRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSitesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/sites/'

        if (!$WritableSiteRequest) {
            throw "Error! The required parameter `WritableSiteRequest` missing when calling dcimSitesCreate."
        }

        $LocalVarBodyParameter = $WritableSiteRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Site" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this site.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimSitesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSitesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/sites/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimSitesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Asn
AS (ID)

.PARAMETER AsnN
AS (ID)

.PARAMETER AsnId
AS (ID)

.PARAMETER AsnIdN
AS (ID)

.PARAMETER Contact
Contact

.PARAMETER ContactN
Contact

.PARAMETER ContactGroup
Contact group

.PARAMETER ContactGroupN
Contact group

.PARAMETER ContactRole
Contact Role

.PARAMETER ContactRoleN
Contact Role

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Facility
No description available.

.PARAMETER FacilityEmpty
No description available.

.PARAMETER FacilityIc
No description available.

.PARAMETER FacilityIe
No description available.

.PARAMETER FacilityIew
No description available.

.PARAMETER FacilityIsw
No description available.

.PARAMETER FacilityN
No description available.

.PARAMETER FacilityNic
No description available.

.PARAMETER FacilityNie
No description available.

.PARAMETER FacilityNiew
No description available.

.PARAMETER FacilityNisw
No description available.

.PARAMETER Group
Group (slug)

.PARAMETER GroupN
Group (slug)

.PARAMETER GroupId
Group (ID)

.PARAMETER GroupIdN
Group (ID)

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Latitude
No description available.

.PARAMETER LatitudeEmpty
No description available.

.PARAMETER LatitudeGt
No description available.

.PARAMETER LatitudeGte
No description available.

.PARAMETER LatitudeLt
No description available.

.PARAMETER LatitudeLte
No description available.

.PARAMETER LatitudeN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Longitude
No description available.

.PARAMETER LongitudeEmpty
No description available.

.PARAMETER LongitudeGt
No description available.

.PARAMETER LongitudeGte
No description available.

.PARAMETER LongitudeLt
No description available.

.PARAMETER LongitudeLte
No description available.

.PARAMETER LongitudeN
No description available.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Status
No description available.

.PARAMETER StatusN
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantGroup
Tenant Group (slug)

.PARAMETER TenantGroupN
Tenant Group (slug)

.PARAMETER TenantGroupId
Tenant Group (ID)

.PARAMETER TenantGroupIdN
Tenant Group (ID)

.PARAMETER TenantId
Tenant (ID)

.PARAMETER TenantIdN
Tenant (ID)

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedSiteList
#>
function Invoke-DcimSitesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64][]]
        ${Asn},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int64][]]
        ${AsnN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AsnId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AsnIdN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Contact},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactN},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroup},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactGroupN},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRole},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContactRoleN},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Facility},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${FacilityEmpty},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIc},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIe},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIew},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityIsw},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityN},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityNic},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityNie},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityNiew},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${FacilityNisw},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Group},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupId},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${GroupIdN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${Latitude},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LatitudeEmpty},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LatitudeGt},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LatitudeGte},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LatitudeLt},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LatitudeLte},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LatitudeN},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${Longitude},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${LongitudeEmpty},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LongitudeGt},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LongitudeGte},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LongitudeLt},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LongitudeLte},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Double][]]
        ${LongitudeN},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Status},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${StatusN},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroup},
        [Parameter(Position = 110, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupN},
        [Parameter(Position = 111, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupId},
        [Parameter(Position = 112, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupIdN},
        [Parameter(Position = 113, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 114, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 115, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSitesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/sites/'

        if ($Asn) {
            $LocalVarQueryParameters['asn'] = $Asn
        }

        if ($AsnN) {
            $LocalVarQueryParameters['asn__n'] = $AsnN
        }

        if ($AsnId) {
            $LocalVarQueryParameters['asn_id'] = $AsnId
        }

        if ($AsnIdN) {
            $LocalVarQueryParameters['asn_id__n'] = $AsnIdN
        }

        if ($Contact) {
            $LocalVarQueryParameters['contact'] = $Contact
        }

        if ($ContactN) {
            $LocalVarQueryParameters['contact__n'] = $ContactN
        }

        if ($ContactGroup) {
            $LocalVarQueryParameters['contact_group'] = $ContactGroup
        }

        if ($ContactGroupN) {
            $LocalVarQueryParameters['contact_group__n'] = $ContactGroupN
        }

        if ($ContactRole) {
            $LocalVarQueryParameters['contact_role'] = $ContactRole
        }

        if ($ContactRoleN) {
            $LocalVarQueryParameters['contact_role__n'] = $ContactRoleN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Facility) {
            $LocalVarQueryParameters['facility'] = $Facility
        }

        if ($FacilityEmpty) {
            $LocalVarQueryParameters['facility__empty'] = $FacilityEmpty
        }

        if ($FacilityIc) {
            $LocalVarQueryParameters['facility__ic'] = $FacilityIc
        }

        if ($FacilityIe) {
            $LocalVarQueryParameters['facility__ie'] = $FacilityIe
        }

        if ($FacilityIew) {
            $LocalVarQueryParameters['facility__iew'] = $FacilityIew
        }

        if ($FacilityIsw) {
            $LocalVarQueryParameters['facility__isw'] = $FacilityIsw
        }

        if ($FacilityN) {
            $LocalVarQueryParameters['facility__n'] = $FacilityN
        }

        if ($FacilityNic) {
            $LocalVarQueryParameters['facility__nic'] = $FacilityNic
        }

        if ($FacilityNie) {
            $LocalVarQueryParameters['facility__nie'] = $FacilityNie
        }

        if ($FacilityNiew) {
            $LocalVarQueryParameters['facility__niew'] = $FacilityNiew
        }

        if ($FacilityNisw) {
            $LocalVarQueryParameters['facility__nisw'] = $FacilityNisw
        }

        if ($Group) {
            $LocalVarQueryParameters['group'] = $Group
        }

        if ($GroupN) {
            $LocalVarQueryParameters['group__n'] = $GroupN
        }

        if ($GroupId) {
            $LocalVarQueryParameters['group_id'] = $GroupId
        }

        if ($GroupIdN) {
            $LocalVarQueryParameters['group_id__n'] = $GroupIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Latitude) {
            $LocalVarQueryParameters['latitude'] = $Latitude
        }

        if ($LatitudeEmpty) {
            $LocalVarQueryParameters['latitude__empty'] = $LatitudeEmpty
        }

        if ($LatitudeGt) {
            $LocalVarQueryParameters['latitude__gt'] = $LatitudeGt
        }

        if ($LatitudeGte) {
            $LocalVarQueryParameters['latitude__gte'] = $LatitudeGte
        }

        if ($LatitudeLt) {
            $LocalVarQueryParameters['latitude__lt'] = $LatitudeLt
        }

        if ($LatitudeLte) {
            $LocalVarQueryParameters['latitude__lte'] = $LatitudeLte
        }

        if ($LatitudeN) {
            $LocalVarQueryParameters['latitude__n'] = $LatitudeN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Longitude) {
            $LocalVarQueryParameters['longitude'] = $Longitude
        }

        if ($LongitudeEmpty) {
            $LocalVarQueryParameters['longitude__empty'] = $LongitudeEmpty
        }

        if ($LongitudeGt) {
            $LocalVarQueryParameters['longitude__gt'] = $LongitudeGt
        }

        if ($LongitudeGte) {
            $LocalVarQueryParameters['longitude__gte'] = $LongitudeGte
        }

        if ($LongitudeLt) {
            $LocalVarQueryParameters['longitude__lt'] = $LongitudeLt
        }

        if ($LongitudeLte) {
            $LocalVarQueryParameters['longitude__lte'] = $LongitudeLte
        }

        if ($LongitudeN) {
            $LocalVarQueryParameters['longitude__n'] = $LongitudeN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($StatusN) {
            $LocalVarQueryParameters['status__n'] = $StatusN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantGroup) {
            $LocalVarQueryParameters['tenant_group'] = $TenantGroup
        }

        if ($TenantGroupN) {
            $LocalVarQueryParameters['tenant_group__n'] = $TenantGroupN
        }

        if ($TenantGroupId) {
            $LocalVarQueryParameters['tenant_group_id'] = $TenantGroupId
        }

        if ($TenantGroupIdN) {
            $LocalVarQueryParameters['tenant_group_id__n'] = $TenantGroupIdN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedSiteList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this site.

.PARAMETER PatchedWritableSiteRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Site
#>
function Invoke-DcimSitesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableSiteRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSitesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/sites/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimSitesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableSiteRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Site" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this site.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Site
#>
function Invoke-DcimSitesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSitesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/sites/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimSitesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Site" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this site.

.PARAMETER WritableSiteRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Site
#>
function Invoke-DcimSitesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableSiteRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimSitesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/sites/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimSitesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableSiteRequest) {
            throw "Error! The required parameter `WritableSiteRequest` missing when calling dcimSitesUpdate."
        }

        $LocalVarBodyParameter = $WritableSiteRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Site" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VirtualChassisRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimVirtualChassisBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${VirtualChassisRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualChassisBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-chassis/'

        if (!$VirtualChassisRequest) {
            throw "Error! The required parameter `VirtualChassisRequest` missing when calling dcimVirtualChassisBulkDestroy."
        }

        $LocalVarBodyParameter = $VirtualChassisRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VirtualChassisRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualChassis[]
#>
function Invoke-DcimVirtualChassisBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${VirtualChassisRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualChassisBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-chassis/'

        if (!$VirtualChassisRequest) {
            throw "Error! The required parameter `VirtualChassisRequest` missing when calling dcimVirtualChassisBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $VirtualChassisRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualChassis[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VirtualChassisRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualChassis[]
#>
function Invoke-DcimVirtualChassisBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${VirtualChassisRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualChassisBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-chassis/'

        if (!$VirtualChassisRequest) {
            throw "Error! The required parameter `VirtualChassisRequest` missing when calling dcimVirtualChassisBulkUpdate."
        }

        $LocalVarBodyParameter = $VirtualChassisRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualChassis[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableVirtualChassisRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualChassis
#>
function Invoke-DcimVirtualChassisCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableVirtualChassisRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualChassisCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-chassis/'

        if (!$WritableVirtualChassisRequest) {
            throw "Error! The required parameter `WritableVirtualChassisRequest` missing when calling dcimVirtualChassisCreate."
        }

        $LocalVarBodyParameter = $WritableVirtualChassisRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualChassis" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this virtual chassis.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimVirtualChassisDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualChassisDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/virtual-chassis/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimVirtualChassisDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Domain
No description available.

.PARAMETER DomainEmpty
No description available.

.PARAMETER DomainIc
No description available.

.PARAMETER DomainIe
No description available.

.PARAMETER DomainIew
No description available.

.PARAMETER DomainIsw
No description available.

.PARAMETER DomainN
No description available.

.PARAMETER DomainNic
No description available.

.PARAMETER DomainNie
No description available.

.PARAMETER DomainNiew
No description available.

.PARAMETER DomainNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Master
Master (name)

.PARAMETER MasterN
Master (name)

.PARAMETER MasterId
Master (ID)

.PARAMETER MasterIdN
Master (ID)

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region (ID)

.PARAMETER RegionIdN
Region (ID)

.PARAMETER Site
Site name (slug)

.PARAMETER SiteN
Site name (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group (ID)

.PARAMETER SiteGroupIdN
Site group (ID)

.PARAMETER SiteId
Site (ID)

.PARAMETER SiteIdN
Site (ID)

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantId
Tenant (ID)

.PARAMETER TenantIdN
Tenant (ID)

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedVirtualChassisList
#>
function Invoke-DcimVirtualChassisList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Domain},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DomainEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DomainIc},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DomainIe},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DomainIew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DomainIsw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DomainN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DomainNic},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DomainNie},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DomainNiew},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DomainNisw},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Master},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${MasterN},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MasterId},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${MasterIdN},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Region},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroup},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupN},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualChassisList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/virtual-chassis/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Domain) {
            $LocalVarQueryParameters['domain'] = $Domain
        }

        if ($DomainEmpty) {
            $LocalVarQueryParameters['domain__empty'] = $DomainEmpty
        }

        if ($DomainIc) {
            $LocalVarQueryParameters['domain__ic'] = $DomainIc
        }

        if ($DomainIe) {
            $LocalVarQueryParameters['domain__ie'] = $DomainIe
        }

        if ($DomainIew) {
            $LocalVarQueryParameters['domain__iew'] = $DomainIew
        }

        if ($DomainIsw) {
            $LocalVarQueryParameters['domain__isw'] = $DomainIsw
        }

        if ($DomainN) {
            $LocalVarQueryParameters['domain__n'] = $DomainN
        }

        if ($DomainNic) {
            $LocalVarQueryParameters['domain__nic'] = $DomainNic
        }

        if ($DomainNie) {
            $LocalVarQueryParameters['domain__nie'] = $DomainNie
        }

        if ($DomainNiew) {
            $LocalVarQueryParameters['domain__niew'] = $DomainNiew
        }

        if ($DomainNisw) {
            $LocalVarQueryParameters['domain__nisw'] = $DomainNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Master) {
            $LocalVarQueryParameters['master'] = $Master
        }

        if ($MasterN) {
            $LocalVarQueryParameters['master__n'] = $MasterN
        }

        if ($MasterId) {
            $LocalVarQueryParameters['master_id'] = $MasterId
        }

        if ($MasterIdN) {
            $LocalVarQueryParameters['master_id__n'] = $MasterIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedVirtualChassisList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this virtual chassis.

.PARAMETER PatchedWritableVirtualChassisRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualChassis
#>
function Invoke-DcimVirtualChassisPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableVirtualChassisRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualChassisPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-chassis/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimVirtualChassisPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableVirtualChassisRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualChassis" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this virtual chassis.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualChassis
#>
function Invoke-DcimVirtualChassisRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualChassisRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/virtual-chassis/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimVirtualChassisRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualChassis" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this virtual chassis.

.PARAMETER WritableVirtualChassisRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualChassis
#>
function Invoke-DcimVirtualChassisUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableVirtualChassisRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualChassisUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-chassis/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimVirtualChassisUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableVirtualChassisRequest) {
            throw "Error! The required parameter `WritableVirtualChassisRequest` missing when calling dcimVirtualChassisUpdate."
        }

        $LocalVarBodyParameter = $WritableVirtualChassisRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualChassis" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VirtualDeviceContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimVirtualDeviceContextsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${VirtualDeviceContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualDeviceContextsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-device-contexts/'

        if (!$VirtualDeviceContextRequest) {
            throw "Error! The required parameter `VirtualDeviceContextRequest` missing when calling dcimVirtualDeviceContextsBulkDestroy."
        }

        $LocalVarBodyParameter = $VirtualDeviceContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VirtualDeviceContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualDeviceContext[]
#>
function Invoke-DcimVirtualDeviceContextsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${VirtualDeviceContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualDeviceContextsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-device-contexts/'

        if (!$VirtualDeviceContextRequest) {
            throw "Error! The required parameter `VirtualDeviceContextRequest` missing when calling dcimVirtualDeviceContextsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $VirtualDeviceContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualDeviceContext[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VirtualDeviceContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualDeviceContext[]
#>
function Invoke-DcimVirtualDeviceContextsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${VirtualDeviceContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualDeviceContextsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-device-contexts/'

        if (!$VirtualDeviceContextRequest) {
            throw "Error! The required parameter `VirtualDeviceContextRequest` missing when calling dcimVirtualDeviceContextsBulkUpdate."
        }

        $LocalVarBodyParameter = $VirtualDeviceContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualDeviceContext[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableVirtualDeviceContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualDeviceContext
#>
function Invoke-DcimVirtualDeviceContextsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableVirtualDeviceContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualDeviceContextsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-device-contexts/'

        if (!$WritableVirtualDeviceContextRequest) {
            throw "Error! The required parameter `WritableVirtualDeviceContextRequest` missing when calling dcimVirtualDeviceContextsCreate."
        }

        $LocalVarBodyParameter = $WritableVirtualDeviceContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualDeviceContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this virtual device context.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-DcimVirtualDeviceContextsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualDeviceContextsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/dcim/virtual-device-contexts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimVirtualDeviceContextsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Device
Device model

.PARAMETER DeviceN
Device model

.PARAMETER DeviceId
VDC (ID)

.PARAMETER DeviceIdN
VDC (ID)

.PARAMETER HasPrimaryIp
Has a primary IP

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER PrimaryIp4Id
Primary IPv4 (ID)

.PARAMETER PrimaryIp4IdN
Primary IPv4 (ID)

.PARAMETER PrimaryIp6Id
Primary IPv6 (ID)

.PARAMETER PrimaryIp6IdN
Primary IPv6 (ID)

.PARAMETER Q
Search

.PARAMETER Status
No description available.

.PARAMETER StatusN
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantGroup
Tenant Group (slug)

.PARAMETER TenantGroupN
Tenant Group (slug)

.PARAMETER TenantGroupId
Tenant Group (ID)

.PARAMETER TenantGroupIdN
Tenant Group (ID)

.PARAMETER TenantId
Tenant (ID)

.PARAMETER TenantIdN
Tenant (ID)

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedVirtualDeviceContextList
#>
function Invoke-DcimVirtualDeviceContextsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Device},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceId},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceIdN},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${HasPrimaryIp},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PrimaryIp4Id},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PrimaryIp4IdN},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PrimaryIp6Id},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PrimaryIp6IdN},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Status},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${StatusN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroup},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupId},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupIdN},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualDeviceContextsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/virtual-device-contexts/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Device) {
            $LocalVarQueryParameters['device'] = $Device
        }

        if ($DeviceN) {
            $LocalVarQueryParameters['device__n'] = $DeviceN
        }

        if ($DeviceId) {
            $LocalVarQueryParameters['device_id'] = $DeviceId
        }

        if ($DeviceIdN) {
            $LocalVarQueryParameters['device_id__n'] = $DeviceIdN
        }

        if ($HasPrimaryIp) {
            $LocalVarQueryParameters['has_primary_ip'] = $HasPrimaryIp
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($PrimaryIp4Id) {
            $LocalVarQueryParameters['primary_ip4_id'] = $PrimaryIp4Id
        }

        if ($PrimaryIp4IdN) {
            $LocalVarQueryParameters['primary_ip4_id__n'] = $PrimaryIp4IdN
        }

        if ($PrimaryIp6Id) {
            $LocalVarQueryParameters['primary_ip6_id'] = $PrimaryIp6Id
        }

        if ($PrimaryIp6IdN) {
            $LocalVarQueryParameters['primary_ip6_id__n'] = $PrimaryIp6IdN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Status) {
            $LocalVarQueryParameters['status'] = $Status
        }

        if ($StatusN) {
            $LocalVarQueryParameters['status__n'] = $StatusN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantGroup) {
            $LocalVarQueryParameters['tenant_group'] = $TenantGroup
        }

        if ($TenantGroupN) {
            $LocalVarQueryParameters['tenant_group__n'] = $TenantGroupN
        }

        if ($TenantGroupId) {
            $LocalVarQueryParameters['tenant_group_id'] = $TenantGroupId
        }

        if ($TenantGroupIdN) {
            $LocalVarQueryParameters['tenant_group_id__n'] = $TenantGroupIdN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedVirtualDeviceContextList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this virtual device context.

.PARAMETER PatchedWritableVirtualDeviceContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualDeviceContext
#>
function Invoke-DcimVirtualDeviceContextsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableVirtualDeviceContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualDeviceContextsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-device-contexts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimVirtualDeviceContextsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableVirtualDeviceContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualDeviceContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this virtual device context.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualDeviceContext
#>
function Invoke-DcimVirtualDeviceContextsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualDeviceContextsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/dcim/virtual-device-contexts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimVirtualDeviceContextsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualDeviceContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this virtual device context.

.PARAMETER WritableVirtualDeviceContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

VirtualDeviceContext
#>
function Invoke-DcimVirtualDeviceContextsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableVirtualDeviceContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-DcimVirtualDeviceContextsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/dcim/virtual-device-contexts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling dcimVirtualDeviceContextsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableVirtualDeviceContextRequest) {
            throw "Error! The required parameter `WritableVirtualDeviceContextRequest` missing when calling dcimVirtualDeviceContextsUpdate."
        }

        $LocalVarBodyParameter = $WritableVirtualDeviceContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "VirtualDeviceContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

