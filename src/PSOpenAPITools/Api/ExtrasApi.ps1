#
# NetBox REST API
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
# Version: 3.7.8 (3.7)
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BookmarkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasBookmarksBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${BookmarkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasBookmarksBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/bookmarks/'

        if (!$BookmarkRequest) {
            throw "Error! The required parameter `BookmarkRequest` missing when calling extrasBookmarksBulkDestroy."
        }

        $LocalVarBodyParameter = $BookmarkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BookmarkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Bookmark[]
#>
function Invoke-ExtrasBookmarksBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${BookmarkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasBookmarksBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/bookmarks/'

        if (!$BookmarkRequest) {
            throw "Error! The required parameter `BookmarkRequest` missing when calling extrasBookmarksBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $BookmarkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Bookmark[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BookmarkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Bookmark[]
#>
function Invoke-ExtrasBookmarksBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${BookmarkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasBookmarksBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/bookmarks/'

        if (!$BookmarkRequest) {
            throw "Error! The required parameter `BookmarkRequest` missing when calling extrasBookmarksBulkUpdate."
        }

        $LocalVarBodyParameter = $BookmarkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Bookmark[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableBookmarkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Bookmark
#>
function Invoke-ExtrasBookmarksCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableBookmarkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasBookmarksCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/bookmarks/'

        if (!$WritableBookmarkRequest) {
            throw "Error! The required parameter `WritableBookmarkRequest` missing when calling extrasBookmarksCreate."
        }

        $LocalVarBodyParameter = $WritableBookmarkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Bookmark" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this bookmark.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasBookmarksDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasBookmarksDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/bookmarks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasBookmarksDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Created
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ObjectId
No description available.

.PARAMETER ObjectIdEmpty
No description available.

.PARAMETER ObjectIdGt
No description available.

.PARAMETER ObjectIdGte
No description available.

.PARAMETER ObjectIdLt
No description available.

.PARAMETER ObjectIdLte
No description available.

.PARAMETER ObjectIdN
No description available.

.PARAMETER ObjectType
No description available.

.PARAMETER ObjectTypeN
No description available.

.PARAMETER ObjectTypeId
No description available.

.PARAMETER ObjectTypeIdEmpty
No description available.

.PARAMETER ObjectTypeIdGt
No description available.

.PARAMETER ObjectTypeIdGte
No description available.

.PARAMETER ObjectTypeIdLt
No description available.

.PARAMETER ObjectTypeIdLte
No description available.

.PARAMETER ObjectTypeIdN
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER User
User (name)

.PARAMETER UserN
User (name)

.PARAMETER UserId
User (ID)

.PARAMETER UserIdN
User (ID)

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedBookmarkList
#>
function Invoke-ExtrasBookmarksList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ObjectIdEmpty},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdGt},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdGte},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdLt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdLte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdN},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectType},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ObjectTypeN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectTypeId},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectTypeIdEmpty},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectTypeIdGt},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectTypeIdGte},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectTypeIdLt},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectTypeIdLte},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectTypeIdN},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${User},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UserId},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UserIdN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasBookmarksList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/bookmarks/'

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ObjectId) {
            $LocalVarQueryParameters['object_id'] = $ObjectId
        }

        if ($ObjectIdEmpty) {
            $LocalVarQueryParameters['object_id__empty'] = $ObjectIdEmpty
        }

        if ($ObjectIdGt) {
            $LocalVarQueryParameters['object_id__gt'] = $ObjectIdGt
        }

        if ($ObjectIdGte) {
            $LocalVarQueryParameters['object_id__gte'] = $ObjectIdGte
        }

        if ($ObjectIdLt) {
            $LocalVarQueryParameters['object_id__lt'] = $ObjectIdLt
        }

        if ($ObjectIdLte) {
            $LocalVarQueryParameters['object_id__lte'] = $ObjectIdLte
        }

        if ($ObjectIdN) {
            $LocalVarQueryParameters['object_id__n'] = $ObjectIdN
        }

        if ($ObjectType) {
            $LocalVarQueryParameters['object_type'] = $ObjectType
        }

        if ($ObjectTypeN) {
            $LocalVarQueryParameters['object_type__n'] = $ObjectTypeN
        }

        if ($ObjectTypeId) {
            $LocalVarQueryParameters['object_type_id'] = $ObjectTypeId
        }

        if ($ObjectTypeIdEmpty) {
            $LocalVarQueryParameters['object_type_id__empty'] = $ObjectTypeIdEmpty
        }

        if ($ObjectTypeIdGt) {
            $LocalVarQueryParameters['object_type_id__gt'] = $ObjectTypeIdGt
        }

        if ($ObjectTypeIdGte) {
            $LocalVarQueryParameters['object_type_id__gte'] = $ObjectTypeIdGte
        }

        if ($ObjectTypeIdLt) {
            $LocalVarQueryParameters['object_type_id__lt'] = $ObjectTypeIdLt
        }

        if ($ObjectTypeIdLte) {
            $LocalVarQueryParameters['object_type_id__lte'] = $ObjectTypeIdLte
        }

        if ($ObjectTypeIdN) {
            $LocalVarQueryParameters['object_type_id__n'] = $ObjectTypeIdN
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($User) {
            $LocalVarQueryParameters['user'] = $User
        }

        if ($UserN) {
            $LocalVarQueryParameters['user__n'] = $UserN
        }

        if ($UserId) {
            $LocalVarQueryParameters['user_id'] = $UserId
        }

        if ($UserIdN) {
            $LocalVarQueryParameters['user_id__n'] = $UserIdN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedBookmarkList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this bookmark.

.PARAMETER PatchedWritableBookmarkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Bookmark
#>
function Invoke-ExtrasBookmarksPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableBookmarkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasBookmarksPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/bookmarks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasBookmarksPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableBookmarkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Bookmark" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this bookmark.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Bookmark
#>
function Invoke-ExtrasBookmarksRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasBookmarksRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/bookmarks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasBookmarksRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Bookmark" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this bookmark.

.PARAMETER WritableBookmarkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Bookmark
#>
function Invoke-ExtrasBookmarksUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableBookmarkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasBookmarksUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/bookmarks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasBookmarksUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableBookmarkRequest) {
            throw "Error! The required parameter `WritableBookmarkRequest` missing when calling extrasBookmarksUpdate."
        }

        $LocalVarBodyParameter = $WritableBookmarkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Bookmark" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasConfigContextsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigContextsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-contexts/'

        if (!$ConfigContextRequest) {
            throw "Error! The required parameter `ConfigContextRequest` missing when calling extrasConfigContextsBulkDestroy."
        }

        $LocalVarBodyParameter = $ConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigContext[]
#>
function Invoke-ExtrasConfigContextsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigContextsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-contexts/'

        if (!$ConfigContextRequest) {
            throw "Error! The required parameter `ConfigContextRequest` missing when calling extrasConfigContextsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigContext[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigContext[]
#>
function Invoke-ExtrasConfigContextsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigContextsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-contexts/'

        if (!$ConfigContextRequest) {
            throw "Error! The required parameter `ConfigContextRequest` missing when calling extrasConfigContextsBulkUpdate."
        }

        $LocalVarBodyParameter = $ConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigContext[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigContext
#>
function Invoke-ExtrasConfigContextsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigContextsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-contexts/'

        if (!$WritableConfigContextRequest) {
            throw "Error! The required parameter `WritableConfigContextRequest` missing when calling extrasConfigContextsCreate."
        }

        $LocalVarBodyParameter = $WritableConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this config context.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasConfigContextsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigContextsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/config-contexts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasConfigContextsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ClusterGroup
Cluster group (slug)

.PARAMETER ClusterGroupN
Cluster group (slug)

.PARAMETER ClusterGroupId
Cluster group

.PARAMETER ClusterGroupIdN
Cluster group

.PARAMETER ClusterId
Cluster

.PARAMETER ClusterIdN
Cluster

.PARAMETER ClusterType
Cluster type (slug)

.PARAMETER ClusterTypeN
Cluster type (slug)

.PARAMETER ClusterTypeId
Cluster type

.PARAMETER ClusterTypeIdN
Cluster type

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER DataFileId
Data file (ID)

.PARAMETER DataFileIdN
Data file (ID)

.PARAMETER DataSourceId
Data source (ID)

.PARAMETER DataSourceIdN
Data source (ID)

.PARAMETER DataSynced
No description available.

.PARAMETER DataSyncedEmpty
No description available.

.PARAMETER DataSyncedGt
No description available.

.PARAMETER DataSyncedGte
No description available.

.PARAMETER DataSyncedLt
No description available.

.PARAMETER DataSyncedLte
No description available.

.PARAMETER DataSyncedN
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER DeviceTypeId
Device type

.PARAMETER DeviceTypeIdN
Device type

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER IsActive
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Location
Location (slug)

.PARAMETER LocationN
Location (slug)

.PARAMETER LocationId
Location

.PARAMETER LocationIdN
Location

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Platform
Platform (slug)

.PARAMETER PlatformN
Platform (slug)

.PARAMETER PlatformId
Platform

.PARAMETER PlatformIdN
Platform

.PARAMETER Q
Search

.PARAMETER Region
Region (slug)

.PARAMETER RegionN
Region (slug)

.PARAMETER RegionId
Region

.PARAMETER RegionIdN
Region

.PARAMETER Role
Role (slug)

.PARAMETER RoleN
Role (slug)

.PARAMETER RoleId
Role

.PARAMETER RoleIdN
Role

.PARAMETER Site
Site (slug)

.PARAMETER SiteN
Site (slug)

.PARAMETER SiteGroup
Site group (slug)

.PARAMETER SiteGroupN
Site group (slug)

.PARAMETER SiteGroupId
Site group

.PARAMETER SiteGroupIdN
Site group

.PARAMETER SiteId
Site

.PARAMETER SiteIdN
Site

.PARAMETER Tag
Tag (slug)

.PARAMETER TagN
Tag (slug)

.PARAMETER TagId
Tag

.PARAMETER TagIdN
Tag

.PARAMETER Tenant
Tenant (slug)

.PARAMETER TenantN
Tenant (slug)

.PARAMETER TenantGroup
Tenant group (slug)

.PARAMETER TenantGroupN
Tenant group (slug)

.PARAMETER TenantGroupId
Tenant group

.PARAMETER TenantGroupIdN
Tenant group

.PARAMETER TenantId
Tenant

.PARAMETER TenantIdN
Tenant

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedConfigContextList
#>
function Invoke-ExtrasConfigContextsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ClusterGroup},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ClusterGroupN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ClusterGroupId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ClusterGroupIdN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ClusterId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ClusterIdN},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ClusterType},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ClusterTypeN},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ClusterTypeId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ClusterTypeIdN},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataFileId},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataFileIdN},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataSourceId},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataSourceIdN},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSynced},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DataSyncedEmpty},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedGt},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedGte},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedLt},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedLte},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeId},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DeviceTypeIdN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IsActive},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Location},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${LocationN},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationId},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${LocationIdN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Platform},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PlatformN},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PlatformId},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${PlatformIdN},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Region},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RegionN},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionId},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RegionIdN},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Role},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${RoleN},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleId},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${RoleIdN},
        [Parameter(Position = 89, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Site},
        [Parameter(Position = 90, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteN},
        [Parameter(Position = 91, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteGroup},
        [Parameter(Position = 92, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SiteGroupN},
        [Parameter(Position = 93, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupId},
        [Parameter(Position = 94, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteGroupIdN},
        [Parameter(Position = 95, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteId},
        [Parameter(Position = 96, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SiteIdN},
        [Parameter(Position = 97, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 98, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 99, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TagId},
        [Parameter(Position = 100, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TagIdN},
        [Parameter(Position = 101, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tenant},
        [Parameter(Position = 102, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantN},
        [Parameter(Position = 103, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantGroup},
        [Parameter(Position = 104, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TenantGroupN},
        [Parameter(Position = 105, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupId},
        [Parameter(Position = 106, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantGroupIdN},
        [Parameter(Position = 107, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantId},
        [Parameter(Position = 108, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${TenantIdN},
        [Parameter(Position = 109, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigContextsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/config-contexts/'

        if ($ClusterGroup) {
            $LocalVarQueryParameters['cluster_group'] = $ClusterGroup
        }

        if ($ClusterGroupN) {
            $LocalVarQueryParameters['cluster_group__n'] = $ClusterGroupN
        }

        if ($ClusterGroupId) {
            $LocalVarQueryParameters['cluster_group_id'] = $ClusterGroupId
        }

        if ($ClusterGroupIdN) {
            $LocalVarQueryParameters['cluster_group_id__n'] = $ClusterGroupIdN
        }

        if ($ClusterId) {
            $LocalVarQueryParameters['cluster_id'] = $ClusterId
        }

        if ($ClusterIdN) {
            $LocalVarQueryParameters['cluster_id__n'] = $ClusterIdN
        }

        if ($ClusterType) {
            $LocalVarQueryParameters['cluster_type'] = $ClusterType
        }

        if ($ClusterTypeN) {
            $LocalVarQueryParameters['cluster_type__n'] = $ClusterTypeN
        }

        if ($ClusterTypeId) {
            $LocalVarQueryParameters['cluster_type_id'] = $ClusterTypeId
        }

        if ($ClusterTypeIdN) {
            $LocalVarQueryParameters['cluster_type_id__n'] = $ClusterTypeIdN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($DataFileId) {
            $LocalVarQueryParameters['data_file_id'] = $DataFileId
        }

        if ($DataFileIdN) {
            $LocalVarQueryParameters['data_file_id__n'] = $DataFileIdN
        }

        if ($DataSourceId) {
            $LocalVarQueryParameters['data_source_id'] = $DataSourceId
        }

        if ($DataSourceIdN) {
            $LocalVarQueryParameters['data_source_id__n'] = $DataSourceIdN
        }

        if ($DataSynced) {
            $LocalVarQueryParameters['data_synced'] = $DataSynced
        }

        if ($DataSyncedEmpty) {
            $LocalVarQueryParameters['data_synced__empty'] = $DataSyncedEmpty
        }

        if ($DataSyncedGt) {
            $LocalVarQueryParameters['data_synced__gt'] = $DataSyncedGt
        }

        if ($DataSyncedGte) {
            $LocalVarQueryParameters['data_synced__gte'] = $DataSyncedGte
        }

        if ($DataSyncedLt) {
            $LocalVarQueryParameters['data_synced__lt'] = $DataSyncedLt
        }

        if ($DataSyncedLte) {
            $LocalVarQueryParameters['data_synced__lte'] = $DataSyncedLte
        }

        if ($DataSyncedN) {
            $LocalVarQueryParameters['data_synced__n'] = $DataSyncedN
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($DeviceTypeId) {
            $LocalVarQueryParameters['device_type_id'] = $DeviceTypeId
        }

        if ($DeviceTypeIdN) {
            $LocalVarQueryParameters['device_type_id__n'] = $DeviceTypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($IsActive) {
            $LocalVarQueryParameters['is_active'] = $IsActive
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Location) {
            $LocalVarQueryParameters['location'] = $Location
        }

        if ($LocationN) {
            $LocalVarQueryParameters['location__n'] = $LocationN
        }

        if ($LocationId) {
            $LocalVarQueryParameters['location_id'] = $LocationId
        }

        if ($LocationIdN) {
            $LocalVarQueryParameters['location_id__n'] = $LocationIdN
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Platform) {
            $LocalVarQueryParameters['platform'] = $Platform
        }

        if ($PlatformN) {
            $LocalVarQueryParameters['platform__n'] = $PlatformN
        }

        if ($PlatformId) {
            $LocalVarQueryParameters['platform_id'] = $PlatformId
        }

        if ($PlatformIdN) {
            $LocalVarQueryParameters['platform_id__n'] = $PlatformIdN
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Region) {
            $LocalVarQueryParameters['region'] = $Region
        }

        if ($RegionN) {
            $LocalVarQueryParameters['region__n'] = $RegionN
        }

        if ($RegionId) {
            $LocalVarQueryParameters['region_id'] = $RegionId
        }

        if ($RegionIdN) {
            $LocalVarQueryParameters['region_id__n'] = $RegionIdN
        }

        if ($Role) {
            $LocalVarQueryParameters['role'] = $Role
        }

        if ($RoleN) {
            $LocalVarQueryParameters['role__n'] = $RoleN
        }

        if ($RoleId) {
            $LocalVarQueryParameters['role_id'] = $RoleId
        }

        if ($RoleIdN) {
            $LocalVarQueryParameters['role_id__n'] = $RoleIdN
        }

        if ($Site) {
            $LocalVarQueryParameters['site'] = $Site
        }

        if ($SiteN) {
            $LocalVarQueryParameters['site__n'] = $SiteN
        }

        if ($SiteGroup) {
            $LocalVarQueryParameters['site_group'] = $SiteGroup
        }

        if ($SiteGroupN) {
            $LocalVarQueryParameters['site_group__n'] = $SiteGroupN
        }

        if ($SiteGroupId) {
            $LocalVarQueryParameters['site_group_id'] = $SiteGroupId
        }

        if ($SiteGroupIdN) {
            $LocalVarQueryParameters['site_group_id__n'] = $SiteGroupIdN
        }

        if ($SiteId) {
            $LocalVarQueryParameters['site_id'] = $SiteId
        }

        if ($SiteIdN) {
            $LocalVarQueryParameters['site_id__n'] = $SiteIdN
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($TagId) {
            $LocalVarQueryParameters['tag_id'] = $TagId
        }

        if ($TagIdN) {
            $LocalVarQueryParameters['tag_id__n'] = $TagIdN
        }

        if ($Tenant) {
            $LocalVarQueryParameters['tenant'] = $Tenant
        }

        if ($TenantN) {
            $LocalVarQueryParameters['tenant__n'] = $TenantN
        }

        if ($TenantGroup) {
            $LocalVarQueryParameters['tenant_group'] = $TenantGroup
        }

        if ($TenantGroupN) {
            $LocalVarQueryParameters['tenant_group__n'] = $TenantGroupN
        }

        if ($TenantGroupId) {
            $LocalVarQueryParameters['tenant_group_id'] = $TenantGroupId
        }

        if ($TenantGroupIdN) {
            $LocalVarQueryParameters['tenant_group_id__n'] = $TenantGroupIdN
        }

        if ($TenantId) {
            $LocalVarQueryParameters['tenant_id'] = $TenantId
        }

        if ($TenantIdN) {
            $LocalVarQueryParameters['tenant_id__n'] = $TenantIdN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedConfigContextList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this config context.

.PARAMETER PatchedWritableConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigContext
#>
function Invoke-ExtrasConfigContextsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigContextsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-contexts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasConfigContextsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this config context.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigContext
#>
function Invoke-ExtrasConfigContextsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigContextsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/config-contexts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasConfigContextsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this config context.

.PARAMETER WritableConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigContext
#>
function Invoke-ExtrasConfigContextsSyncCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigContextsSyncCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-contexts/{id}/sync/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasConfigContextsSyncCreate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableConfigContextRequest) {
            throw "Error! The required parameter `WritableConfigContextRequest` missing when calling extrasConfigContextsSyncCreate."
        }

        $LocalVarBodyParameter = $WritableConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this config context.

.PARAMETER WritableConfigContextRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigContext
#>
function Invoke-ExtrasConfigContextsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConfigContextRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigContextsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-contexts/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasConfigContextsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableConfigContextRequest) {
            throw "Error! The required parameter `WritableConfigContextRequest` missing when calling extrasConfigContextsUpdate."
        }

        $LocalVarBodyParameter = $WritableConfigContextRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigContext" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConfigTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasConfigTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConfigTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-templates/'

        if (!$ConfigTemplateRequest) {
            throw "Error! The required parameter `ConfigTemplateRequest` missing when calling extrasConfigTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $ConfigTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConfigTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigTemplate[]
#>
function Invoke-ExtrasConfigTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConfigTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-templates/'

        if (!$ConfigTemplateRequest) {
            throw "Error! The required parameter `ConfigTemplateRequest` missing when calling extrasConfigTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ConfigTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ConfigTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigTemplate[]
#>
function Invoke-ExtrasConfigTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ConfigTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-templates/'

        if (!$ConfigTemplateRequest) {
            throw "Error! The required parameter `ConfigTemplateRequest` missing when calling extrasConfigTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $ConfigTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableConfigTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigTemplate
#>
function Invoke-ExtrasConfigTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConfigTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-templates/'

        if (!$WritableConfigTemplateRequest) {
            throw "Error! The required parameter `WritableConfigTemplateRequest` missing when calling extrasConfigTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritableConfigTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this config template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasConfigTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/config-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasConfigTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DataFileId
Data file (ID)

.PARAMETER DataFileIdN
Data file (ID)

.PARAMETER DataSourceId
Data source (ID)

.PARAMETER DataSourceIdN
Data source (ID)

.PARAMETER DataSynced
No description available.

.PARAMETER DataSyncedEmpty
No description available.

.PARAMETER DataSyncedGt
No description available.

.PARAMETER DataSyncedGte
No description available.

.PARAMETER DataSyncedLt
No description available.

.PARAMETER DataSyncedLte
No description available.

.PARAMETER DataSyncedN
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedConfigTemplateList
#>
function Invoke-ExtrasConfigTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataFileId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataFileIdN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataSourceId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataSourceIdN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSynced},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DataSyncedEmpty},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedGt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedGte},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedLt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedLte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedN},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/config-templates/'

        if ($DataFileId) {
            $LocalVarQueryParameters['data_file_id'] = $DataFileId
        }

        if ($DataFileIdN) {
            $LocalVarQueryParameters['data_file_id__n'] = $DataFileIdN
        }

        if ($DataSourceId) {
            $LocalVarQueryParameters['data_source_id'] = $DataSourceId
        }

        if ($DataSourceIdN) {
            $LocalVarQueryParameters['data_source_id__n'] = $DataSourceIdN
        }

        if ($DataSynced) {
            $LocalVarQueryParameters['data_synced'] = $DataSynced
        }

        if ($DataSyncedEmpty) {
            $LocalVarQueryParameters['data_synced__empty'] = $DataSyncedEmpty
        }

        if ($DataSyncedGt) {
            $LocalVarQueryParameters['data_synced__gt'] = $DataSyncedGt
        }

        if ($DataSyncedGte) {
            $LocalVarQueryParameters['data_synced__gte'] = $DataSyncedGte
        }

        if ($DataSyncedLt) {
            $LocalVarQueryParameters['data_synced__lt'] = $DataSyncedLt
        }

        if ($DataSyncedLte) {
            $LocalVarQueryParameters['data_synced__lte'] = $DataSyncedLte
        }

        if ($DataSyncedN) {
            $LocalVarQueryParameters['data_synced__n'] = $DataSyncedN
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedConfigTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this config template.

.PARAMETER PatchedWritableConfigTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigTemplate
#>
function Invoke-ExtrasConfigTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableConfigTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasConfigTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableConfigTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this config template.

.PARAMETER WritableConfigTemplateRequest
No description available.

.PARAMETER Format
No description available.

.PARAMETER ReturnType

Select the return type (optional): application/json, text/plain

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigTemplate
#>
function Invoke-ExtrasConfigTemplatesRenderCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConfigTemplateRequest},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [ValidateSet("json", "txt")]
        [String]
        ${Format},
        [String]
        [ValidateSet("application/json", "text/plain")]
        $ReturnType,
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigTemplatesRenderCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json', 'text/plain')

        if ($ReturnType) {
            # use the return type (MIME) provided by the user
            $LocalVarAccepts = @($ReturnType)
        }

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-templates/{id}/render/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasConfigTemplatesRenderCreate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Format) {
            $LocalVarQueryParameters['format'] = $Format
        }

        if (!$WritableConfigTemplateRequest) {
            throw "Error! The required parameter `WritableConfigTemplateRequest` missing when calling extrasConfigTemplatesRenderCreate."
        }

        $LocalVarBodyParameter = $WritableConfigTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this config template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigTemplate
#>
function Invoke-ExtrasConfigTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/config-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasConfigTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this config template.

.PARAMETER WritableConfigTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigTemplate
#>
function Invoke-ExtrasConfigTemplatesSyncCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConfigTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigTemplatesSyncCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-templates/{id}/sync/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasConfigTemplatesSyncCreate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableConfigTemplateRequest) {
            throw "Error! The required parameter `WritableConfigTemplateRequest` missing when calling extrasConfigTemplatesSyncCreate."
        }

        $LocalVarBodyParameter = $WritableConfigTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this config template.

.PARAMETER WritableConfigTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ConfigTemplate
#>
function Invoke-ExtrasConfigTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableConfigTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasConfigTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/config-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasConfigTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableConfigTemplateRequest) {
            throw "Error! The required parameter `WritableConfigTemplateRequest` missing when calling extrasConfigTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritableConfigTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ConfigTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AppLabel
No description available.

.PARAMETER Id
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Model
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedContentTypeList
#>
function Invoke-ExtrasContentTypesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AppLabel},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Id},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Model},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasContentTypesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/content-types/'

        if ($AppLabel) {
            $LocalVarQueryParameters['app_label'] = $AppLabel
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Model) {
            $LocalVarQueryParameters['model'] = $Model
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedContentTypeList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this content type.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ContentType
#>
function Invoke-ExtrasContentTypesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasContentTypesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/content-types/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasContentTypesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ContentType" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomFieldChoiceSetRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasCustomFieldChoiceSetsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CustomFieldChoiceSetRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldChoiceSetsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-field-choice-sets/'

        if (!$CustomFieldChoiceSetRequest) {
            throw "Error! The required parameter `CustomFieldChoiceSetRequest` missing when calling extrasCustomFieldChoiceSetsBulkDestroy."
        }

        $LocalVarBodyParameter = $CustomFieldChoiceSetRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomFieldChoiceSetRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomFieldChoiceSet[]
#>
function Invoke-ExtrasCustomFieldChoiceSetsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CustomFieldChoiceSetRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldChoiceSetsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-field-choice-sets/'

        if (!$CustomFieldChoiceSetRequest) {
            throw "Error! The required parameter `CustomFieldChoiceSetRequest` missing when calling extrasCustomFieldChoiceSetsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $CustomFieldChoiceSetRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomFieldChoiceSet[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomFieldChoiceSetRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomFieldChoiceSet[]
#>
function Invoke-ExtrasCustomFieldChoiceSetsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CustomFieldChoiceSetRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldChoiceSetsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-field-choice-sets/'

        if (!$CustomFieldChoiceSetRequest) {
            throw "Error! The required parameter `CustomFieldChoiceSetRequest` missing when calling extrasCustomFieldChoiceSetsBulkUpdate."
        }

        $LocalVarBodyParameter = $CustomFieldChoiceSetRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomFieldChoiceSet[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom field choice set.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomFieldChoiceSet
#>
function Invoke-ExtrasCustomFieldChoiceSetsChoicesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldChoiceSetsChoicesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/custom-field-choice-sets/{id}/choices/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomFieldChoiceSetsChoicesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomFieldChoiceSet" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableCustomFieldChoiceSetRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomFieldChoiceSet
#>
function Invoke-ExtrasCustomFieldChoiceSetsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableCustomFieldChoiceSetRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldChoiceSetsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-field-choice-sets/'

        if (!$WritableCustomFieldChoiceSetRequest) {
            throw "Error! The required parameter `WritableCustomFieldChoiceSetRequest` missing when calling extrasCustomFieldChoiceSetsCreate."
        }

        $LocalVarBodyParameter = $WritableCustomFieldChoiceSetRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomFieldChoiceSet" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom field choice set.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasCustomFieldChoiceSetsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldChoiceSetsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/custom-field-choice-sets/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomFieldChoiceSetsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER BaseChoices
Base set of predefined choices (optional)

.PARAMETER BaseChoicesN
Base set of predefined choices (optional)

.PARAMETER Choice
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER OrderAlphabetically
No description available.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedCustomFieldChoiceSetList
#>
function Invoke-ExtrasCustomFieldChoiceSetsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BaseChoices},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BaseChoicesN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Choice},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${OrderAlphabetically},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldChoiceSetsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/custom-field-choice-sets/'

        if ($BaseChoices) {
            $LocalVarQueryParameters['base_choices'] = $BaseChoices
        }

        if ($BaseChoicesN) {
            $LocalVarQueryParameters['base_choices__n'] = $BaseChoicesN
        }

        if ($Choice) {
            $LocalVarQueryParameters['choice'] = $Choice
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($OrderAlphabetically) {
            $LocalVarQueryParameters['order_alphabetically'] = $OrderAlphabetically
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedCustomFieldChoiceSetList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom field choice set.

.PARAMETER PatchedWritableCustomFieldChoiceSetRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomFieldChoiceSet
#>
function Invoke-ExtrasCustomFieldChoiceSetsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableCustomFieldChoiceSetRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldChoiceSetsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-field-choice-sets/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomFieldChoiceSetsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableCustomFieldChoiceSetRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomFieldChoiceSet" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom field choice set.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomFieldChoiceSet
#>
function Invoke-ExtrasCustomFieldChoiceSetsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldChoiceSetsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/custom-field-choice-sets/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomFieldChoiceSetsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomFieldChoiceSet" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom field choice set.

.PARAMETER WritableCustomFieldChoiceSetRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomFieldChoiceSet
#>
function Invoke-ExtrasCustomFieldChoiceSetsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableCustomFieldChoiceSetRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldChoiceSetsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-field-choice-sets/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomFieldChoiceSetsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableCustomFieldChoiceSetRequest) {
            throw "Error! The required parameter `WritableCustomFieldChoiceSetRequest` missing when calling extrasCustomFieldChoiceSetsUpdate."
        }

        $LocalVarBodyParameter = $WritableCustomFieldChoiceSetRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomFieldChoiceSet" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomFieldRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasCustomFieldsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CustomFieldRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-fields/'

        if (!$CustomFieldRequest) {
            throw "Error! The required parameter `CustomFieldRequest` missing when calling extrasCustomFieldsBulkDestroy."
        }

        $LocalVarBodyParameter = $CustomFieldRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomFieldRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomField[]
#>
function Invoke-ExtrasCustomFieldsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CustomFieldRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-fields/'

        if (!$CustomFieldRequest) {
            throw "Error! The required parameter `CustomFieldRequest` missing when calling extrasCustomFieldsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $CustomFieldRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomField[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomFieldRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomField[]
#>
function Invoke-ExtrasCustomFieldsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CustomFieldRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-fields/'

        if (!$CustomFieldRequest) {
            throw "Error! The required parameter `CustomFieldRequest` missing when calling extrasCustomFieldsBulkUpdate."
        }

        $LocalVarBodyParameter = $CustomFieldRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomField[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableCustomFieldRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomField
#>
function Invoke-ExtrasCustomFieldsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableCustomFieldRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-fields/'

        if (!$WritableCustomFieldRequest) {
            throw "Error! The required parameter `WritableCustomFieldRequest` missing when calling extrasCustomFieldsCreate."
        }

        $LocalVarBodyParameter = $WritableCustomFieldRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomField" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom field.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasCustomFieldsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/custom-fields/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomFieldsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ChoiceSet
No description available.

.PARAMETER ChoiceSetN
No description available.

.PARAMETER ChoiceSetId
No description available.

.PARAMETER ChoiceSetIdN
No description available.

.PARAMETER ContentTypeId
No description available.

.PARAMETER ContentTypeIdEmpty
No description available.

.PARAMETER ContentTypeIdGt
No description available.

.PARAMETER ContentTypeIdGte
No description available.

.PARAMETER ContentTypeIdLt
No description available.

.PARAMETER ContentTypeIdLte
No description available.

.PARAMETER ContentTypeIdN
No description available.

.PARAMETER ContentTypes
No description available.

.PARAMETER ContentTypesIc
No description available.

.PARAMETER ContentTypesIe
No description available.

.PARAMETER ContentTypesIew
No description available.

.PARAMETER ContentTypesIsw
No description available.

.PARAMETER ContentTypesN
No description available.

.PARAMETER ContentTypesNic
No description available.

.PARAMETER ContentTypesNie
No description available.

.PARAMETER ContentTypesNiew
No description available.

.PARAMETER ContentTypesNisw
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER FilterLogic
Loose matches any instance of a given string; exact matches the entire field.

.PARAMETER FilterLogicN
Loose matches any instance of a given string; exact matches the entire field.

.PARAMETER GroupName
No description available.

.PARAMETER GroupNameEmpty
No description available.

.PARAMETER GroupNameIc
No description available.

.PARAMETER GroupNameIe
No description available.

.PARAMETER GroupNameIew
No description available.

.PARAMETER GroupNameIsw
No description available.

.PARAMETER GroupNameN
No description available.

.PARAMETER GroupNameNic
No description available.

.PARAMETER GroupNameNie
No description available.

.PARAMETER GroupNameNiew
No description available.

.PARAMETER GroupNameNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER IsCloneable
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Required
No description available.

.PARAMETER SearchWeight
No description available.

.PARAMETER SearchWeightEmpty
No description available.

.PARAMETER SearchWeightGt
No description available.

.PARAMETER SearchWeightGte
No description available.

.PARAMETER SearchWeightLt
No description available.

.PARAMETER SearchWeightLte
No description available.

.PARAMETER SearchWeightN
No description available.

.PARAMETER Type
The type of data this custom field holds

.PARAMETER TypeN
The type of data this custom field holds

.PARAMETER UiEditable
Specifies whether the custom field value can be edited in the UI

.PARAMETER UiEditableN
Specifies whether the custom field value can be edited in the UI

.PARAMETER UiVisible
Specifies whether the custom field is displayed in the UI

.PARAMETER UiVisibleN
Specifies whether the custom field is displayed in the UI

.PARAMETER Weight
No description available.

.PARAMETER WeightEmpty
No description available.

.PARAMETER WeightGt
No description available.

.PARAMETER WeightGte
No description available.

.PARAMETER WeightLt
No description available.

.PARAMETER WeightLte
No description available.

.PARAMETER WeightN
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedCustomFieldList
#>
function Invoke-ExtrasCustomFieldsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ChoiceSet},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ChoiceSetN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ChoiceSetId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ChoiceSetIdN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdEmpty},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdGt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdGte},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdLt},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdLte},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdN},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypes},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIc},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIe},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIew},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIsw},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesN},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNic},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNie},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNiew},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNisw},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FilterLogic},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${FilterLogicN},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupName},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${GroupNameEmpty},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameIc},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameIe},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameIew},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameIsw},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameN},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameNic},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameNie},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameNiew},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameNisw},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IsCloneable},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Required},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SearchWeight},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SearchWeightEmpty},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SearchWeightGt},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SearchWeightGte},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SearchWeightLt},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SearchWeightLte},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${SearchWeightN},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Type},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TypeN},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UiEditable},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UiEditableN},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UiVisible},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UiVisibleN},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Weight},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${WeightEmpty},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightGt},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightGte},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightLt},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightLte},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/custom-fields/'

        if ($ChoiceSet) {
            $LocalVarQueryParameters['choice_set'] = $ChoiceSet
        }

        if ($ChoiceSetN) {
            $LocalVarQueryParameters['choice_set__n'] = $ChoiceSetN
        }

        if ($ChoiceSetId) {
            $LocalVarQueryParameters['choice_set_id'] = $ChoiceSetId
        }

        if ($ChoiceSetIdN) {
            $LocalVarQueryParameters['choice_set_id__n'] = $ChoiceSetIdN
        }

        if ($ContentTypeId) {
            $LocalVarQueryParameters['content_type_id'] = $ContentTypeId
        }

        if ($ContentTypeIdEmpty) {
            $LocalVarQueryParameters['content_type_id__empty'] = $ContentTypeIdEmpty
        }

        if ($ContentTypeIdGt) {
            $LocalVarQueryParameters['content_type_id__gt'] = $ContentTypeIdGt
        }

        if ($ContentTypeIdGte) {
            $LocalVarQueryParameters['content_type_id__gte'] = $ContentTypeIdGte
        }

        if ($ContentTypeIdLt) {
            $LocalVarQueryParameters['content_type_id__lt'] = $ContentTypeIdLt
        }

        if ($ContentTypeIdLte) {
            $LocalVarQueryParameters['content_type_id__lte'] = $ContentTypeIdLte
        }

        if ($ContentTypeIdN) {
            $LocalVarQueryParameters['content_type_id__n'] = $ContentTypeIdN
        }

        if ($ContentTypes) {
            $LocalVarQueryParameters['content_types'] = $ContentTypes
        }

        if ($ContentTypesIc) {
            $LocalVarQueryParameters['content_types__ic'] = $ContentTypesIc
        }

        if ($ContentTypesIe) {
            $LocalVarQueryParameters['content_types__ie'] = $ContentTypesIe
        }

        if ($ContentTypesIew) {
            $LocalVarQueryParameters['content_types__iew'] = $ContentTypesIew
        }

        if ($ContentTypesIsw) {
            $LocalVarQueryParameters['content_types__isw'] = $ContentTypesIsw
        }

        if ($ContentTypesN) {
            $LocalVarQueryParameters['content_types__n'] = $ContentTypesN
        }

        if ($ContentTypesNic) {
            $LocalVarQueryParameters['content_types__nic'] = $ContentTypesNic
        }

        if ($ContentTypesNie) {
            $LocalVarQueryParameters['content_types__nie'] = $ContentTypesNie
        }

        if ($ContentTypesNiew) {
            $LocalVarQueryParameters['content_types__niew'] = $ContentTypesNiew
        }

        if ($ContentTypesNisw) {
            $LocalVarQueryParameters['content_types__nisw'] = $ContentTypesNisw
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($FilterLogic) {
            $LocalVarQueryParameters['filter_logic'] = $FilterLogic
        }

        if ($FilterLogicN) {
            $LocalVarQueryParameters['filter_logic__n'] = $FilterLogicN
        }

        if ($GroupName) {
            $LocalVarQueryParameters['group_name'] = $GroupName
        }

        if ($GroupNameEmpty) {
            $LocalVarQueryParameters['group_name__empty'] = $GroupNameEmpty
        }

        if ($GroupNameIc) {
            $LocalVarQueryParameters['group_name__ic'] = $GroupNameIc
        }

        if ($GroupNameIe) {
            $LocalVarQueryParameters['group_name__ie'] = $GroupNameIe
        }

        if ($GroupNameIew) {
            $LocalVarQueryParameters['group_name__iew'] = $GroupNameIew
        }

        if ($GroupNameIsw) {
            $LocalVarQueryParameters['group_name__isw'] = $GroupNameIsw
        }

        if ($GroupNameN) {
            $LocalVarQueryParameters['group_name__n'] = $GroupNameN
        }

        if ($GroupNameNic) {
            $LocalVarQueryParameters['group_name__nic'] = $GroupNameNic
        }

        if ($GroupNameNie) {
            $LocalVarQueryParameters['group_name__nie'] = $GroupNameNie
        }

        if ($GroupNameNiew) {
            $LocalVarQueryParameters['group_name__niew'] = $GroupNameNiew
        }

        if ($GroupNameNisw) {
            $LocalVarQueryParameters['group_name__nisw'] = $GroupNameNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($IsCloneable) {
            $LocalVarQueryParameters['is_cloneable'] = $IsCloneable
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Required) {
            $LocalVarQueryParameters['required'] = $Required
        }

        if ($SearchWeight) {
            $LocalVarQueryParameters['search_weight'] = $SearchWeight
        }

        if ($SearchWeightEmpty) {
            $LocalVarQueryParameters['search_weight__empty'] = $SearchWeightEmpty
        }

        if ($SearchWeightGt) {
            $LocalVarQueryParameters['search_weight__gt'] = $SearchWeightGt
        }

        if ($SearchWeightGte) {
            $LocalVarQueryParameters['search_weight__gte'] = $SearchWeightGte
        }

        if ($SearchWeightLt) {
            $LocalVarQueryParameters['search_weight__lt'] = $SearchWeightLt
        }

        if ($SearchWeightLte) {
            $LocalVarQueryParameters['search_weight__lte'] = $SearchWeightLte
        }

        if ($SearchWeightN) {
            $LocalVarQueryParameters['search_weight__n'] = $SearchWeightN
        }

        if ($Type) {
            $LocalVarQueryParameters['type'] = $Type
        }

        if ($TypeN) {
            $LocalVarQueryParameters['type__n'] = $TypeN
        }

        if ($UiEditable) {
            $LocalVarQueryParameters['ui_editable'] = $UiEditable
        }

        if ($UiEditableN) {
            $LocalVarQueryParameters['ui_editable__n'] = $UiEditableN
        }

        if ($UiVisible) {
            $LocalVarQueryParameters['ui_visible'] = $UiVisible
        }

        if ($UiVisibleN) {
            $LocalVarQueryParameters['ui_visible__n'] = $UiVisibleN
        }

        if ($Weight) {
            $LocalVarQueryParameters['weight'] = $Weight
        }

        if ($WeightEmpty) {
            $LocalVarQueryParameters['weight__empty'] = $WeightEmpty
        }

        if ($WeightGt) {
            $LocalVarQueryParameters['weight__gt'] = $WeightGt
        }

        if ($WeightGte) {
            $LocalVarQueryParameters['weight__gte'] = $WeightGte
        }

        if ($WeightLt) {
            $LocalVarQueryParameters['weight__lt'] = $WeightLt
        }

        if ($WeightLte) {
            $LocalVarQueryParameters['weight__lte'] = $WeightLte
        }

        if ($WeightN) {
            $LocalVarQueryParameters['weight__n'] = $WeightN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedCustomFieldList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom field.

.PARAMETER PatchedWritableCustomFieldRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomField
#>
function Invoke-ExtrasCustomFieldsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableCustomFieldRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-fields/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomFieldsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableCustomFieldRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomField" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom field.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomField
#>
function Invoke-ExtrasCustomFieldsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/custom-fields/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomFieldsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomField" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom field.

.PARAMETER WritableCustomFieldRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomField
#>
function Invoke-ExtrasCustomFieldsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableCustomFieldRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomFieldsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-fields/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomFieldsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableCustomFieldRequest) {
            throw "Error! The required parameter `WritableCustomFieldRequest` missing when calling extrasCustomFieldsUpdate."
        }

        $LocalVarBodyParameter = $WritableCustomFieldRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomField" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasCustomLinksBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CustomLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomLinksBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-links/'

        if (!$CustomLinkRequest) {
            throw "Error! The required parameter `CustomLinkRequest` missing when calling extrasCustomLinksBulkDestroy."
        }

        $LocalVarBodyParameter = $CustomLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomLink[]
#>
function Invoke-ExtrasCustomLinksBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CustomLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomLinksBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-links/'

        if (!$CustomLinkRequest) {
            throw "Error! The required parameter `CustomLinkRequest` missing when calling extrasCustomLinksBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $CustomLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomLink[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomLink[]
#>
function Invoke-ExtrasCustomLinksBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${CustomLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomLinksBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-links/'

        if (!$CustomLinkRequest) {
            throw "Error! The required parameter `CustomLinkRequest` missing when calling extrasCustomLinksBulkUpdate."
        }

        $LocalVarBodyParameter = $CustomLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomLink[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CustomLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomLink
#>
function Invoke-ExtrasCustomLinksCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${CustomLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomLinksCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-links/'

        if (!$CustomLinkRequest) {
            throw "Error! The required parameter `CustomLinkRequest` missing when calling extrasCustomLinksCreate."
        }

        $LocalVarBodyParameter = $CustomLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomLink" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom link.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasCustomLinksDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomLinksDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/custom-links/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomLinksDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContentTypeId
No description available.

.PARAMETER ContentTypeIdEmpty
No description available.

.PARAMETER ContentTypeIdGt
No description available.

.PARAMETER ContentTypeIdGte
No description available.

.PARAMETER ContentTypeIdLt
No description available.

.PARAMETER ContentTypeIdLte
No description available.

.PARAMETER ContentTypeIdN
No description available.

.PARAMETER ContentTypes
No description available.

.PARAMETER ContentTypesIc
No description available.

.PARAMETER ContentTypesIe
No description available.

.PARAMETER ContentTypesIew
No description available.

.PARAMETER ContentTypesIsw
No description available.

.PARAMETER ContentTypesN
No description available.

.PARAMETER ContentTypesNic
No description available.

.PARAMETER ContentTypesNie
No description available.

.PARAMETER ContentTypesNiew
No description available.

.PARAMETER ContentTypesNisw
No description available.

.PARAMETER Enabled
No description available.

.PARAMETER GroupName
No description available.

.PARAMETER GroupNameEmpty
No description available.

.PARAMETER GroupNameIc
No description available.

.PARAMETER GroupNameIe
No description available.

.PARAMETER GroupNameIew
No description available.

.PARAMETER GroupNameIsw
No description available.

.PARAMETER GroupNameN
No description available.

.PARAMETER GroupNameNic
No description available.

.PARAMETER GroupNameNie
No description available.

.PARAMETER GroupNameNiew
No description available.

.PARAMETER GroupNameNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER LinkText
No description available.

.PARAMETER LinkTextIc
No description available.

.PARAMETER LinkTextIe
No description available.

.PARAMETER LinkTextIew
No description available.

.PARAMETER LinkTextIsw
No description available.

.PARAMETER LinkTextN
No description available.

.PARAMETER LinkTextNic
No description available.

.PARAMETER LinkTextNie
No description available.

.PARAMETER LinkTextNiew
No description available.

.PARAMETER LinkTextNisw
No description available.

.PARAMETER LinkUrl
No description available.

.PARAMETER LinkUrlIc
No description available.

.PARAMETER LinkUrlIe
No description available.

.PARAMETER LinkUrlIew
No description available.

.PARAMETER LinkUrlIsw
No description available.

.PARAMETER LinkUrlN
No description available.

.PARAMETER LinkUrlNic
No description available.

.PARAMETER LinkUrlNie
No description available.

.PARAMETER LinkUrlNiew
No description available.

.PARAMETER LinkUrlNisw
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER NewWindow
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Weight
No description available.

.PARAMETER WeightEmpty
No description available.

.PARAMETER WeightGt
No description available.

.PARAMETER WeightGte
No description available.

.PARAMETER WeightLt
No description available.

.PARAMETER WeightLte
No description available.

.PARAMETER WeightN
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedCustomLinkList
#>
function Invoke-ExtrasCustomLinksList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypes},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIc},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIe},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIew},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIsw},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNic},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNie},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNiew},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNisw},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupName},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${GroupNameEmpty},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameIc},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameIe},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameIew},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameIsw},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameN},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameNic},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameNie},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameNiew},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${GroupNameNisw},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkText},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkTextIc},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkTextIe},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkTextIew},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkTextIsw},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkTextN},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkTextNic},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkTextNie},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkTextNiew},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkTextNisw},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkUrl},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkUrlIc},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkUrlIe},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkUrlIew},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkUrlIsw},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkUrlN},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkUrlNic},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkUrlNie},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkUrlNiew},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${LinkUrlNisw},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NewWindow},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Weight},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${WeightEmpty},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightGt},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightGte},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightLt},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightLte},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomLinksList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/custom-links/'

        if ($ContentTypeId) {
            $LocalVarQueryParameters['content_type_id'] = $ContentTypeId
        }

        if ($ContentTypeIdEmpty) {
            $LocalVarQueryParameters['content_type_id__empty'] = $ContentTypeIdEmpty
        }

        if ($ContentTypeIdGt) {
            $LocalVarQueryParameters['content_type_id__gt'] = $ContentTypeIdGt
        }

        if ($ContentTypeIdGte) {
            $LocalVarQueryParameters['content_type_id__gte'] = $ContentTypeIdGte
        }

        if ($ContentTypeIdLt) {
            $LocalVarQueryParameters['content_type_id__lt'] = $ContentTypeIdLt
        }

        if ($ContentTypeIdLte) {
            $LocalVarQueryParameters['content_type_id__lte'] = $ContentTypeIdLte
        }

        if ($ContentTypeIdN) {
            $LocalVarQueryParameters['content_type_id__n'] = $ContentTypeIdN
        }

        if ($ContentTypes) {
            $LocalVarQueryParameters['content_types'] = $ContentTypes
        }

        if ($ContentTypesIc) {
            $LocalVarQueryParameters['content_types__ic'] = $ContentTypesIc
        }

        if ($ContentTypesIe) {
            $LocalVarQueryParameters['content_types__ie'] = $ContentTypesIe
        }

        if ($ContentTypesIew) {
            $LocalVarQueryParameters['content_types__iew'] = $ContentTypesIew
        }

        if ($ContentTypesIsw) {
            $LocalVarQueryParameters['content_types__isw'] = $ContentTypesIsw
        }

        if ($ContentTypesN) {
            $LocalVarQueryParameters['content_types__n'] = $ContentTypesN
        }

        if ($ContentTypesNic) {
            $LocalVarQueryParameters['content_types__nic'] = $ContentTypesNic
        }

        if ($ContentTypesNie) {
            $LocalVarQueryParameters['content_types__nie'] = $ContentTypesNie
        }

        if ($ContentTypesNiew) {
            $LocalVarQueryParameters['content_types__niew'] = $ContentTypesNiew
        }

        if ($ContentTypesNisw) {
            $LocalVarQueryParameters['content_types__nisw'] = $ContentTypesNisw
        }

        if ($Enabled) {
            $LocalVarQueryParameters['enabled'] = $Enabled
        }

        if ($GroupName) {
            $LocalVarQueryParameters['group_name'] = $GroupName
        }

        if ($GroupNameEmpty) {
            $LocalVarQueryParameters['group_name__empty'] = $GroupNameEmpty
        }

        if ($GroupNameIc) {
            $LocalVarQueryParameters['group_name__ic'] = $GroupNameIc
        }

        if ($GroupNameIe) {
            $LocalVarQueryParameters['group_name__ie'] = $GroupNameIe
        }

        if ($GroupNameIew) {
            $LocalVarQueryParameters['group_name__iew'] = $GroupNameIew
        }

        if ($GroupNameIsw) {
            $LocalVarQueryParameters['group_name__isw'] = $GroupNameIsw
        }

        if ($GroupNameN) {
            $LocalVarQueryParameters['group_name__n'] = $GroupNameN
        }

        if ($GroupNameNic) {
            $LocalVarQueryParameters['group_name__nic'] = $GroupNameNic
        }

        if ($GroupNameNie) {
            $LocalVarQueryParameters['group_name__nie'] = $GroupNameNie
        }

        if ($GroupNameNiew) {
            $LocalVarQueryParameters['group_name__niew'] = $GroupNameNiew
        }

        if ($GroupNameNisw) {
            $LocalVarQueryParameters['group_name__nisw'] = $GroupNameNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($LinkText) {
            $LocalVarQueryParameters['link_text'] = $LinkText
        }

        if ($LinkTextIc) {
            $LocalVarQueryParameters['link_text__ic'] = $LinkTextIc
        }

        if ($LinkTextIe) {
            $LocalVarQueryParameters['link_text__ie'] = $LinkTextIe
        }

        if ($LinkTextIew) {
            $LocalVarQueryParameters['link_text__iew'] = $LinkTextIew
        }

        if ($LinkTextIsw) {
            $LocalVarQueryParameters['link_text__isw'] = $LinkTextIsw
        }

        if ($LinkTextN) {
            $LocalVarQueryParameters['link_text__n'] = $LinkTextN
        }

        if ($LinkTextNic) {
            $LocalVarQueryParameters['link_text__nic'] = $LinkTextNic
        }

        if ($LinkTextNie) {
            $LocalVarQueryParameters['link_text__nie'] = $LinkTextNie
        }

        if ($LinkTextNiew) {
            $LocalVarQueryParameters['link_text__niew'] = $LinkTextNiew
        }

        if ($LinkTextNisw) {
            $LocalVarQueryParameters['link_text__nisw'] = $LinkTextNisw
        }

        if ($LinkUrl) {
            $LocalVarQueryParameters['link_url'] = $LinkUrl
        }

        if ($LinkUrlIc) {
            $LocalVarQueryParameters['link_url__ic'] = $LinkUrlIc
        }

        if ($LinkUrlIe) {
            $LocalVarQueryParameters['link_url__ie'] = $LinkUrlIe
        }

        if ($LinkUrlIew) {
            $LocalVarQueryParameters['link_url__iew'] = $LinkUrlIew
        }

        if ($LinkUrlIsw) {
            $LocalVarQueryParameters['link_url__isw'] = $LinkUrlIsw
        }

        if ($LinkUrlN) {
            $LocalVarQueryParameters['link_url__n'] = $LinkUrlN
        }

        if ($LinkUrlNic) {
            $LocalVarQueryParameters['link_url__nic'] = $LinkUrlNic
        }

        if ($LinkUrlNie) {
            $LocalVarQueryParameters['link_url__nie'] = $LinkUrlNie
        }

        if ($LinkUrlNiew) {
            $LocalVarQueryParameters['link_url__niew'] = $LinkUrlNiew
        }

        if ($LinkUrlNisw) {
            $LocalVarQueryParameters['link_url__nisw'] = $LinkUrlNisw
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($NewWindow) {
            $LocalVarQueryParameters['new_window'] = $NewWindow
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Weight) {
            $LocalVarQueryParameters['weight'] = $Weight
        }

        if ($WeightEmpty) {
            $LocalVarQueryParameters['weight__empty'] = $WeightEmpty
        }

        if ($WeightGt) {
            $LocalVarQueryParameters['weight__gt'] = $WeightGt
        }

        if ($WeightGte) {
            $LocalVarQueryParameters['weight__gte'] = $WeightGte
        }

        if ($WeightLt) {
            $LocalVarQueryParameters['weight__lt'] = $WeightLt
        }

        if ($WeightLte) {
            $LocalVarQueryParameters['weight__lte'] = $WeightLte
        }

        if ($WeightN) {
            $LocalVarQueryParameters['weight__n'] = $WeightN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedCustomLinkList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom link.

.PARAMETER PatchedCustomLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomLink
#>
function Invoke-ExtrasCustomLinksPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedCustomLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomLinksPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-links/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomLinksPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedCustomLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomLink" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom link.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomLink
#>
function Invoke-ExtrasCustomLinksRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomLinksRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/custom-links/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomLinksRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomLink" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this custom link.

.PARAMETER CustomLinkRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

CustomLink
#>
function Invoke-ExtrasCustomLinksUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${CustomLinkRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasCustomLinksUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/custom-links/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasCustomLinksUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$CustomLinkRequest) {
            throw "Error! The required parameter `CustomLinkRequest` missing when calling extrasCustomLinksUpdate."
        }

        $LocalVarBodyParameter = $CustomLinkRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "CustomLink" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasDashboardDestroy {
    [CmdletBinding()]
    Param (
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasDashboardDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/dashboard/'

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER PatchedDashboardRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Dashboard
#>
function Invoke-ExtrasDashboardPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedDashboardRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasDashboardPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/dashboard/'

        $LocalVarBodyParameter = $PatchedDashboardRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Dashboard" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Dashboard
#>
function Invoke-ExtrasDashboardRetrieve {
    [CmdletBinding()]
    Param (
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasDashboardRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/dashboard/'

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Dashboard" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DashboardRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Dashboard
#>
function Invoke-ExtrasDashboardUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${DashboardRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasDashboardUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/dashboard/'

        $LocalVarBodyParameter = $DashboardRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Dashboard" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EventRuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasEventRulesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${EventRuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasEventRulesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/event-rules/'

        if (!$EventRuleRequest) {
            throw "Error! The required parameter `EventRuleRequest` missing when calling extrasEventRulesBulkDestroy."
        }

        $LocalVarBodyParameter = $EventRuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EventRuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

EventRule[]
#>
function Invoke-ExtrasEventRulesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${EventRuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasEventRulesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/event-rules/'

        if (!$EventRuleRequest) {
            throw "Error! The required parameter `EventRuleRequest` missing when calling extrasEventRulesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $EventRuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "EventRule[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER EventRuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

EventRule[]
#>
function Invoke-ExtrasEventRulesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${EventRuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasEventRulesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/event-rules/'

        if (!$EventRuleRequest) {
            throw "Error! The required parameter `EventRuleRequest` missing when calling extrasEventRulesBulkUpdate."
        }

        $LocalVarBodyParameter = $EventRuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "EventRule[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableEventRuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

EventRule
#>
function Invoke-ExtrasEventRulesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableEventRuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasEventRulesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/event-rules/'

        if (!$WritableEventRuleRequest) {
            throw "Error! The required parameter `WritableEventRuleRequest` missing when calling extrasEventRulesCreate."
        }

        $LocalVarBodyParameter = $WritableEventRuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "EventRule" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this event rule.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasEventRulesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasEventRulesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/event-rules/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasEventRulesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ActionObjectId
No description available.

.PARAMETER ActionObjectIdEmpty
No description available.

.PARAMETER ActionObjectIdGt
No description available.

.PARAMETER ActionObjectIdGte
No description available.

.PARAMETER ActionObjectIdLt
No description available.

.PARAMETER ActionObjectIdLte
No description available.

.PARAMETER ActionObjectIdN
No description available.

.PARAMETER ActionObjectType
No description available.

.PARAMETER ActionObjectTypeN
No description available.

.PARAMETER ActionType
No description available.

.PARAMETER ActionTypeN
No description available.

.PARAMETER ContentTypeId
No description available.

.PARAMETER ContentTypeIdEmpty
No description available.

.PARAMETER ContentTypeIdGt
No description available.

.PARAMETER ContentTypeIdGte
No description available.

.PARAMETER ContentTypeIdLt
No description available.

.PARAMETER ContentTypeIdLte
No description available.

.PARAMETER ContentTypeIdN
No description available.

.PARAMETER ContentTypes
No description available.

.PARAMETER ContentTypesIc
No description available.

.PARAMETER ContentTypesIe
No description available.

.PARAMETER ContentTypesIew
No description available.

.PARAMETER ContentTypesIsw
No description available.

.PARAMETER ContentTypesN
No description available.

.PARAMETER ContentTypesNic
No description available.

.PARAMETER ContentTypesNie
No description available.

.PARAMETER ContentTypesNiew
No description available.

.PARAMETER ContentTypesNisw
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Enabled
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER TypeCreate
No description available.

.PARAMETER TypeDelete
No description available.

.PARAMETER TypeJobEnd
No description available.

.PARAMETER TypeJobStart
No description available.

.PARAMETER TypeUpdate
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedEventRuleList
#>
function Invoke-ExtrasEventRulesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ActionObjectId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ActionObjectIdEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ActionObjectIdGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ActionObjectIdGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ActionObjectIdLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ActionObjectIdLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ActionObjectIdN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ActionObjectType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ActionObjectTypeN},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ActionType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ActionTypeN},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdGt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdGte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdLt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdLte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypes},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIc},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIe},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIew},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIsw},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesN},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNic},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNie},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNiew},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNisw},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${TypeCreate},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${TypeDelete},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${TypeJobEnd},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${TypeJobStart},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${TypeUpdate},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasEventRulesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/event-rules/'

        if ($ActionObjectId) {
            $LocalVarQueryParameters['action_object_id'] = $ActionObjectId
        }

        if ($ActionObjectIdEmpty) {
            $LocalVarQueryParameters['action_object_id__empty'] = $ActionObjectIdEmpty
        }

        if ($ActionObjectIdGt) {
            $LocalVarQueryParameters['action_object_id__gt'] = $ActionObjectIdGt
        }

        if ($ActionObjectIdGte) {
            $LocalVarQueryParameters['action_object_id__gte'] = $ActionObjectIdGte
        }

        if ($ActionObjectIdLt) {
            $LocalVarQueryParameters['action_object_id__lt'] = $ActionObjectIdLt
        }

        if ($ActionObjectIdLte) {
            $LocalVarQueryParameters['action_object_id__lte'] = $ActionObjectIdLte
        }

        if ($ActionObjectIdN) {
            $LocalVarQueryParameters['action_object_id__n'] = $ActionObjectIdN
        }

        if ($ActionObjectType) {
            $LocalVarQueryParameters['action_object_type'] = $ActionObjectType
        }

        if ($ActionObjectTypeN) {
            $LocalVarQueryParameters['action_object_type__n'] = $ActionObjectTypeN
        }

        if ($ActionType) {
            $LocalVarQueryParameters['action_type'] = $ActionType
        }

        if ($ActionTypeN) {
            $LocalVarQueryParameters['action_type__n'] = $ActionTypeN
        }

        if ($ContentTypeId) {
            $LocalVarQueryParameters['content_type_id'] = $ContentTypeId
        }

        if ($ContentTypeIdEmpty) {
            $LocalVarQueryParameters['content_type_id__empty'] = $ContentTypeIdEmpty
        }

        if ($ContentTypeIdGt) {
            $LocalVarQueryParameters['content_type_id__gt'] = $ContentTypeIdGt
        }

        if ($ContentTypeIdGte) {
            $LocalVarQueryParameters['content_type_id__gte'] = $ContentTypeIdGte
        }

        if ($ContentTypeIdLt) {
            $LocalVarQueryParameters['content_type_id__lt'] = $ContentTypeIdLt
        }

        if ($ContentTypeIdLte) {
            $LocalVarQueryParameters['content_type_id__lte'] = $ContentTypeIdLte
        }

        if ($ContentTypeIdN) {
            $LocalVarQueryParameters['content_type_id__n'] = $ContentTypeIdN
        }

        if ($ContentTypes) {
            $LocalVarQueryParameters['content_types'] = $ContentTypes
        }

        if ($ContentTypesIc) {
            $LocalVarQueryParameters['content_types__ic'] = $ContentTypesIc
        }

        if ($ContentTypesIe) {
            $LocalVarQueryParameters['content_types__ie'] = $ContentTypesIe
        }

        if ($ContentTypesIew) {
            $LocalVarQueryParameters['content_types__iew'] = $ContentTypesIew
        }

        if ($ContentTypesIsw) {
            $LocalVarQueryParameters['content_types__isw'] = $ContentTypesIsw
        }

        if ($ContentTypesN) {
            $LocalVarQueryParameters['content_types__n'] = $ContentTypesN
        }

        if ($ContentTypesNic) {
            $LocalVarQueryParameters['content_types__nic'] = $ContentTypesNic
        }

        if ($ContentTypesNie) {
            $LocalVarQueryParameters['content_types__nie'] = $ContentTypesNie
        }

        if ($ContentTypesNiew) {
            $LocalVarQueryParameters['content_types__niew'] = $ContentTypesNiew
        }

        if ($ContentTypesNisw) {
            $LocalVarQueryParameters['content_types__nisw'] = $ContentTypesNisw
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Enabled) {
            $LocalVarQueryParameters['enabled'] = $Enabled
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($TypeCreate) {
            $LocalVarQueryParameters['type_create'] = $TypeCreate
        }

        if ($TypeDelete) {
            $LocalVarQueryParameters['type_delete'] = $TypeDelete
        }

        if ($TypeJobEnd) {
            $LocalVarQueryParameters['type_job_end'] = $TypeJobEnd
        }

        if ($TypeJobStart) {
            $LocalVarQueryParameters['type_job_start'] = $TypeJobStart
        }

        if ($TypeUpdate) {
            $LocalVarQueryParameters['type_update'] = $TypeUpdate
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedEventRuleList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this event rule.

.PARAMETER PatchedWritableEventRuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

EventRule
#>
function Invoke-ExtrasEventRulesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableEventRuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasEventRulesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/event-rules/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasEventRulesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableEventRuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "EventRule" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this event rule.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

EventRule
#>
function Invoke-ExtrasEventRulesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasEventRulesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/event-rules/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasEventRulesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "EventRule" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this event rule.

.PARAMETER WritableEventRuleRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

EventRule
#>
function Invoke-ExtrasEventRulesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableEventRuleRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasEventRulesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/event-rules/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasEventRulesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableEventRuleRequest) {
            throw "Error! The required parameter `WritableEventRuleRequest` missing when calling extrasEventRulesUpdate."
        }

        $LocalVarBodyParameter = $WritableEventRuleRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "EventRule" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ExportTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasExportTemplatesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ExportTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasExportTemplatesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/export-templates/'

        if (!$ExportTemplateRequest) {
            throw "Error! The required parameter `ExportTemplateRequest` missing when calling extrasExportTemplatesBulkDestroy."
        }

        $LocalVarBodyParameter = $ExportTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ExportTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ExportTemplate[]
#>
function Invoke-ExtrasExportTemplatesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ExportTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasExportTemplatesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/export-templates/'

        if (!$ExportTemplateRequest) {
            throw "Error! The required parameter `ExportTemplateRequest` missing when calling extrasExportTemplatesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ExportTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ExportTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ExportTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ExportTemplate[]
#>
function Invoke-ExtrasExportTemplatesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ExportTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasExportTemplatesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/export-templates/'

        if (!$ExportTemplateRequest) {
            throw "Error! The required parameter `ExportTemplateRequest` missing when calling extrasExportTemplatesBulkUpdate."
        }

        $LocalVarBodyParameter = $ExportTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ExportTemplate[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableExportTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ExportTemplate
#>
function Invoke-ExtrasExportTemplatesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableExportTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasExportTemplatesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/export-templates/'

        if (!$WritableExportTemplateRequest) {
            throw "Error! The required parameter `WritableExportTemplateRequest` missing when calling extrasExportTemplatesCreate."
        }

        $LocalVarBodyParameter = $WritableExportTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ExportTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this export template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasExportTemplatesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasExportTemplatesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/export-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasExportTemplatesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContentTypeId
No description available.

.PARAMETER ContentTypeIdEmpty
No description available.

.PARAMETER ContentTypeIdGt
No description available.

.PARAMETER ContentTypeIdGte
No description available.

.PARAMETER ContentTypeIdLt
No description available.

.PARAMETER ContentTypeIdLte
No description available.

.PARAMETER ContentTypeIdN
No description available.

.PARAMETER ContentTypes
No description available.

.PARAMETER ContentTypesIc
No description available.

.PARAMETER ContentTypesIe
No description available.

.PARAMETER ContentTypesIew
No description available.

.PARAMETER ContentTypesIsw
No description available.

.PARAMETER ContentTypesN
No description available.

.PARAMETER ContentTypesNic
No description available.

.PARAMETER ContentTypesNie
No description available.

.PARAMETER ContentTypesNiew
No description available.

.PARAMETER ContentTypesNisw
No description available.

.PARAMETER DataFileId
Data file (ID)

.PARAMETER DataFileIdN
Data file (ID)

.PARAMETER DataSourceId
Data source (ID)

.PARAMETER DataSourceIdN
Data source (ID)

.PARAMETER DataSynced
No description available.

.PARAMETER DataSyncedEmpty
No description available.

.PARAMETER DataSyncedGt
No description available.

.PARAMETER DataSyncedGte
No description available.

.PARAMETER DataSyncedLt
No description available.

.PARAMETER DataSyncedLte
No description available.

.PARAMETER DataSyncedN
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedExportTemplateList
#>
function Invoke-ExtrasExportTemplatesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypes},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIc},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIe},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIew},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIsw},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNic},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNie},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNiew},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNisw},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataFileId},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataFileIdN},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataSourceId},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${DataSourceIdN},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSynced},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DataSyncedEmpty},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedGt},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedGte},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedLt},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedLte},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${DataSyncedN},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasExportTemplatesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/export-templates/'

        if ($ContentTypeId) {
            $LocalVarQueryParameters['content_type_id'] = $ContentTypeId
        }

        if ($ContentTypeIdEmpty) {
            $LocalVarQueryParameters['content_type_id__empty'] = $ContentTypeIdEmpty
        }

        if ($ContentTypeIdGt) {
            $LocalVarQueryParameters['content_type_id__gt'] = $ContentTypeIdGt
        }

        if ($ContentTypeIdGte) {
            $LocalVarQueryParameters['content_type_id__gte'] = $ContentTypeIdGte
        }

        if ($ContentTypeIdLt) {
            $LocalVarQueryParameters['content_type_id__lt'] = $ContentTypeIdLt
        }

        if ($ContentTypeIdLte) {
            $LocalVarQueryParameters['content_type_id__lte'] = $ContentTypeIdLte
        }

        if ($ContentTypeIdN) {
            $LocalVarQueryParameters['content_type_id__n'] = $ContentTypeIdN
        }

        if ($ContentTypes) {
            $LocalVarQueryParameters['content_types'] = $ContentTypes
        }

        if ($ContentTypesIc) {
            $LocalVarQueryParameters['content_types__ic'] = $ContentTypesIc
        }

        if ($ContentTypesIe) {
            $LocalVarQueryParameters['content_types__ie'] = $ContentTypesIe
        }

        if ($ContentTypesIew) {
            $LocalVarQueryParameters['content_types__iew'] = $ContentTypesIew
        }

        if ($ContentTypesIsw) {
            $LocalVarQueryParameters['content_types__isw'] = $ContentTypesIsw
        }

        if ($ContentTypesN) {
            $LocalVarQueryParameters['content_types__n'] = $ContentTypesN
        }

        if ($ContentTypesNic) {
            $LocalVarQueryParameters['content_types__nic'] = $ContentTypesNic
        }

        if ($ContentTypesNie) {
            $LocalVarQueryParameters['content_types__nie'] = $ContentTypesNie
        }

        if ($ContentTypesNiew) {
            $LocalVarQueryParameters['content_types__niew'] = $ContentTypesNiew
        }

        if ($ContentTypesNisw) {
            $LocalVarQueryParameters['content_types__nisw'] = $ContentTypesNisw
        }

        if ($DataFileId) {
            $LocalVarQueryParameters['data_file_id'] = $DataFileId
        }

        if ($DataFileIdN) {
            $LocalVarQueryParameters['data_file_id__n'] = $DataFileIdN
        }

        if ($DataSourceId) {
            $LocalVarQueryParameters['data_source_id'] = $DataSourceId
        }

        if ($DataSourceIdN) {
            $LocalVarQueryParameters['data_source_id__n'] = $DataSourceIdN
        }

        if ($DataSynced) {
            $LocalVarQueryParameters['data_synced'] = $DataSynced
        }

        if ($DataSyncedEmpty) {
            $LocalVarQueryParameters['data_synced__empty'] = $DataSyncedEmpty
        }

        if ($DataSyncedGt) {
            $LocalVarQueryParameters['data_synced__gt'] = $DataSyncedGt
        }

        if ($DataSyncedGte) {
            $LocalVarQueryParameters['data_synced__gte'] = $DataSyncedGte
        }

        if ($DataSyncedLt) {
            $LocalVarQueryParameters['data_synced__lt'] = $DataSyncedLt
        }

        if ($DataSyncedLte) {
            $LocalVarQueryParameters['data_synced__lte'] = $DataSyncedLte
        }

        if ($DataSyncedN) {
            $LocalVarQueryParameters['data_synced__n'] = $DataSyncedN
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedExportTemplateList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this export template.

.PARAMETER PatchedWritableExportTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ExportTemplate
#>
function Invoke-ExtrasExportTemplatesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableExportTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasExportTemplatesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/export-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasExportTemplatesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableExportTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ExportTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this export template.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ExportTemplate
#>
function Invoke-ExtrasExportTemplatesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasExportTemplatesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/export-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasExportTemplatesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ExportTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this export template.

.PARAMETER WritableExportTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ExportTemplate
#>
function Invoke-ExtrasExportTemplatesSyncCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableExportTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasExportTemplatesSyncCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/export-templates/{id}/sync/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasExportTemplatesSyncCreate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableExportTemplateRequest) {
            throw "Error! The required parameter `WritableExportTemplateRequest` missing when calling extrasExportTemplatesSyncCreate."
        }

        $LocalVarBodyParameter = $WritableExportTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ExportTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this export template.

.PARAMETER WritableExportTemplateRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ExportTemplate
#>
function Invoke-ExtrasExportTemplatesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableExportTemplateRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasExportTemplatesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/export-templates/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasExportTemplatesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableExportTemplateRequest) {
            throw "Error! The required parameter `WritableExportTemplateRequest` missing when calling extrasExportTemplatesUpdate."
        }

        $LocalVarBodyParameter = $WritableExportTemplateRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ExportTemplate" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ImageAttachmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasImageAttachmentsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ImageAttachmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasImageAttachmentsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/image-attachments/'

        if (!$ImageAttachmentRequest) {
            throw "Error! The required parameter `ImageAttachmentRequest` missing when calling extrasImageAttachmentsBulkDestroy."
        }

        $LocalVarBodyParameter = $ImageAttachmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ImageAttachmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ImageAttachment[]
#>
function Invoke-ExtrasImageAttachmentsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ImageAttachmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasImageAttachmentsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/image-attachments/'

        if (!$ImageAttachmentRequest) {
            throw "Error! The required parameter `ImageAttachmentRequest` missing when calling extrasImageAttachmentsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $ImageAttachmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ImageAttachment[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ImageAttachmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ImageAttachment[]
#>
function Invoke-ExtrasImageAttachmentsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ImageAttachmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasImageAttachmentsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/image-attachments/'

        if (!$ImageAttachmentRequest) {
            throw "Error! The required parameter `ImageAttachmentRequest` missing when calling extrasImageAttachmentsBulkUpdate."
        }

        $LocalVarBodyParameter = $ImageAttachmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ImageAttachment[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ImageAttachmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ImageAttachment
#>
function Invoke-ExtrasImageAttachmentsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${ImageAttachmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasImageAttachmentsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/image-attachments/'

        if (!$ImageAttachmentRequest) {
            throw "Error! The required parameter `ImageAttachmentRequest` missing when calling extrasImageAttachmentsCreate."
        }

        $LocalVarBodyParameter = $ImageAttachmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ImageAttachment" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this image attachment.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasImageAttachmentsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasImageAttachmentsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/image-attachments/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasImageAttachmentsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContentType
No description available.

.PARAMETER ContentTypeN
No description available.

.PARAMETER ContentTypeId
No description available.

.PARAMETER ContentTypeIdN
No description available.

.PARAMETER Created
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER ObjectId
No description available.

.PARAMETER ObjectIdEmpty
No description available.

.PARAMETER ObjectIdGt
No description available.

.PARAMETER ObjectIdGte
No description available.

.PARAMETER ObjectIdLt
No description available.

.PARAMETER ObjectIdLte
No description available.

.PARAMETER ObjectIdN
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedImageAttachmentList
#>
function Invoke-ExtrasImageAttachmentsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentType},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypeN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ContentTypeId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${ContentTypeIdN},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${Created},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectId},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ObjectIdEmpty},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdGt},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdGte},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdLt},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdLte},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectIdN},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasImageAttachmentsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/image-attachments/'

        if ($ContentType) {
            $LocalVarQueryParameters['content_type'] = $ContentType
        }

        if ($ContentTypeN) {
            $LocalVarQueryParameters['content_type__n'] = $ContentTypeN
        }

        if ($ContentTypeId) {
            $LocalVarQueryParameters['content_type_id'] = $ContentTypeId
        }

        if ($ContentTypeIdN) {
            $LocalVarQueryParameters['content_type_id__n'] = $ContentTypeIdN
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($ObjectId) {
            $LocalVarQueryParameters['object_id'] = $ObjectId
        }

        if ($ObjectIdEmpty) {
            $LocalVarQueryParameters['object_id__empty'] = $ObjectIdEmpty
        }

        if ($ObjectIdGt) {
            $LocalVarQueryParameters['object_id__gt'] = $ObjectIdGt
        }

        if ($ObjectIdGte) {
            $LocalVarQueryParameters['object_id__gte'] = $ObjectIdGte
        }

        if ($ObjectIdLt) {
            $LocalVarQueryParameters['object_id__lt'] = $ObjectIdLt
        }

        if ($ObjectIdLte) {
            $LocalVarQueryParameters['object_id__lte'] = $ObjectIdLte
        }

        if ($ObjectIdN) {
            $LocalVarQueryParameters['object_id__n'] = $ObjectIdN
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedImageAttachmentList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this image attachment.

.PARAMETER PatchedImageAttachmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ImageAttachment
#>
function Invoke-ExtrasImageAttachmentsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedImageAttachmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasImageAttachmentsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/image-attachments/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasImageAttachmentsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedImageAttachmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ImageAttachment" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this image attachment.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ImageAttachment
#>
function Invoke-ExtrasImageAttachmentsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasImageAttachmentsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/image-attachments/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasImageAttachmentsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ImageAttachment" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this image attachment.

.PARAMETER ImageAttachmentRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ImageAttachment
#>
function Invoke-ExtrasImageAttachmentsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${ImageAttachmentRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasImageAttachmentsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/image-attachments/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasImageAttachmentsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$ImageAttachmentRequest) {
            throw "Error! The required parameter `ImageAttachmentRequest` missing when calling extrasImageAttachmentsUpdate."
        }

        $LocalVarBodyParameter = $ImageAttachmentRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ImageAttachment" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER JournalEntryRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasJournalEntriesBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${JournalEntryRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasJournalEntriesBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/journal-entries/'

        if (!$JournalEntryRequest) {
            throw "Error! The required parameter `JournalEntryRequest` missing when calling extrasJournalEntriesBulkDestroy."
        }

        $LocalVarBodyParameter = $JournalEntryRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER JournalEntryRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

JournalEntry[]
#>
function Invoke-ExtrasJournalEntriesBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${JournalEntryRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasJournalEntriesBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/journal-entries/'

        if (!$JournalEntryRequest) {
            throw "Error! The required parameter `JournalEntryRequest` missing when calling extrasJournalEntriesBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $JournalEntryRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "JournalEntry[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER JournalEntryRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

JournalEntry[]
#>
function Invoke-ExtrasJournalEntriesBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${JournalEntryRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasJournalEntriesBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/journal-entries/'

        if (!$JournalEntryRequest) {
            throw "Error! The required parameter `JournalEntryRequest` missing when calling extrasJournalEntriesBulkUpdate."
        }

        $LocalVarBodyParameter = $JournalEntryRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "JournalEntry[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WritableJournalEntryRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

JournalEntry
#>
function Invoke-ExtrasJournalEntriesCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableJournalEntryRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasJournalEntriesCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/journal-entries/'

        if (!$WritableJournalEntryRequest) {
            throw "Error! The required parameter `WritableJournalEntryRequest` missing when calling extrasJournalEntriesCreate."
        }

        $LocalVarBodyParameter = $WritableJournalEntryRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "JournalEntry" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this journal entry.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasJournalEntriesDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasJournalEntriesDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/journal-entries/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasJournalEntriesDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER AssignedObjectId
No description available.

.PARAMETER AssignedObjectIdEmpty
No description available.

.PARAMETER AssignedObjectIdGt
No description available.

.PARAMETER AssignedObjectIdGte
No description available.

.PARAMETER AssignedObjectIdLt
No description available.

.PARAMETER AssignedObjectIdLte
No description available.

.PARAMETER AssignedObjectIdN
No description available.

.PARAMETER AssignedObjectType
No description available.

.PARAMETER AssignedObjectTypeN
No description available.

.PARAMETER AssignedObjectTypeId
No description available.

.PARAMETER AssignedObjectTypeIdN
No description available.

.PARAMETER CreatedAfter
No description available.

.PARAMETER CreatedBefore
No description available.

.PARAMETER CreatedBy
User (name)

.PARAMETER CreatedByN
User (name)

.PARAMETER CreatedById
User (ID)

.PARAMETER CreatedByIdN
User (ID)

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Kind
No description available.

.PARAMETER KindN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedJournalEntryList
#>
function Invoke-ExtrasJournalEntriesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AssignedObjectId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${AssignedObjectIdEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AssignedObjectIdGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AssignedObjectIdGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AssignedObjectIdLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AssignedObjectIdLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AssignedObjectIdN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AssignedObjectType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${AssignedObjectTypeN},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AssignedObjectTypeId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${AssignedObjectTypeIdN},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedAfter},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${CreatedBefore},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CreatedBy},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CreatedByN},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${CreatedById},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${CreatedByIdN},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Kind},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${KindN},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasJournalEntriesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/journal-entries/'

        if ($AssignedObjectId) {
            $LocalVarQueryParameters['assigned_object_id'] = $AssignedObjectId
        }

        if ($AssignedObjectIdEmpty) {
            $LocalVarQueryParameters['assigned_object_id__empty'] = $AssignedObjectIdEmpty
        }

        if ($AssignedObjectIdGt) {
            $LocalVarQueryParameters['assigned_object_id__gt'] = $AssignedObjectIdGt
        }

        if ($AssignedObjectIdGte) {
            $LocalVarQueryParameters['assigned_object_id__gte'] = $AssignedObjectIdGte
        }

        if ($AssignedObjectIdLt) {
            $LocalVarQueryParameters['assigned_object_id__lt'] = $AssignedObjectIdLt
        }

        if ($AssignedObjectIdLte) {
            $LocalVarQueryParameters['assigned_object_id__lte'] = $AssignedObjectIdLte
        }

        if ($AssignedObjectIdN) {
            $LocalVarQueryParameters['assigned_object_id__n'] = $AssignedObjectIdN
        }

        if ($AssignedObjectType) {
            $LocalVarQueryParameters['assigned_object_type'] = $AssignedObjectType
        }

        if ($AssignedObjectTypeN) {
            $LocalVarQueryParameters['assigned_object_type__n'] = $AssignedObjectTypeN
        }

        if ($AssignedObjectTypeId) {
            $LocalVarQueryParameters['assigned_object_type_id'] = $AssignedObjectTypeId
        }

        if ($AssignedObjectTypeIdN) {
            $LocalVarQueryParameters['assigned_object_type_id__n'] = $AssignedObjectTypeIdN
        }

        if ($CreatedAfter) {
            $LocalVarQueryParameters['created_after'] = $CreatedAfter
        }

        if ($CreatedBefore) {
            $LocalVarQueryParameters['created_before'] = $CreatedBefore
        }

        if ($CreatedBy) {
            $LocalVarQueryParameters['created_by'] = $CreatedBy
        }

        if ($CreatedByN) {
            $LocalVarQueryParameters['created_by__n'] = $CreatedByN
        }

        if ($CreatedById) {
            $LocalVarQueryParameters['created_by_id'] = $CreatedById
        }

        if ($CreatedByIdN) {
            $LocalVarQueryParameters['created_by_id__n'] = $CreatedByIdN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Kind) {
            $LocalVarQueryParameters['kind'] = $Kind
        }

        if ($KindN) {
            $LocalVarQueryParameters['kind__n'] = $KindN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedJournalEntryList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this journal entry.

.PARAMETER PatchedWritableJournalEntryRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

JournalEntry
#>
function Invoke-ExtrasJournalEntriesPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWritableJournalEntryRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasJournalEntriesPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/journal-entries/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasJournalEntriesPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWritableJournalEntryRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "JournalEntry" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this journal entry.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

JournalEntry
#>
function Invoke-ExtrasJournalEntriesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasJournalEntriesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/journal-entries/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasJournalEntriesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "JournalEntry" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this journal entry.

.PARAMETER WritableJournalEntryRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

JournalEntry
#>
function Invoke-ExtrasJournalEntriesUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WritableJournalEntryRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasJournalEntriesUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/journal-entries/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasJournalEntriesUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WritableJournalEntryRequest) {
            throw "Error! The required parameter `WritableJournalEntryRequest` missing when calling extrasJournalEntriesUpdate."
        }

        $LocalVarBodyParameter = $WritableJournalEntryRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "JournalEntry" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Action
No description available.

.PARAMETER ActionN
No description available.

.PARAMETER ChangedObjectId
No description available.

.PARAMETER ChangedObjectIdEmpty
No description available.

.PARAMETER ChangedObjectIdGt
No description available.

.PARAMETER ChangedObjectIdGte
No description available.

.PARAMETER ChangedObjectIdLt
No description available.

.PARAMETER ChangedObjectIdLte
No description available.

.PARAMETER ChangedObjectIdN
No description available.

.PARAMETER ChangedObjectType
No description available.

.PARAMETER ChangedObjectTypeN
No description available.

.PARAMETER ChangedObjectTypeId
No description available.

.PARAMETER ChangedObjectTypeIdN
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ObjectRepr
No description available.

.PARAMETER ObjectReprEmpty
No description available.

.PARAMETER ObjectReprIc
No description available.

.PARAMETER ObjectReprIe
No description available.

.PARAMETER ObjectReprIew
No description available.

.PARAMETER ObjectReprIsw
No description available.

.PARAMETER ObjectReprN
No description available.

.PARAMETER ObjectReprNic
No description available.

.PARAMETER ObjectReprNie
No description available.

.PARAMETER ObjectReprNiew
No description available.

.PARAMETER ObjectReprNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER RequestId
No description available.

.PARAMETER TimeAfter
No description available.

.PARAMETER TimeBefore
No description available.

.PARAMETER User
User name

.PARAMETER UserN
User name

.PARAMETER UserId
User (ID)

.PARAMETER UserIdN
User (ID)

.PARAMETER UserName
No description available.

.PARAMETER UserNameEmpty
No description available.

.PARAMETER UserNameIc
No description available.

.PARAMETER UserNameIe
No description available.

.PARAMETER UserNameIew
No description available.

.PARAMETER UserNameIsw
No description available.

.PARAMETER UserNameN
No description available.

.PARAMETER UserNameNic
No description available.

.PARAMETER UserNameNie
No description available.

.PARAMETER UserNameNiew
No description available.

.PARAMETER UserNameNisw
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedObjectChangeList
#>
function Invoke-ExtrasObjectChangesList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Action},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ActionN},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ChangedObjectId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ChangedObjectIdEmpty},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ChangedObjectIdGt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ChangedObjectIdGte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ChangedObjectIdLt},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ChangedObjectIdLte},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ChangedObjectIdN},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ChangedObjectType},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ChangedObjectTypeN},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ChangedObjectTypeId},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ChangedObjectTypeIdN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ObjectRepr},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ObjectReprEmpty},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ObjectReprIc},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ObjectReprIe},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ObjectReprIew},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ObjectReprIsw},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ObjectReprN},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ObjectReprNic},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ObjectReprNie},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ObjectReprNiew},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ObjectReprNisw},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RequestId},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${TimeAfter},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime]]
        ${TimeBefore},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${User},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserN},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UserId},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UserIdN},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserName},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${UserNameEmpty},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserNameIc},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserNameIe},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserNameIew},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserNameIsw},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserNameN},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserNameNic},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserNameNie},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserNameNiew},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserNameNisw},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasObjectChangesList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/object-changes/'

        if ($Action) {
            $LocalVarQueryParameters['action'] = $Action
        }

        if ($ActionN) {
            $LocalVarQueryParameters['action__n'] = $ActionN
        }

        if ($ChangedObjectId) {
            $LocalVarQueryParameters['changed_object_id'] = $ChangedObjectId
        }

        if ($ChangedObjectIdEmpty) {
            $LocalVarQueryParameters['changed_object_id__empty'] = $ChangedObjectIdEmpty
        }

        if ($ChangedObjectIdGt) {
            $LocalVarQueryParameters['changed_object_id__gt'] = $ChangedObjectIdGt
        }

        if ($ChangedObjectIdGte) {
            $LocalVarQueryParameters['changed_object_id__gte'] = $ChangedObjectIdGte
        }

        if ($ChangedObjectIdLt) {
            $LocalVarQueryParameters['changed_object_id__lt'] = $ChangedObjectIdLt
        }

        if ($ChangedObjectIdLte) {
            $LocalVarQueryParameters['changed_object_id__lte'] = $ChangedObjectIdLte
        }

        if ($ChangedObjectIdN) {
            $LocalVarQueryParameters['changed_object_id__n'] = $ChangedObjectIdN
        }

        if ($ChangedObjectType) {
            $LocalVarQueryParameters['changed_object_type'] = $ChangedObjectType
        }

        if ($ChangedObjectTypeN) {
            $LocalVarQueryParameters['changed_object_type__n'] = $ChangedObjectTypeN
        }

        if ($ChangedObjectTypeId) {
            $LocalVarQueryParameters['changed_object_type_id'] = $ChangedObjectTypeId
        }

        if ($ChangedObjectTypeIdN) {
            $LocalVarQueryParameters['changed_object_type_id__n'] = $ChangedObjectTypeIdN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ObjectRepr) {
            $LocalVarQueryParameters['object_repr'] = $ObjectRepr
        }

        if ($ObjectReprEmpty) {
            $LocalVarQueryParameters['object_repr__empty'] = $ObjectReprEmpty
        }

        if ($ObjectReprIc) {
            $LocalVarQueryParameters['object_repr__ic'] = $ObjectReprIc
        }

        if ($ObjectReprIe) {
            $LocalVarQueryParameters['object_repr__ie'] = $ObjectReprIe
        }

        if ($ObjectReprIew) {
            $LocalVarQueryParameters['object_repr__iew'] = $ObjectReprIew
        }

        if ($ObjectReprIsw) {
            $LocalVarQueryParameters['object_repr__isw'] = $ObjectReprIsw
        }

        if ($ObjectReprN) {
            $LocalVarQueryParameters['object_repr__n'] = $ObjectReprN
        }

        if ($ObjectReprNic) {
            $LocalVarQueryParameters['object_repr__nic'] = $ObjectReprNic
        }

        if ($ObjectReprNie) {
            $LocalVarQueryParameters['object_repr__nie'] = $ObjectReprNie
        }

        if ($ObjectReprNiew) {
            $LocalVarQueryParameters['object_repr__niew'] = $ObjectReprNiew
        }

        if ($ObjectReprNisw) {
            $LocalVarQueryParameters['object_repr__nisw'] = $ObjectReprNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($RequestId) {
            $LocalVarQueryParameters['request_id'] = $RequestId
        }

        if ($TimeAfter) {
            $LocalVarQueryParameters['time_after'] = $TimeAfter
        }

        if ($TimeBefore) {
            $LocalVarQueryParameters['time_before'] = $TimeBefore
        }

        if ($User) {
            $LocalVarQueryParameters['user'] = $User
        }

        if ($UserN) {
            $LocalVarQueryParameters['user__n'] = $UserN
        }

        if ($UserId) {
            $LocalVarQueryParameters['user_id'] = $UserId
        }

        if ($UserIdN) {
            $LocalVarQueryParameters['user_id__n'] = $UserIdN
        }

        if ($UserName) {
            $LocalVarQueryParameters['user_name'] = $UserName
        }

        if ($UserNameEmpty) {
            $LocalVarQueryParameters['user_name__empty'] = $UserNameEmpty
        }

        if ($UserNameIc) {
            $LocalVarQueryParameters['user_name__ic'] = $UserNameIc
        }

        if ($UserNameIe) {
            $LocalVarQueryParameters['user_name__ie'] = $UserNameIe
        }

        if ($UserNameIew) {
            $LocalVarQueryParameters['user_name__iew'] = $UserNameIew
        }

        if ($UserNameIsw) {
            $LocalVarQueryParameters['user_name__isw'] = $UserNameIsw
        }

        if ($UserNameN) {
            $LocalVarQueryParameters['user_name__n'] = $UserNameN
        }

        if ($UserNameNic) {
            $LocalVarQueryParameters['user_name__nic'] = $UserNameNic
        }

        if ($UserNameNie) {
            $LocalVarQueryParameters['user_name__nie'] = $UserNameNie
        }

        if ($UserNameNiew) {
            $LocalVarQueryParameters['user_name__niew'] = $UserNameNiew
        }

        if ($UserNameNisw) {
            $LocalVarQueryParameters['user_name__nisw'] = $UserNameNisw
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedObjectChangeList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this object change.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

ObjectChange
#>
function Invoke-ExtrasObjectChangesRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasObjectChangesRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/object-changes/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasObjectChangesRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "ObjectChange" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SavedFilterRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasSavedFiltersBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${SavedFilterRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasSavedFiltersBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/saved-filters/'

        if (!$SavedFilterRequest) {
            throw "Error! The required parameter `SavedFilterRequest` missing when calling extrasSavedFiltersBulkDestroy."
        }

        $LocalVarBodyParameter = $SavedFilterRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SavedFilterRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SavedFilter[]
#>
function Invoke-ExtrasSavedFiltersBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${SavedFilterRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasSavedFiltersBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/saved-filters/'

        if (!$SavedFilterRequest) {
            throw "Error! The required parameter `SavedFilterRequest` missing when calling extrasSavedFiltersBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $SavedFilterRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SavedFilter[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SavedFilterRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SavedFilter[]
#>
function Invoke-ExtrasSavedFiltersBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${SavedFilterRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasSavedFiltersBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/saved-filters/'

        if (!$SavedFilterRequest) {
            throw "Error! The required parameter `SavedFilterRequest` missing when calling extrasSavedFiltersBulkUpdate."
        }

        $LocalVarBodyParameter = $SavedFilterRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SavedFilter[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER SavedFilterRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SavedFilter
#>
function Invoke-ExtrasSavedFiltersCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${SavedFilterRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasSavedFiltersCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/saved-filters/'

        if (!$SavedFilterRequest) {
            throw "Error! The required parameter `SavedFilterRequest` missing when calling extrasSavedFiltersCreate."
        }

        $LocalVarBodyParameter = $SavedFilterRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SavedFilter" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this saved filter.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasSavedFiltersDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasSavedFiltersDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/saved-filters/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasSavedFiltersDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER ContentTypeId
No description available.

.PARAMETER ContentTypeIdEmpty
No description available.

.PARAMETER ContentTypeIdGt
No description available.

.PARAMETER ContentTypeIdGte
No description available.

.PARAMETER ContentTypeIdLt
No description available.

.PARAMETER ContentTypeIdLte
No description available.

.PARAMETER ContentTypeIdN
No description available.

.PARAMETER ContentTypes
No description available.

.PARAMETER ContentTypesIc
No description available.

.PARAMETER ContentTypesIe
No description available.

.PARAMETER ContentTypesIew
No description available.

.PARAMETER ContentTypesIsw
No description available.

.PARAMETER ContentTypesN
No description available.

.PARAMETER ContentTypesNic
No description available.

.PARAMETER ContentTypesNie
No description available.

.PARAMETER ContentTypesNiew
No description available.

.PARAMETER ContentTypesNisw
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER Enabled
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Shared
No description available.

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER Usable
No description available.

.PARAMETER User
User (name)

.PARAMETER UserN
User (name)

.PARAMETER UserId
User (ID)

.PARAMETER UserIdN
User (ID)

.PARAMETER Weight
No description available.

.PARAMETER WeightEmpty
No description available.

.PARAMETER WeightGt
No description available.

.PARAMETER WeightGte
No description available.

.PARAMETER WeightLt
No description available.

.PARAMETER WeightLte
No description available.

.PARAMETER WeightN
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedSavedFilterList
#>
function Invoke-ExtrasSavedFiltersList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdGt},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdGte},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdLt},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdLte},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeIdN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypes},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIc},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIe},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIew},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesIsw},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesN},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNic},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNie},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNiew},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ContentTypesNisw},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Enabled},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Shared},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${Usable},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${User},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${UserN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UserId},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${UserIdN},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Weight},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${WeightEmpty},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightGt},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightGte},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightLt},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightLte},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${WeightN},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasSavedFiltersList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/saved-filters/'

        if ($ContentTypeId) {
            $LocalVarQueryParameters['content_type_id'] = $ContentTypeId
        }

        if ($ContentTypeIdEmpty) {
            $LocalVarQueryParameters['content_type_id__empty'] = $ContentTypeIdEmpty
        }

        if ($ContentTypeIdGt) {
            $LocalVarQueryParameters['content_type_id__gt'] = $ContentTypeIdGt
        }

        if ($ContentTypeIdGte) {
            $LocalVarQueryParameters['content_type_id__gte'] = $ContentTypeIdGte
        }

        if ($ContentTypeIdLt) {
            $LocalVarQueryParameters['content_type_id__lt'] = $ContentTypeIdLt
        }

        if ($ContentTypeIdLte) {
            $LocalVarQueryParameters['content_type_id__lte'] = $ContentTypeIdLte
        }

        if ($ContentTypeIdN) {
            $LocalVarQueryParameters['content_type_id__n'] = $ContentTypeIdN
        }

        if ($ContentTypes) {
            $LocalVarQueryParameters['content_types'] = $ContentTypes
        }

        if ($ContentTypesIc) {
            $LocalVarQueryParameters['content_types__ic'] = $ContentTypesIc
        }

        if ($ContentTypesIe) {
            $LocalVarQueryParameters['content_types__ie'] = $ContentTypesIe
        }

        if ($ContentTypesIew) {
            $LocalVarQueryParameters['content_types__iew'] = $ContentTypesIew
        }

        if ($ContentTypesIsw) {
            $LocalVarQueryParameters['content_types__isw'] = $ContentTypesIsw
        }

        if ($ContentTypesN) {
            $LocalVarQueryParameters['content_types__n'] = $ContentTypesN
        }

        if ($ContentTypesNic) {
            $LocalVarQueryParameters['content_types__nic'] = $ContentTypesNic
        }

        if ($ContentTypesNie) {
            $LocalVarQueryParameters['content_types__nie'] = $ContentTypesNie
        }

        if ($ContentTypesNiew) {
            $LocalVarQueryParameters['content_types__niew'] = $ContentTypesNiew
        }

        if ($ContentTypesNisw) {
            $LocalVarQueryParameters['content_types__nisw'] = $ContentTypesNisw
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($Enabled) {
            $LocalVarQueryParameters['enabled'] = $Enabled
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Shared) {
            $LocalVarQueryParameters['shared'] = $Shared
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($Usable) {
            $LocalVarQueryParameters['usable'] = $Usable
        }

        if ($User) {
            $LocalVarQueryParameters['user'] = $User
        }

        if ($UserN) {
            $LocalVarQueryParameters['user__n'] = $UserN
        }

        if ($UserId) {
            $LocalVarQueryParameters['user_id'] = $UserId
        }

        if ($UserIdN) {
            $LocalVarQueryParameters['user_id__n'] = $UserIdN
        }

        if ($Weight) {
            $LocalVarQueryParameters['weight'] = $Weight
        }

        if ($WeightEmpty) {
            $LocalVarQueryParameters['weight__empty'] = $WeightEmpty
        }

        if ($WeightGt) {
            $LocalVarQueryParameters['weight__gt'] = $WeightGt
        }

        if ($WeightGte) {
            $LocalVarQueryParameters['weight__gte'] = $WeightGte
        }

        if ($WeightLt) {
            $LocalVarQueryParameters['weight__lt'] = $WeightLt
        }

        if ($WeightLte) {
            $LocalVarQueryParameters['weight__lte'] = $WeightLte
        }

        if ($WeightN) {
            $LocalVarQueryParameters['weight__n'] = $WeightN
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedSavedFilterList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this saved filter.

.PARAMETER PatchedSavedFilterRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SavedFilter
#>
function Invoke-ExtrasSavedFiltersPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedSavedFilterRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasSavedFiltersPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/saved-filters/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasSavedFiltersPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedSavedFilterRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SavedFilter" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this saved filter.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SavedFilter
#>
function Invoke-ExtrasSavedFiltersRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasSavedFiltersRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/saved-filters/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasSavedFiltersRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SavedFilter" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this saved filter.

.PARAMETER SavedFilterRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

SavedFilter
#>
function Invoke-ExtrasSavedFiltersUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${SavedFilterRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasSavedFiltersUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/saved-filters/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasSavedFiltersUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$SavedFilterRequest) {
            throw "Error! The required parameter `SavedFilterRequest` missing when calling extrasSavedFiltersUpdate."
        }

        $LocalVarBodyParameter = $SavedFilterRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "SavedFilter" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TagRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasTagsBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${TagRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasTagsBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/tags/'

        if (!$TagRequest) {
            throw "Error! The required parameter `TagRequest` missing when calling extrasTagsBulkDestroy."
        }

        $LocalVarBodyParameter = $TagRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TagRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tag[]
#>
function Invoke-ExtrasTagsBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${TagRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasTagsBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/tags/'

        if (!$TagRequest) {
            throw "Error! The required parameter `TagRequest` missing when calling extrasTagsBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $TagRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tag[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TagRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tag[]
#>
function Invoke-ExtrasTagsBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${TagRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasTagsBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/tags/'

        if (!$TagRequest) {
            throw "Error! The required parameter `TagRequest` missing when calling extrasTagsBulkUpdate."
        }

        $LocalVarBodyParameter = $TagRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tag[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER TagRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tag
#>
function Invoke-ExtrasTagsCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${TagRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasTagsCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/tags/'

        if (!$TagRequest) {
            throw "Error! The required parameter `TagRequest` missing when calling extrasTagsCreate."
        }

        $LocalVarBodyParameter = $TagRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tag" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tag.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasTagsDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasTagsDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/tags/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasTagsDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Color
No description available.

.PARAMETER ColorEmpty
No description available.

.PARAMETER ColorIc
No description available.

.PARAMETER ColorIe
No description available.

.PARAMETER ColorIew
No description available.

.PARAMETER ColorIsw
No description available.

.PARAMETER ColorN
No description available.

.PARAMETER ColorNic
No description available.

.PARAMETER ColorNie
No description available.

.PARAMETER ColorNiew
No description available.

.PARAMETER ColorNisw
No description available.

.PARAMETER ContentType
No description available.

.PARAMETER ContentTypeId
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER ForObjectTypeId
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER ObjectTypes
No description available.

.PARAMETER ObjectTypesN
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER Q
Search

.PARAMETER Slug
No description available.

.PARAMETER SlugEmpty
No description available.

.PARAMETER SlugIc
No description available.

.PARAMETER SlugIe
No description available.

.PARAMETER SlugIew
No description available.

.PARAMETER SlugIsw
No description available.

.PARAMETER SlugN
No description available.

.PARAMETER SlugNic
No description available.

.PARAMETER SlugNie
No description available.

.PARAMETER SlugNiew
No description available.

.PARAMETER SlugNisw
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedTagList
#>
function Invoke-ExtrasTagsList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Color},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${ColorEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIe},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIew},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorIsw},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNie},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNiew},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ColorNisw},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${ContentType},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ContentTypeId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ForObjectTypeId},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectTypes},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${ObjectTypesN},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Slug},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SlugEmpty},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIc},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIe},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIew},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugIsw},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugN},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNic},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNie},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNiew},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SlugNisw},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasTagsList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/tags/'

        if ($Color) {
            $LocalVarQueryParameters['color'] = $Color
        }

        if ($ColorEmpty) {
            $LocalVarQueryParameters['color__empty'] = $ColorEmpty
        }

        if ($ColorIc) {
            $LocalVarQueryParameters['color__ic'] = $ColorIc
        }

        if ($ColorIe) {
            $LocalVarQueryParameters['color__ie'] = $ColorIe
        }

        if ($ColorIew) {
            $LocalVarQueryParameters['color__iew'] = $ColorIew
        }

        if ($ColorIsw) {
            $LocalVarQueryParameters['color__isw'] = $ColorIsw
        }

        if ($ColorN) {
            $LocalVarQueryParameters['color__n'] = $ColorN
        }

        if ($ColorNic) {
            $LocalVarQueryParameters['color__nic'] = $ColorNic
        }

        if ($ColorNie) {
            $LocalVarQueryParameters['color__nie'] = $ColorNie
        }

        if ($ColorNiew) {
            $LocalVarQueryParameters['color__niew'] = $ColorNiew
        }

        if ($ColorNisw) {
            $LocalVarQueryParameters['color__nisw'] = $ColorNisw
        }

        if ($ContentType) {
            $LocalVarQueryParameters['content_type'] = $ContentType
        }

        if ($ContentTypeId) {
            $LocalVarQueryParameters['content_type_id'] = $ContentTypeId
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($ForObjectTypeId) {
            $LocalVarQueryParameters['for_object_type_id'] = $ForObjectTypeId
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($ObjectTypes) {
            $LocalVarQueryParameters['object_types'] = $ObjectTypes
        }

        if ($ObjectTypesN) {
            $LocalVarQueryParameters['object_types__n'] = $ObjectTypesN
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Slug) {
            $LocalVarQueryParameters['slug'] = $Slug
        }

        if ($SlugEmpty) {
            $LocalVarQueryParameters['slug__empty'] = $SlugEmpty
        }

        if ($SlugIc) {
            $LocalVarQueryParameters['slug__ic'] = $SlugIc
        }

        if ($SlugIe) {
            $LocalVarQueryParameters['slug__ie'] = $SlugIe
        }

        if ($SlugIew) {
            $LocalVarQueryParameters['slug__iew'] = $SlugIew
        }

        if ($SlugIsw) {
            $LocalVarQueryParameters['slug__isw'] = $SlugIsw
        }

        if ($SlugN) {
            $LocalVarQueryParameters['slug__n'] = $SlugN
        }

        if ($SlugNic) {
            $LocalVarQueryParameters['slug__nic'] = $SlugNic
        }

        if ($SlugNie) {
            $LocalVarQueryParameters['slug__nie'] = $SlugNie
        }

        if ($SlugNiew) {
            $LocalVarQueryParameters['slug__niew'] = $SlugNiew
        }

        if ($SlugNisw) {
            $LocalVarQueryParameters['slug__nisw'] = $SlugNisw
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedTagList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tag.

.PARAMETER PatchedTagRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tag
#>
function Invoke-ExtrasTagsPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedTagRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasTagsPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/tags/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasTagsPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedTagRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tag" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tag.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tag
#>
function Invoke-ExtrasTagsRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasTagsRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/tags/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasTagsRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tag" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this tag.

.PARAMETER TagRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Tag
#>
function Invoke-ExtrasTagsUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${TagRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasTagsUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/tags/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasTagsUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$TagRequest) {
            throw "Error! The required parameter `TagRequest` missing when calling extrasTagsUpdate."
        }

        $LocalVarBodyParameter = $TagRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Tag" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WebhookRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasWebhooksBulkDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WebhookRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasWebhooksBulkDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/webhooks/'

        if (!$WebhookRequest) {
            throw "Error! The required parameter `WebhookRequest` missing when calling extrasWebhooksBulkDestroy."
        }

        $LocalVarBodyParameter = $WebhookRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WebhookRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Webhook[]
#>
function Invoke-ExtrasWebhooksBulkPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WebhookRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasWebhooksBulkPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/webhooks/'

        if (!$WebhookRequest) {
            throw "Error! The required parameter `WebhookRequest` missing when calling extrasWebhooksBulkPartialUpdate."
        }

        $LocalVarBodyParameter = $WebhookRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Webhook[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WebhookRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Webhook[]
#>
function Invoke-ExtrasWebhooksBulkUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${WebhookRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasWebhooksBulkUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/webhooks/'

        if (!$WebhookRequest) {
            throw "Error! The required parameter `WebhookRequest` missing when calling extrasWebhooksBulkUpdate."
        }

        $LocalVarBodyParameter = $WebhookRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Webhook[]" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER WebhookRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Webhook
#>
function Invoke-ExtrasWebhooksCreate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WebhookRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasWebhooksCreate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/webhooks/'

        if (!$WebhookRequest) {
            throw "Error! The required parameter `WebhookRequest` missing when calling extrasWebhooksCreate."
        }

        $LocalVarBodyParameter = $WebhookRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Webhook" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this webhook.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

None
#>
function Invoke-ExtrasWebhooksDestroy {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasWebhooksDestroy' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        $LocalVarUri = '/api/extras/webhooks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasWebhooksDestroy."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'DELETE' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CaFilePath
No description available.

.PARAMETER CaFilePathEmpty
No description available.

.PARAMETER CaFilePathIc
No description available.

.PARAMETER CaFilePathIe
No description available.

.PARAMETER CaFilePathIew
No description available.

.PARAMETER CaFilePathIsw
No description available.

.PARAMETER CaFilePathN
No description available.

.PARAMETER CaFilePathNic
No description available.

.PARAMETER CaFilePathNie
No description available.

.PARAMETER CaFilePathNiew
No description available.

.PARAMETER CaFilePathNisw
No description available.

.PARAMETER Created
No description available.

.PARAMETER CreatedEmpty
No description available.

.PARAMETER CreatedGt
No description available.

.PARAMETER CreatedGte
No description available.

.PARAMETER CreatedLt
No description available.

.PARAMETER CreatedLte
No description available.

.PARAMETER CreatedN
No description available.

.PARAMETER CreatedByRequest
No description available.

.PARAMETER Description
No description available.

.PARAMETER DescriptionEmpty
No description available.

.PARAMETER DescriptionIc
No description available.

.PARAMETER DescriptionIe
No description available.

.PARAMETER DescriptionIew
No description available.

.PARAMETER DescriptionIsw
No description available.

.PARAMETER DescriptionN
No description available.

.PARAMETER DescriptionNic
No description available.

.PARAMETER DescriptionNie
No description available.

.PARAMETER DescriptionNiew
No description available.

.PARAMETER DescriptionNisw
No description available.

.PARAMETER HttpContentType
No description available.

.PARAMETER HttpContentTypeEmpty
No description available.

.PARAMETER HttpContentTypeIc
No description available.

.PARAMETER HttpContentTypeIe
No description available.

.PARAMETER HttpContentTypeIew
No description available.

.PARAMETER HttpContentTypeIsw
No description available.

.PARAMETER HttpContentTypeN
No description available.

.PARAMETER HttpContentTypeNic
No description available.

.PARAMETER HttpContentTypeNie
No description available.

.PARAMETER HttpContentTypeNiew
No description available.

.PARAMETER HttpContentTypeNisw
No description available.

.PARAMETER HttpMethod
No description available.

.PARAMETER HttpMethodN
No description available.

.PARAMETER Id
No description available.

.PARAMETER IdEmpty
No description available.

.PARAMETER IdGt
No description available.

.PARAMETER IdGte
No description available.

.PARAMETER IdLt
No description available.

.PARAMETER IdLte
No description available.

.PARAMETER IdN
No description available.

.PARAMETER LastUpdated
No description available.

.PARAMETER LastUpdatedEmpty
No description available.

.PARAMETER LastUpdatedGt
No description available.

.PARAMETER LastUpdatedGte
No description available.

.PARAMETER LastUpdatedLt
No description available.

.PARAMETER LastUpdatedLte
No description available.

.PARAMETER LastUpdatedN
No description available.

.PARAMETER Limit
Number of results to return per page.

.PARAMETER ModifiedByRequest
No description available.

.PARAMETER Name
No description available.

.PARAMETER NameEmpty
No description available.

.PARAMETER NameIc
No description available.

.PARAMETER NameIe
No description available.

.PARAMETER NameIew
No description available.

.PARAMETER NameIsw
No description available.

.PARAMETER NameN
No description available.

.PARAMETER NameNic
No description available.

.PARAMETER NameNie
No description available.

.PARAMETER NameNiew
No description available.

.PARAMETER NameNisw
No description available.

.PARAMETER Offset
The initial index from which to return the results.

.PARAMETER Ordering
Which field to use when ordering the results.

.PARAMETER PayloadUrl
No description available.

.PARAMETER Q
Search

.PARAMETER Secret
No description available.

.PARAMETER SecretEmpty
No description available.

.PARAMETER SecretIc
No description available.

.PARAMETER SecretIe
No description available.

.PARAMETER SecretIew
No description available.

.PARAMETER SecretIsw
No description available.

.PARAMETER SecretN
No description available.

.PARAMETER SecretNic
No description available.

.PARAMETER SecretNie
No description available.

.PARAMETER SecretNiew
No description available.

.PARAMETER SecretNisw
No description available.

.PARAMETER SslVerification
No description available.

.PARAMETER Tag
No description available.

.PARAMETER TagN
No description available.

.PARAMETER UpdatedByRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

PaginatedWebhookList
#>
function Invoke-ExtrasWebhooksList {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CaFilePath},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${CaFilePathEmpty},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CaFilePathIc},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CaFilePathIe},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CaFilePathIew},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CaFilePathIsw},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CaFilePathN},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CaFilePathNic},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CaFilePathNie},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CaFilePathNiew},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${CaFilePathNisw},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${Created},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedEmpty},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGt},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedGte},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLt},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedLte},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${CreatedN},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${CreatedByRequest},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Description},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${DescriptionEmpty},
        [Parameter(Position = 21, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIc},
        [Parameter(Position = 22, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIe},
        [Parameter(Position = 23, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIew},
        [Parameter(Position = 24, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionIsw},
        [Parameter(Position = 25, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionN},
        [Parameter(Position = 26, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNic},
        [Parameter(Position = 27, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNie},
        [Parameter(Position = 28, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNiew},
        [Parameter(Position = 29, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${DescriptionNisw},
        [Parameter(Position = 30, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpContentType},
        [Parameter(Position = 31, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${HttpContentTypeEmpty},
        [Parameter(Position = 32, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpContentTypeIc},
        [Parameter(Position = 33, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpContentTypeIe},
        [Parameter(Position = 34, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpContentTypeIew},
        [Parameter(Position = 35, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpContentTypeIsw},
        [Parameter(Position = 36, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpContentTypeN},
        [Parameter(Position = 37, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpContentTypeNic},
        [Parameter(Position = 38, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpContentTypeNie},
        [Parameter(Position = 39, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpContentTypeNiew},
        [Parameter(Position = 40, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpContentTypeNisw},
        [Parameter(Position = 41, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpMethod},
        [Parameter(Position = 42, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${HttpMethodN},
        [Parameter(Position = 43, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${Id},
        [Parameter(Position = 44, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${IdEmpty},
        [Parameter(Position = 45, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGt},
        [Parameter(Position = 46, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdGte},
        [Parameter(Position = 47, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLt},
        [Parameter(Position = 48, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdLte},
        [Parameter(Position = 49, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32][]]
        ${IdN},
        [Parameter(Position = 50, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdated},
        [Parameter(Position = 51, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedEmpty},
        [Parameter(Position = 52, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGt},
        [Parameter(Position = 53, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedGte},
        [Parameter(Position = 54, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLt},
        [Parameter(Position = 55, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedLte},
        [Parameter(Position = 56, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[System.DateTime][]]
        ${LastUpdatedN},
        [Parameter(Position = 57, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Limit},
        [Parameter(Position = 58, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${ModifiedByRequest},
        [Parameter(Position = 59, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Name},
        [Parameter(Position = 60, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${NameEmpty},
        [Parameter(Position = 61, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIc},
        [Parameter(Position = 62, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIe},
        [Parameter(Position = 63, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIew},
        [Parameter(Position = 64, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameIsw},
        [Parameter(Position = 65, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameN},
        [Parameter(Position = 66, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNic},
        [Parameter(Position = 67, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNie},
        [Parameter(Position = 68, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNiew},
        [Parameter(Position = 69, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${NameNisw},
        [Parameter(Position = 70, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Offset},
        [Parameter(Position = 71, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Ordering},
        [Parameter(Position = 72, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${PayloadUrl},
        [Parameter(Position = 73, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Q},
        [Parameter(Position = 74, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Secret},
        [Parameter(Position = 75, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SecretEmpty},
        [Parameter(Position = 76, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SecretIc},
        [Parameter(Position = 77, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SecretIe},
        [Parameter(Position = 78, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SecretIew},
        [Parameter(Position = 79, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SecretIsw},
        [Parameter(Position = 80, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SecretN},
        [Parameter(Position = 81, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SecretNic},
        [Parameter(Position = 82, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SecretNie},
        [Parameter(Position = 83, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SecretNiew},
        [Parameter(Position = 84, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${SecretNisw},
        [Parameter(Position = 85, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Boolean]]
        ${SslVerification},
        [Parameter(Position = 86, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${Tag},
        [Parameter(Position = 87, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String[]]
        ${TagN},
        [Parameter(Position = 88, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${UpdatedByRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasWebhooksList' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/webhooks/'

        if ($CaFilePath) {
            $LocalVarQueryParameters['ca_file_path'] = $CaFilePath
        }

        if ($CaFilePathEmpty) {
            $LocalVarQueryParameters['ca_file_path__empty'] = $CaFilePathEmpty
        }

        if ($CaFilePathIc) {
            $LocalVarQueryParameters['ca_file_path__ic'] = $CaFilePathIc
        }

        if ($CaFilePathIe) {
            $LocalVarQueryParameters['ca_file_path__ie'] = $CaFilePathIe
        }

        if ($CaFilePathIew) {
            $LocalVarQueryParameters['ca_file_path__iew'] = $CaFilePathIew
        }

        if ($CaFilePathIsw) {
            $LocalVarQueryParameters['ca_file_path__isw'] = $CaFilePathIsw
        }

        if ($CaFilePathN) {
            $LocalVarQueryParameters['ca_file_path__n'] = $CaFilePathN
        }

        if ($CaFilePathNic) {
            $LocalVarQueryParameters['ca_file_path__nic'] = $CaFilePathNic
        }

        if ($CaFilePathNie) {
            $LocalVarQueryParameters['ca_file_path__nie'] = $CaFilePathNie
        }

        if ($CaFilePathNiew) {
            $LocalVarQueryParameters['ca_file_path__niew'] = $CaFilePathNiew
        }

        if ($CaFilePathNisw) {
            $LocalVarQueryParameters['ca_file_path__nisw'] = $CaFilePathNisw
        }

        if ($Created) {
            $LocalVarQueryParameters['created'] = $Created
        }

        if ($CreatedEmpty) {
            $LocalVarQueryParameters['created__empty'] = $CreatedEmpty
        }

        if ($CreatedGt) {
            $LocalVarQueryParameters['created__gt'] = $CreatedGt
        }

        if ($CreatedGte) {
            $LocalVarQueryParameters['created__gte'] = $CreatedGte
        }

        if ($CreatedLt) {
            $LocalVarQueryParameters['created__lt'] = $CreatedLt
        }

        if ($CreatedLte) {
            $LocalVarQueryParameters['created__lte'] = $CreatedLte
        }

        if ($CreatedN) {
            $LocalVarQueryParameters['created__n'] = $CreatedN
        }

        if ($CreatedByRequest) {
            $LocalVarQueryParameters['created_by_request'] = $CreatedByRequest
        }

        if ($Description) {
            $LocalVarQueryParameters['description'] = $Description
        }

        if ($DescriptionEmpty) {
            $LocalVarQueryParameters['description__empty'] = $DescriptionEmpty
        }

        if ($DescriptionIc) {
            $LocalVarQueryParameters['description__ic'] = $DescriptionIc
        }

        if ($DescriptionIe) {
            $LocalVarQueryParameters['description__ie'] = $DescriptionIe
        }

        if ($DescriptionIew) {
            $LocalVarQueryParameters['description__iew'] = $DescriptionIew
        }

        if ($DescriptionIsw) {
            $LocalVarQueryParameters['description__isw'] = $DescriptionIsw
        }

        if ($DescriptionN) {
            $LocalVarQueryParameters['description__n'] = $DescriptionN
        }

        if ($DescriptionNic) {
            $LocalVarQueryParameters['description__nic'] = $DescriptionNic
        }

        if ($DescriptionNie) {
            $LocalVarQueryParameters['description__nie'] = $DescriptionNie
        }

        if ($DescriptionNiew) {
            $LocalVarQueryParameters['description__niew'] = $DescriptionNiew
        }

        if ($DescriptionNisw) {
            $LocalVarQueryParameters['description__nisw'] = $DescriptionNisw
        }

        if ($HttpContentType) {
            $LocalVarQueryParameters['http_content_type'] = $HttpContentType
        }

        if ($HttpContentTypeEmpty) {
            $LocalVarQueryParameters['http_content_type__empty'] = $HttpContentTypeEmpty
        }

        if ($HttpContentTypeIc) {
            $LocalVarQueryParameters['http_content_type__ic'] = $HttpContentTypeIc
        }

        if ($HttpContentTypeIe) {
            $LocalVarQueryParameters['http_content_type__ie'] = $HttpContentTypeIe
        }

        if ($HttpContentTypeIew) {
            $LocalVarQueryParameters['http_content_type__iew'] = $HttpContentTypeIew
        }

        if ($HttpContentTypeIsw) {
            $LocalVarQueryParameters['http_content_type__isw'] = $HttpContentTypeIsw
        }

        if ($HttpContentTypeN) {
            $LocalVarQueryParameters['http_content_type__n'] = $HttpContentTypeN
        }

        if ($HttpContentTypeNic) {
            $LocalVarQueryParameters['http_content_type__nic'] = $HttpContentTypeNic
        }

        if ($HttpContentTypeNie) {
            $LocalVarQueryParameters['http_content_type__nie'] = $HttpContentTypeNie
        }

        if ($HttpContentTypeNiew) {
            $LocalVarQueryParameters['http_content_type__niew'] = $HttpContentTypeNiew
        }

        if ($HttpContentTypeNisw) {
            $LocalVarQueryParameters['http_content_type__nisw'] = $HttpContentTypeNisw
        }

        if ($HttpMethod) {
            $LocalVarQueryParameters['http_method'] = $HttpMethod
        }

        if ($HttpMethodN) {
            $LocalVarQueryParameters['http_method__n'] = $HttpMethodN
        }

        if ($Id) {
            $LocalVarQueryParameters['id'] = $Id
        }

        if ($IdEmpty) {
            $LocalVarQueryParameters['id__empty'] = $IdEmpty
        }

        if ($IdGt) {
            $LocalVarQueryParameters['id__gt'] = $IdGt
        }

        if ($IdGte) {
            $LocalVarQueryParameters['id__gte'] = $IdGte
        }

        if ($IdLt) {
            $LocalVarQueryParameters['id__lt'] = $IdLt
        }

        if ($IdLte) {
            $LocalVarQueryParameters['id__lte'] = $IdLte
        }

        if ($IdN) {
            $LocalVarQueryParameters['id__n'] = $IdN
        }

        if ($LastUpdated) {
            $LocalVarQueryParameters['last_updated'] = $LastUpdated
        }

        if ($LastUpdatedEmpty) {
            $LocalVarQueryParameters['last_updated__empty'] = $LastUpdatedEmpty
        }

        if ($LastUpdatedGt) {
            $LocalVarQueryParameters['last_updated__gt'] = $LastUpdatedGt
        }

        if ($LastUpdatedGte) {
            $LocalVarQueryParameters['last_updated__gte'] = $LastUpdatedGte
        }

        if ($LastUpdatedLt) {
            $LocalVarQueryParameters['last_updated__lt'] = $LastUpdatedLt
        }

        if ($LastUpdatedLte) {
            $LocalVarQueryParameters['last_updated__lte'] = $LastUpdatedLte
        }

        if ($LastUpdatedN) {
            $LocalVarQueryParameters['last_updated__n'] = $LastUpdatedN
        }

        if ($Limit) {
            $LocalVarQueryParameters['limit'] = $Limit
        }

        if ($ModifiedByRequest) {
            $LocalVarQueryParameters['modified_by_request'] = $ModifiedByRequest
        }

        if ($Name) {
            $LocalVarQueryParameters['name'] = $Name
        }

        if ($NameEmpty) {
            $LocalVarQueryParameters['name__empty'] = $NameEmpty
        }

        if ($NameIc) {
            $LocalVarQueryParameters['name__ic'] = $NameIc
        }

        if ($NameIe) {
            $LocalVarQueryParameters['name__ie'] = $NameIe
        }

        if ($NameIew) {
            $LocalVarQueryParameters['name__iew'] = $NameIew
        }

        if ($NameIsw) {
            $LocalVarQueryParameters['name__isw'] = $NameIsw
        }

        if ($NameN) {
            $LocalVarQueryParameters['name__n'] = $NameN
        }

        if ($NameNic) {
            $LocalVarQueryParameters['name__nic'] = $NameNic
        }

        if ($NameNie) {
            $LocalVarQueryParameters['name__nie'] = $NameNie
        }

        if ($NameNiew) {
            $LocalVarQueryParameters['name__niew'] = $NameNiew
        }

        if ($NameNisw) {
            $LocalVarQueryParameters['name__nisw'] = $NameNisw
        }

        if ($Offset) {
            $LocalVarQueryParameters['offset'] = $Offset
        }

        if ($Ordering) {
            $LocalVarQueryParameters['ordering'] = $Ordering
        }

        if ($PayloadUrl) {
            $LocalVarQueryParameters['payload_url'] = $PayloadUrl
        }

        if ($Q) {
            $LocalVarQueryParameters['q'] = $Q
        }

        if ($Secret) {
            $LocalVarQueryParameters['secret'] = $Secret
        }

        if ($SecretEmpty) {
            $LocalVarQueryParameters['secret__empty'] = $SecretEmpty
        }

        if ($SecretIc) {
            $LocalVarQueryParameters['secret__ic'] = $SecretIc
        }

        if ($SecretIe) {
            $LocalVarQueryParameters['secret__ie'] = $SecretIe
        }

        if ($SecretIew) {
            $LocalVarQueryParameters['secret__iew'] = $SecretIew
        }

        if ($SecretIsw) {
            $LocalVarQueryParameters['secret__isw'] = $SecretIsw
        }

        if ($SecretN) {
            $LocalVarQueryParameters['secret__n'] = $SecretN
        }

        if ($SecretNic) {
            $LocalVarQueryParameters['secret__nic'] = $SecretNic
        }

        if ($SecretNie) {
            $LocalVarQueryParameters['secret__nie'] = $SecretNie
        }

        if ($SecretNiew) {
            $LocalVarQueryParameters['secret__niew'] = $SecretNiew
        }

        if ($SecretNisw) {
            $LocalVarQueryParameters['secret__nisw'] = $SecretNisw
        }

        if ($SslVerification) {
            $LocalVarQueryParameters['ssl_verification'] = $SslVerification
        }

        if ($Tag) {
            $LocalVarQueryParameters['tag'] = $Tag
        }

        if ($TagN) {
            $LocalVarQueryParameters['tag__n'] = $TagN
        }

        if ($UpdatedByRequest) {
            $LocalVarQueryParameters['updated_by_request'] = $UpdatedByRequest
        }

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "PaginatedWebhookList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this webhook.

.PARAMETER PatchedWebhookRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Webhook
#>
function Invoke-ExtrasWebhooksPartialUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${PatchedWebhookRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasWebhooksPartialUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/webhooks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasWebhooksPartialUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        $LocalVarBodyParameter = $PatchedWebhookRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PATCH' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Webhook" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this webhook.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Webhook
#>
function Invoke-ExtrasWebhooksRetrieve {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasWebhooksRetrieve' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/api/extras/webhooks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasWebhooksRetrieve."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Webhook" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
A unique integer value identifying this webhook.

.PARAMETER WebhookRequest
No description available.

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Webhook
#>
function Invoke-ExtrasWebhooksUpdate {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject]
        ${WebhookRequest},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ExtrasWebhooksUpdate' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json', 'multipart/form-data')

        $LocalVarUri = '/api/extras/webhooks/{id}/'
        if (!$Id) {
            throw "Error! The required parameter `Id` missing when calling extrasWebhooksUpdate."
        }
        $LocalVarUri = $LocalVarUri.replace('{id}', [System.Web.HTTPUtility]::UrlEncode($Id))

        if (!$WebhookRequest) {
            throw "Error! The required parameter `WebhookRequest` missing when calling extrasWebhooksUpdate."
        }

        $LocalVarBodyParameter = $WebhookRequest | ConvertTo-Json -Depth 100

        if ($Configuration["Cookie"]) {
            $LocalVarCookieParameters['cookieAuth'] = $Configuration["Cookie"]
            Write-Verbose ("Using API key `cookieAuth` in the cookie for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["Authorization"]) {
            $LocalVarHeaderParameters['Authorization'] = $Configuration["ApiKey"]["Authorization"]
            Write-Verbose ("Using API key 'Authorization' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'PUT' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Webhook" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

